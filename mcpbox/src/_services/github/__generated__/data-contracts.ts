/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */



  /** The reason for resolving the alert. */
  export enum SecretScanningAlertResolutionWebhook {
  FalsePositive = "false_positive",
  WontFix = "wont_fix",
  Revoked = "revoked",
  UsedInTests = "used_in_tests",
  PatternDeleted = "pattern_deleted",
  PatternEdited = "pattern_edited" 
 }

  /**
 * Projects v2 Item Content Type
 * The type of content tracked in a project item
 */
  export enum ProjectsV2ItemContentType {
  Issue = "Issue",
  PullRequest = "PullRequest",
  DraftIssue = "DraftIssue" 
 }

  /** Describe whether all repositories have been selected or there's a selection involved */
  export enum WebhooksRepositorySelection {
  All = "all",
  Selected = "selected" 
 }

  /** The reason for bypassing push protection. */
  export enum SecretScanningPushProtectionBypassReason {
  FalsePositive = "false_positive",
  UsedInTests = "used_in_tests",
  WillFixLater = "will_fix_later" 
 }

  /** Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`. */
  export enum CodeScanningAlertSetState {
  Open = "open",
  Dismissed = "dismissed" 
 }

  /** The type of reviewer. */
  export enum DeploymentReviewerType {
  User = "User",
  Team = "Team" 
 }

  /** The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page. `evaluate` is not available for the `repository` target. */
  export enum RepositoryRuleEnforcement {
  Disabled = "disabled",
  Active = "active",
  Evaluate = "evaluate" 
 }

  /** Severity of a code scanning alert. */
  export enum CodeScanningAlertSeverity {
  Critical = "critical",
  High = "high",
  Medium = "medium",
  Low = "low",
  Warning = "warning",
  Note = "note",
  Error = "error" 
 }

  /** The policy that controls the repositories in the organization that are allowed to run GitHub Actions. */
  export enum EnabledRepositories {
  All = "all",
  None = "none",
  Selected = "selected" 
 }

    export enum GhesReplicationStatusIndicator {
  UNKNOWN = "UNKNOWN",
  OK = "OK",
  WARNING = "WARNING",
  CRITICAL = "CRITICAL" 
 }

    export enum GhesClusterRoles {
  Blank = "Blank",
  ActionsServer = "ActionsServer",
  ConsulServer = "ConsulServer",
  ElasticsearchServer = "ElasticsearchServer",
  GitServer = "GitServer",
  JobServer = "JobServer",
  LaunchServer = "LaunchServer",
  MemcacheServer = "MemcacheServer",
  MetricsServer = "MetricsServer",
  MssqlServer = "MssqlServer",
  MysqlServer = "MysqlServer",
  PagesServer = "PagesServer",
  RedisServer = "RedisServer",
  StorageServer = "StorageServer",
  WebServer = "WebServer" 
 }

    export enum GhesClusterTopology {
  SingleNode = "SingleNode",
  Ha = "Ha",
  Cluster = "Cluster" 
 }

    export enum GhesClusterStatusIndicator {
  UNKNOWN = "UNKNOWN",
  OK = "OK",
  WARNING = "WARNING",
  CRITICAL = "CRITICAL" 
 }

    export enum GhesChecksResultIndicator {
  OK = "OK",
  FAILED = "FAILED" 
 }

  /**
 * author_association
 * How the author is associated with the repository.
 */
  export enum AuthorAssociation {
  COLLABORATOR = "COLLABORATOR",
  CONTRIBUTOR = "CONTRIBUTOR",
  FIRST_TIMER = "FIRST_TIMER",
  FIRST_TIME_CONTRIBUTOR = "FIRST_TIME_CONTRIBUTOR",
  MANNEQUIN = "MANNEQUIN",
  MEMBER = "MEMBER",
  NONE = "NONE",
  OWNER = "OWNER" 
 }

  /** **Required when the `state` is `resolved`.** The reason for resolving the alert. */
  export enum SecretScanningAlertResolution {
  FalsePositive = "false_positive",
  WontFix = "wont_fix",
  Revoked = "revoked",
  UsedInTests = "used_in_tests" 
 }

  /** Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`. */
  export enum SecretScanningAlertState {
  Open = "open",
  Resolved = "resolved" 
 }

  /** A classification of the file. For example to identify it as generated. */
  export enum CodeScanningAlertClassification {
  Source = "source",
  Generated = "generated",
  Test = "test",
  Library = "library" 
 }

  /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */
  export enum CodeScanningAlertDismissedReason {
  FalsePositive = "false positive",
  WontFix = "won't fix",
  UsedInTests = "used in tests" 
 }

  /** State of a code scanning alert. */
  export enum CodeScanningAlertState {
  Open = "open",
  Dismissed = "dismissed",
  Fixed = "fixed" 
 }

  /** State of a code scanning alert. */
  export enum CodeScanningAlertStateQuery {
  Open = "open",
  Closed = "closed",
  Dismissed = "dismissed",
  Fixed = "fixed" 
 }

  /** The default workflow permissions granted to the GITHUB_TOKEN when running workflows. */
  export enum ActionsDefaultWorkflowPermissions {
  Read = "read",
  Write = "write" 
 }

  /** The permissions policy that controls the actions that are allowed to run. */
  export enum AllowedActions {
  All = "all",
  LocalOnly = "local_only",
  Selected = "selected" 
 }

  /** The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. */
  export enum EnabledOrganizations {
  All = "all",
  None = "none",
  Selected = "selected" 
 }

  /** The type of credit the user is receiving. */
  export enum SecurityAdvisoryCreditTypes {
  Analyst = "analyst",
  Finder = "finder",
  Reporter = "reporter",
  Coordinator = "coordinator",
  RemediationDeveloper = "remediation_developer",
  RemediationReviewer = "remediation_reviewer",
  RemediationVerifier = "remediation_verifier",
  Tool = "tool",
  Sponsor = "sponsor",
  Other = "other" 
 }

  /** The package's language or package management ecosystem. */
  export enum SecurityAdvisoryEcosystems {
  Rubygems = "rubygems",
  Npm = "npm",
  Pip = "pip",
  Maven = "maven",
  Nuget = "nuget",
  Composer = "composer",
  Go = "go",
  Rust = "rust",
  Erlang = "erlang",
  Actions = "actions",
  Pub = "pub",
  Other = "other",
  Swift = "swift" 
 }

    export interface Root {
  /** @format uri-template */
    current_user_url: string,
  /** @format uri-template */
    current_user_authorizations_html_url: string,
  /** @format uri-template */
    authorizations_url: string,
  /** @format uri-template */
    code_search_url: string,
  /** @format uri-template */
    commit_search_url: string,
  /** @format uri-template */
    emails_url: string,
  /** @format uri-template */
    emojis_url: string,
  /** @format uri-template */
    events_url: string,
  /** @format uri-template */
    feeds_url: string,
  /** @format uri-template */
    followers_url: string,
  /** @format uri-template */
    following_url: string,
  /** @format uri-template */
    gists_url: string,
  /**
   * @deprecated
   * @format uri-template
   */
    hub_url?: string,
  /** @format uri-template */
    issue_search_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    label_search_url: string,
  /** @format uri-template */
    notifications_url: string,
  /** @format uri-template */
    organization_url: string,
  /** @format uri-template */
    organization_repositories_url: string,
  /** @format uri-template */
    organization_teams_url: string,
  /** @format uri-template */
    public_gists_url: string,
  /** @format uri-template */
    rate_limit_url: string,
  /** @format uri-template */
    repository_url: string,
  /** @format uri-template */
    repository_search_url: string,
  /** @format uri-template */
    current_user_repositories_url: string,
  /** @format uri-template */
    starred_url: string,
  /** @format uri-template */
    starred_gists_url: string,
  /** @format uri-template */
    topic_search_url?: string,
  /** @format uri-template */
    user_url: string,
  /** @format uri-template */
    user_organizations_url: string,
  /** @format uri-template */
    user_repositories_url: string,
  /** @format uri-template */
    user_search_url: string,
}

    export interface GlobalHook {
    type?: string,
    id?: number,
    name?: string,
    active?: boolean,
    events?: (string)[],
    config?: {
    url?: string,
    content_type?: string,
    insecure_ssl?: string,
    secret?: string,

},
    updated_at?: string,
    created_at?: string,
    url?: string,
    ping_url?: string,
}

    export interface GlobalHook2 {
    type?: string,
    id?: number,
    name?: string,
    active?: boolean,
    events?: (string)[],
    config?: {
    url?: string,
    content_type?: string,
    insecure_ssl?: string,

},
    updated_at?: string,
    created_at?: string,
    url?: string,
    ping_url?: string,
}

    export interface PublicKeyFull {
  /** @format int64 */
    id: number,
    key: string,
    user_id: number | null,
  /** @format int64 */
    repository_id: number | null,
    url: string,
    title: string,
    read_only: boolean,
    verified: boolean,
  /** @format date-time */
    created_at: string,
    added_by?: string | null,
  /** @format date-time */
    last_used: string | null,
    enabled?: boolean,
}

    export interface LdapMappingTeam {
    ldap_dn?: string,
    id?: number,
    node_id?: string,
    url?: string,
    html_url?: string,
    name?: string,
    slug?: string,
    description?: string | null,
    privacy?: string,
    notification_setting?: string,
    permission?: string,
    members_url?: string,
    repositories_url?: string,
    parent?: null,
}

  /**
 * Ldap Private User
 * Ldap Private User
 */
  export interface LdapMappingUser {
    ldap_dn?: string,
    login: string,
  /** @format int64 */
    id: number,
    node_id: string,
  /** @format uri */
    avatar_url: string,
    gravatar_id: string | null,
  /** @format uri */
    url: string,
  /** @format uri */
    html_url: string,
  /** @format uri */
    followers_url: string,
    following_url: string,
    gists_url: string,
    starred_url: string,
  /** @format uri */
    subscriptions_url: string,
  /** @format uri */
    organizations_url: string,
  /** @format uri */
    repos_url: string,
    events_url: string,
  /** @format uri */
    received_events_url: string,
    type: string,
    site_admin: boolean,
    name: string | null,
    company: string | null,
    blog: string | null,
    location: string | null,
  /** @format email */
    email: string | null,
    hireable: boolean | null,
    bio: string | null,
    twitter_username?: string | null,
    public_repos: number,
    public_gists: number,
    followers: number,
    following: number,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
    private_gists: number,
    total_private_repos: number,
    owned_private_repos: number,
    disk_usage: number,
    collaborators: number,
    two_factor_authentication: boolean,
    plan?: {
    collaborators: number,
    name: string,
    space: number,
    private_repos: number,

},
  /** @format date-time */
    suspended_at?: string,
    business_plus?: boolean,
    user_view_type?: string,
}

  /**
 * Organization Simple
 * A GitHub organization.
 */
  export interface OrganizationSimple {
    login: string,
    id: number,
    node_id: string,
  /** @format uri */
    url: string,
  /** @format uri */
    repos_url: string,
  /** @format uri */
    events_url: string,
    hooks_url: string,
    issues_url: string,
    members_url: string,
    public_members_url: string,
    avatar_url: string,
    description: string | null,
}

    export interface PreReceiveEnvironment {
  /** @format int64 */
    id?: number,
    name?: string,
    image_url?: string,
    url?: string,
    html_url?: string,
    default_environment?: boolean,
    created_at?: string,
    hooks_count?: number,
    download?: {
    url?: string,
    state?: string,
    downloaded_at?: string | null,
    message?: string | null,

},
}

    export interface PreReceiveEnvironmentDownloadStatus {
    url?: string,
    state?: string,
    downloaded_at?: string | null,
    message?: string | null,
}

    export interface PreReceiveHook {
    id?: number,
    name?: string,
    enforcement?: string,
    script?: string,
    script_repository?: {
    id?: number,
    full_name?: string,
    url?: string,
    html_url?: string,

},
    environment?: {
  /** @format int64 */
    id?: number,
    name?: string,
    image_url?: string,
    url?: string,
    html_url?: string,
    default_environment?: boolean,
    created_at?: string,
    hooks_count?: number,
    download?: {
    url?: string,
    state?: string,
    downloaded_at?: string | null,
    message?: string | null,

},

},
    allow_downstream_configuration?: boolean,
}

  /**
 * Simple User
 * A GitHub user.
 */
  export interface SimpleUser {
    name?: string | null,
    email?: string | null,
    login: string,
  /** @format int64 */
    id: number,
    node_id: string,
  /** @format uri */
    avatar_url: string,
    gravatar_id: string | null,
  /** @format uri */
    url: string,
  /** @format uri */
    html_url: string,
  /** @format uri */
    followers_url: string,
    following_url: string,
    gists_url: string,
    starred_url: string,
  /** @format uri */
    subscriptions_url: string,
  /** @format uri */
    organizations_url: string,
  /** @format uri */
    repos_url: string,
    events_url: string,
  /** @format uri */
    received_events_url: string,
    type: string,
    site_admin: boolean,
    starred_at?: string,
    user_view_type?: string,
}

  /**
 * App Permissions
 * The permissions granted to the user access token.
 * @example {"contents":"read","issues":"read","deployments":"write","single_file":"read"}
 */
  export interface AppPermissions {
  /** The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. */
    actions?: "read" | "write",
  /** The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. */
    administration?: "read" | "write",
  /** The level of permission to grant the access token for checks on code. */
    checks?: "read" | "write",
  /** The level of permission to grant the access token to create, edit, delete, and list Codespaces. */
    codespaces?: "read" | "write",
  /** The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. */
    contents?: "read" | "write",
  /** The level of permission to grant the access token to manage Dependabot secrets. */
    dependabot_secrets?: "read" | "write",
  /** The level of permission to grant the access token for deployments and deployment statuses. */
    deployments?: "read" | "write",
  /** The level of permission to grant the access token for managing repository environments. */
    environments?: "read" | "write",
  /** The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. */
    issues?: "read" | "write",
  /** The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. */
    metadata?: "read" | "write",
  /** The level of permission to grant the access token for packages published to GitHub Packages. */
    packages?: "read" | "write",
  /** The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. */
    pages?: "read" | "write",
  /** The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. */
    pull_requests?: "read" | "write",
  /** The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property. */
    repository_custom_properties?: "read" | "write",
  /** The level of permission to grant the access token to manage the post-receive hooks for a repository. */
    repository_hooks?: "read" | "write",
  /** The level of permission to grant the access token to manage repository projects, columns, and cards. */
    repository_projects?: "read" | "write" | "admin",
  /** The level of permission to grant the access token to view and manage secret scanning alerts. */
    secret_scanning_alerts?: "read" | "write",
  /** The level of permission to grant the access token to manage repository secrets. */
    secrets?: "read" | "write",
  /** The level of permission to grant the access token to view and manage security events like code scanning alerts. */
    security_events?: "read" | "write",
  /** The level of permission to grant the access token to manage just a single file. */
    single_file?: "read" | "write",
  /** The level of permission to grant the access token for commit statuses. */
    statuses?: "read" | "write",
  /** The level of permission to grant the access token to manage Dependabot alerts. */
    vulnerability_alerts?: "read" | "write",
  /** The level of permission to grant the access token to update GitHub Actions workflow files. */
    workflows?: "write",
  /** The level of permission to grant the access token for organization teams and members. */
    members?: "read" | "write",
  /** The level of permission to grant the access token to manage access to an organization. */
    organization_administration?: "read" | "write",
  /** The level of permission to grant the access token for custom repository roles management. */
    organization_custom_roles?: "read" | "write",
  /** The level of permission to grant the access token for custom organization roles management. */
    organization_custom_org_roles?: "read" | "write",
  /** The level of permission to grant the access token for custom property management. */
    organization_custom_properties?: "read" | "write" | "admin",
  /** The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change. */
    organization_copilot_seat_management?: "write",
  /** The level of permission to grant the access token to view and manage announcement banners for an organization. */
    organization_announcement_banners?: "read" | "write",
  /** The level of permission to grant the access token to view events triggered by an activity in an organization. */
    organization_events?: "read",
  /** The level of permission to grant the access token to manage the post-receive hooks for an organization. */
    organization_hooks?: "read" | "write",
  /** The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization. */
    organization_personal_access_tokens?: "read" | "write",
  /** The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization. */
    organization_personal_access_token_requests?: "read" | "write",
  /** The level of permission to grant the access token for viewing an organization's plan. */
    organization_plan?: "read",
  /** The level of permission to grant the access token to manage organization projects and projects public preview (where available). */
    organization_projects?: "read" | "write" | "admin",
  /** The level of permission to grant the access token for organization packages published to GitHub Packages. */
    organization_packages?: "read" | "write",
  /** The level of permission to grant the access token to manage organization secrets. */
    organization_secrets?: "read" | "write",
  /** The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. */
    organization_self_hosted_runners?: "read" | "write",
  /** The level of permission to grant the access token to view and manage users blocked by the organization. */
    organization_user_blocking?: "read" | "write",
  /** The level of permission to grant the access token to manage team discussions and related comments. */
    team_discussions?: "read" | "write",
  /** The level of permission to grant the access token to manage the email addresses belonging to a user. */
    email_addresses?: "read" | "write",
  /** The level of permission to grant the access token to manage the followers belonging to a user. */
    followers?: "read" | "write",
  /** The level of permission to grant the access token to manage git SSH keys. */
    git_ssh_keys?: "read" | "write",
  /** The level of permission to grant the access token to view and manage GPG keys belonging to a user. */
    gpg_keys?: "read" | "write",
  /** The level of permission to grant the access token to view and manage interaction limits on a repository. */
    interaction_limits?: "read" | "write",
  /** The level of permission to grant the access token to manage the profile settings belonging to a user. */
    profile?: "write",
  /** The level of permission to grant the access token to list and manage repositories a user is starring. */
    starring?: "read" | "write",
  /** The level of permission to grant the access token to list and manage repositories a user is starring. */
    enterprise_administration?: "read" | "write",
  /** The level of permission to grant the access token to view and edit custom properties defined for a enterprise */
    enterprise_custom_properties?: "read" | "write",
}

  /** Scoped Installation */
  export interface ScopedInstallation {
  /** The permissions granted to the user access token. */
    permissions: AppPermissions,
  /** Describe whether all repositories have been selected or there's a selection involved */
    repository_selection: "all" | "selected",
    single_file_name: string | null,
    has_multiple_single_files?: boolean,
    single_file_paths?: (string)[],
  /** @format uri */
    repositories_url: string,
  /** A GitHub user. */
    account: SimpleUser,
}

  /**
 * Authorization
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
  export interface Authorization {
  /** @format int64 */
    id: number,
  /** @format uri */
    url: string,
  /** A list of scopes that this authorization is in. */
    scopes: (any)[] | null,
    token: string,
    token_last_eight: string | null,
    hashed_token: string | null,
    app: {
    client_id: string,
    name: string,
  /** @format uri */
    url: string,

},
    note: string | null,
  /** @format uri */
    note_url: string | null,
  /** @format date-time */
    updated_at: string,
  /** @format date-time */
    created_at: string,
    fingerprint: string | null,
    user?: (null | SimpleUser),
    installation?: (null | ScopedInstallation),
  /** @format date-time */
    expires_at: string | null,
}

  /** A vulnerability describing the product and its affected versions within a GitHub Security Advisory. */
  export interface Vulnerability {
  /** The name of the package affected by the vulnerability. */
    package: {
  /** The package's language or package management ecosystem. */
    ecosystem: SecurityAdvisoryEcosystems,
  /** The unique package name within its ecosystem. */
    name: string | null,

},
  /** The range of the package versions affected by the vulnerability. */
    vulnerable_version_range: string | null,
  /** The package version that resolves the vulnerability. */
    first_patched_version: string | null,
  /** The functions in the package that are affected by the vulnerability. */
    vulnerable_functions: (any)[] | null,
}

    export interface CvssSeverities {
    "cvss_v3"?: {
  /** The CVSS 3 vector string. */
    vector_string: string | null,
  /**
   * The CVSS 3 score.
   * @min 0
   * @max 10
   */
    score: number | null,

},
    "cvss_v4"?: {
  /** The CVSS 4 vector string. */
    vector_string: string | null,
  /**
   * The CVSS 4 score.
   * @min 0
   * @max 10
   */
    score: number | null,

},
}

  /** The EPSS scores as calculated by the [Exploit Prediction Scoring System](https://www.first.org/epss). */
  export interface SecurityAdvisoryEpss {
  /**
   * @min 0
   * @max 100
   */
    percentage?: number,
  /**
   * @min 0
   * @max 100
   */
    percentile?: number,
}

  /** A GitHub Security Advisory. */
  export interface GlobalAdvisory {
  /** The GitHub Security Advisory ID. */
    ghsa_id: string,
  /** The Common Vulnerabilities and Exposures (CVE) ID. */
    cve_id: string | null,
  /** The API URL for the advisory. */
    url: string,
  /**
   * The URL for the advisory.
   * @format uri
   */
    html_url: string,
  /**
   * The API URL for the repository advisory.
   * @format uri
   */
    repository_advisory_url: string | null,
  /**
   * A short summary of the advisory.
   * @maxLength 1024
   */
    summary: string,
  /**
   * A detailed description of what the advisory entails.
   * @maxLength 65535
   */
    description: string | null,
  /** The type of advisory. */
    type: "reviewed" | "unreviewed" | "malware",
  /** The severity of the advisory. */
    severity: "critical" | "high" | "medium" | "low" | "unknown",
  /**
   * The URL of the advisory's source code.
   * @format uri
   */
    source_code_location: string | null,
    identifiers: (any)[] | null,
    references: (any)[] | null,
  /**
   * The date and time of when the advisory was published, in ISO 8601 format.
   * @format date-time
   */
    published_at: string,
  /**
   * The date and time of when the advisory was last updated, in ISO 8601 format.
   * @format date-time
   */
    updated_at: string,
  /**
   * The date and time of when the advisory was reviewed by GitHub, in ISO 8601 format.
   * @format date-time
   */
    github_reviewed_at: string | null,
  /**
   * The date and time when the advisory was published in the National Vulnerability Database, in ISO 8601 format.
   * This field is only populated when the advisory is imported from the National Vulnerability Database.
   * @format date-time
   */
    nvd_published_at: string | null,
  /**
   * The date and time of when the advisory was withdrawn, in ISO 8601 format.
   * @format date-time
   */
    withdrawn_at: string | null,
  /** The products and respective version ranges affected by the advisory. */
    vulnerabilities: (any)[] | null,
    cvss: {
  /** The CVSS vector. */
    vector_string: string | null,
  /**
   * The CVSS score.
   * @min 0
   * @max 10
   */
    score: number | null,

},
    cvss_severities?: CvssSeverities,
  /** The EPSS scores as calculated by the [Exploit Prediction Scoring System](https://www.first.org/epss). */
    epss?: SecurityAdvisoryEpss,
    cwes: (any)[] | null,
  /** In GitHub Enterprise Server, this field will always be empty because the user metadata of credited users will not be available. */
    credits: (any)[] | null,
}

  /**
 * Basic Error
 * Basic Error
 */
  export interface BasicError {
    message?: string,
    documentation_url?: string,
    url?: string,
    status?: string,
}

  /**
 * Validation Error Simple
 * Validation Error Simple
 */
  export interface ValidationErrorSimple {
    message: string,
    documentation_url: string,
    errors?: (string)[],
}

  /**
 * Enterprise
 * An enterprise on GitHub.
 */
  export interface Enterprise {
  /** A short description of the enterprise. */
    description?: string | null,
  /** @format uri */
    html_url: string,
  /**
   * The enterprise's website URL.
   * @format uri
   */
    website_url?: string | null,
  /** Unique identifier of the enterprise */
    id: number,
    node_id: string,
  /** The name of the enterprise. */
    name: string,
  /** The slug url identifier for the enterprise. */
    slug: string,
  /** @format date-time */
    created_at: string | null,
  /** @format date-time */
    updated_at: string | null,
  /** @format uri */
    avatar_url: string,
}

  /**
 * GitHub app
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
  export interface Integration {
  /** Unique identifier of the GitHub app */
    id: number,
  /** The slug name of the GitHub app */
    slug?: string,
    node_id: string,
    client_id?: string,
    owner: (SimpleUser | Enterprise),
  /** The name of the GitHub app */
    name: string,
    description: string | null,
  /** @format uri */
    external_url: string,
  /** @format uri */
    html_url: string,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /**
   * The set of permissions for the GitHub app
   * @example {"issues":"read","deployments":"write"}
   */
    permissions: {
    issues?: string,
    checks?: string,
    metadata?: string,
    contents?: string,
    deployments?: string,
    [key: string]: any,

},
  /** The list of events for the GitHub app. Note that the `installation_target`, `security_advisory`, and `meta` events are not included because they are global events and not specific to an installation. */
    events: (string)[],
  /** The number of installations associated with the GitHub app. Only returned when the integration is requesting details about itself. */
    installations_count?: number,
}

  /**
 * The URL to which the payloads will be delivered.
 * @format uri
 */
  export type WebhookConfigUrl = string

  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
  export type WebhookConfigContentType = string

  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.17/webhooks/event-payloads/#delivery-headers). */
  export type WebhookConfigSecret = string

  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
  export type WebhookConfigInsecureSsl = (string | number)

  /**
 * Webhook Configuration
 * Configuration object of the webhook
 */
  export interface WebhookConfig {
  /** The URL to which the payloads will be delivered. */
    url?: WebhookConfigUrl,
  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
    content_type?: WebhookConfigContentType,
  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.17/webhooks/event-payloads/#delivery-headers). */
    secret?: WebhookConfigSecret,
  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
    insecure_ssl?: WebhookConfigInsecureSsl,
}

  /**
 * Simple webhook delivery
 * Delivery made by a webhook, without request and response information.
 */
  export interface HookDeliveryItem {
  /**
   * Unique identifier of the webhook delivery.
   * @format int64
   */
    id: number,
  /** Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event). */
    guid: string,
  /**
   * Time when the webhook delivery occurred.
   * @format date-time
   */
    delivered_at: string,
  /** Whether the webhook delivery is a redelivery. */
    redelivery: boolean,
  /** Time spent delivering. */
    duration: number,
  /** Describes the response returned after attempting the delivery. */
    status: string,
  /** Status code received when delivery was made. */
    status_code: number,
  /** The event that triggered the delivery. */
    event: string,
  /** The type of activity for the event that triggered the delivery. */
    action: string | null,
  /**
   * The id of the GitHub App installation associated with this event.
   * @format int64
   */
    installation_id: number | null,
  /**
   * The id of the repository associated with this event.
   * @format int64
   */
    repository_id: number | null,
  /**
   * Time when the webhook delivery was throttled.
   * @format date-time
   */
    throttled_at?: string | null,
}

  /**
 * Scim Error
 * Scim Error
 */
  export interface ScimError {
    message?: string | null,
    documentation_url?: string | null,
    detail?: string | null,
    status?: number,
    scimType?: string | null,
    schemas?: (string)[],
}

  /**
 * Validation Error
 * Validation Error
 */
  export interface ValidationError {
    message: string,
    documentation_url: string,
    errors?: ({
    resource?: string,
    field?: string,
    message?: string,
    code: string,
    index?: number,
    value?: (string | null | number | null | (any)[] | null),

})[],
}

  /**
 * Webhook delivery
 * Delivery made by a webhook.
 */
  export interface HookDelivery {
  /** Unique identifier of the delivery. */
    id: number,
  /** Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event). */
    guid: string,
  /**
   * Time when the delivery was delivered.
   * @format date-time
   */
    delivered_at: string,
  /** Whether the delivery is a redelivery. */
    redelivery: boolean,
  /** Time spent delivering. */
    duration: number,
  /** Description of the status of the attempted delivery */
    status: string,
  /** Status code received when delivery was made. */
    status_code: number,
  /** The event that triggered the delivery. */
    event: string,
  /** The type of activity for the event that triggered the delivery. */
    action: string | null,
  /** The id of the GitHub App installation associated with this event. */
    installation_id: number | null,
  /** The id of the repository associated with this event. */
    repository_id: number | null,
  /**
   * Time when the webhook delivery was throttled.
   * @format date-time
   */
    throttled_at?: string | null,
  /** The URL target of the delivery. */
    url?: string,
    request: {
  /** The request headers sent with the webhook delivery. */
    headers: object | null,
  /** The webhook payload. */
    payload: object | null,

},
    response: {
  /** The response headers received when the delivery was made. */
    headers: object | null,
  /** The response payload received. */
    payload: string | null,

},
}

  /**
 * Integration Installation Request
 * Request to install an integration on a target
 */
  export interface IntegrationInstallationRequest {
  /** Unique identifier of the request installation. */
    id: number,
    node_id?: string,
    account: (SimpleUser | Enterprise),
  /** A GitHub user. */
    requester: SimpleUser,
  /** @format date-time */
    created_at: string,
}

  /**
 * Installation
 * Installation
 */
  export interface Installation {
  /** The ID of the installation. */
    id: number,
    account: (SimpleUser | Enterprise),
  /** Describe whether all repositories have been selected or there's a selection involved */
    repository_selection: "all" | "selected",
  /** @format uri */
    access_tokens_url: string,
  /** @format uri */
    repositories_url: string,
  /** @format uri */
    html_url: string,
    app_id: number,
    client_id?: string,
  /** The ID of the user or organization this token is being scoped to. */
    target_id: number,
    target_type: string,
  /** The permissions granted to the user access token. */
    permissions: AppPermissions,
    events: (string)[],
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
    single_file_name: string | null,
    has_multiple_single_files?: boolean,
    single_file_paths?: (string)[],
    app_slug: string,
    suspended_by: (null | SimpleUser),
  /** @format date-time */
    suspended_at: string | null,
    contact_email?: string | null,
}

  /**
 * License Simple
 * License Simple
 */
  export interface LicenseSimple {
    key: string,
    name: string,
  /** @format uri */
    url: string | null,
    spdx_id: string | null,
    node_id: string,
  /** @format uri */
    html_url?: string,
}

  /**
 * Repository
 * A repository on GitHub.
 */
  export interface Repository {
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    node_id: string,
  /** The name of the repository. */
    name: string,
    full_name: string,
    license: (null | LicenseSimple),
    forks: number,
    permissions?: {
    admin: boolean,
    pull: boolean,
    triage?: boolean,
    push: boolean,
    maintain?: boolean,

},
  /** A GitHub user. */
    owner: SimpleUser,
  /**
   * Whether the repository is private or public.
   * @default false
   */
    private: boolean,
  /** @format uri */
    html_url: string,
    description: string | null,
    fork: boolean,
  /** @format uri */
    url: string,
    archive_url: string,
    assignees_url: string,
    blobs_url: string,
    branches_url: string,
    collaborators_url: string,
    comments_url: string,
    commits_url: string,
    compare_url: string,
    contents_url: string,
  /** @format uri */
    contributors_url: string,
  /** @format uri */
    deployments_url: string,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
  /** @format uri */
    forks_url: string,
    git_commits_url: string,
    git_refs_url: string,
    git_tags_url: string,
    git_url: string,
    issue_comment_url: string,
    issue_events_url: string,
    issues_url: string,
    keys_url: string,
    labels_url: string,
  /** @format uri */
    languages_url: string,
  /** @format uri */
    merges_url: string,
    milestones_url: string,
    notifications_url: string,
    pulls_url: string,
    releases_url: string,
    ssh_url: string,
  /** @format uri */
    stargazers_url: string,
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    trees_url: string,
    clone_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    homepage: string | null,
    language: string | null,
    forks_count: number,
    stargazers_count: number,
    watchers_count: number,
  /** The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0. */
    size: number,
  /** The default branch of the repository. */
    default_branch: string,
    open_issues_count: number,
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @default false
   */
    is_template?: boolean,
    topics?: (string)[],
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
    has_pages: boolean,
  /**
   * Whether downloads are enabled.
   * @deprecated
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions?: boolean,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** Returns whether or not this repository disabled. */
    disabled: boolean,
  /**
   * The repository visibility: public, private, or internal.
   * @default "public"
   */
    visibility?: string,
  /** @format date-time */
    pushed_at: string | null,
  /** @format date-time */
    created_at: string | null,
  /** @format date-time */
    updated_at: string | null,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
    temp_clone_token?: string,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   * @default false
   */
    allow_update_branch?: boolean,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @deprecated
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /** Whether to allow forking this repo */
    allow_forking?: boolean,
  /**
   * Whether to require contributors to sign off on web-based commits
   * @default false
   */
    web_commit_signoff_required?: boolean,
    open_issues: number,
    watchers: number,
    master_branch?: string,
    starred_at?: string,
  /** Whether anonymous git access is enabled for this repository */
    anonymous_access_enabled?: boolean,
  /** The status of the code search index for this repository */
    code_search_index_status?: {
    lexical_search_ok?: boolean,
    lexical_commit_sha?: string,

},
}

  /**
 * Installation Token
 * Authentication token for a GitHub App installed on a user or org.
 */
  export interface InstallationToken {
    token: string,
    expires_at: string,
  /** The permissions granted to the user access token. */
    permissions?: AppPermissions,
    repository_selection?: "all" | "selected",
    repositories?: (Repository)[],
    single_file?: string,
    has_multiple_single_files?: boolean,
    single_file_paths?: (string)[],
}

  /**
 * Application Grant
 * The authorization associated with an OAuth Access.
 */
  export interface ApplicationGrant {
  /** @format int64 */
    id: number,
  /** @format uri */
    url: string,
    app: {
    client_id: string,
    name: string,
  /** @format uri */
    url: string,

},
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
    scopes: (string)[],
    user?: (null | SimpleUser),
}

  /**
 * Code Of Conduct
 * Code Of Conduct
 */
  export interface CodeOfConduct {
    key: string,
    name: string,
  /** @format uri */
    url: string,
    body?: string,
  /** @format uri */
    html_url: string | null,
}

  /** The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see "[Basic writing and formatting syntax](https://docs.github.com/enterprise-server@3.17/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)." */
  export type AnnouncementMessage = string | null

  /**
 * The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string.
 * @format date-time
 */
  export type AnnouncementExpiration = string | null

  /**
 * Whether an announcement can be dismissed by the user.
 * @default false
 */
  export type AnnouncementUserDismissible = boolean | null

  /**
 * Enterprise Announcement
 * Enterprise global announcement
 */
  export interface Announcement {
  /** The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see "[Basic writing and formatting syntax](https://docs.github.com/enterprise-server@3.17/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)." */
    announcement: AnnouncementMessage,
  /** The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string. */
    expires_at?: AnnouncementExpiration,
  /** Whether an announcement can be dismissed by the user. */
    user_dismissible?: AnnouncementUserDismissible,
}

    export interface LicenseInfo {
    seats?: (string | number),
    seats_used?: number,
    seats_available?: (string | number),
    kind?: string,
    days_until_expiration?: number,
    expire_at?: string,
}

  /** Repository Enterprise Stats */
  export interface EnterpriseRepositoryOverview {
    total_repos: number,
    root_repos: number,
    fork_repos: number,
    org_repos: number,
    total_pushes: number,
    total_wikis: number,
}

  /** Hooks Enterprise Stats */
  export interface EnterpriseHookOverview {
    total_hooks: number,
    active_hooks: number,
    inactive_hooks: number,
}

  /** Enterprise Pages Stats */
  export interface EnterprisePageOverview {
    total_pages: number,
}

  /** Enterprise Organization Stats */
  export interface EnterpriseOrganizationOverview {
    total_orgs: number,
    disabled_orgs: number,
    total_teams: number,
    total_team_members: number,
}

  /** Enterprise User Stats */
  export interface EnterpriseUserOverview {
    total_users: number,
    admin_users: number,
    suspended_users: number,
}

  /** Enterprise Pull Request Stats */
  export interface EnterprisePullRequestOverview {
    total_pulls: number,
    merged_pulls: number,
    mergeable_pulls: number,
    unmergeable_pulls: number,
}

  /** Enterprise Issue Stats */
  export interface EnterpriseIssueOverview {
    total_issues: number,
    open_issues: number,
    closed_issues: number,
}

  /** Enterprise Milestone Stats */
  export interface EnterpriseMilestoneOverview {
    total_milestones: number,
    open_milestones: number,
    closed_milestones: number,
}

  /** Enterprise Gist Stats */
  export interface EnterpriseGistOverview {
    total_gists: number,
    private_gists: number,
    public_gists: number,
}

  /** Enterprise Comment Stats */
  export interface EnterpriseCommentOverview {
    total_commit_comments: number,
    total_gist_comments: number,
    total_issue_comments: number,
    total_pull_request_comments: number,
}

    export interface EnterpriseOverview {
    repos?: EnterpriseRepositoryOverview,
    hooks?: EnterpriseHookOverview,
    pages?: EnterprisePageOverview,
    orgs?: EnterpriseOrganizationOverview,
    users?: EnterpriseUserOverview,
    pulls?: EnterprisePullRequestOverview,
    issues?: EnterpriseIssueOverview,
    milestones?: EnterpriseMilestoneOverview,
    gists?: EnterpriseGistOverview,
    comments?: EnterpriseCommentOverview,
}

  /** Enterprise Security Products Stats */
  export interface EnterpriseSecurityProductsOverview {
    total_repos?: number,
    nonarchived_repos?: number,
    secret_scanning_enabled_repos?: number,
    secret_scanning_push_protection_enabled_repos?: number,
    code_scanning_enabled_repos?: number,
    code_scanning_pr_reviews_enabled_repos?: number,
    code_scanning_default_setup_enabled_repos?: number,
    code_scanning_default_setup_eligible_repos?: number,
    dependabot_alerts_enabled_repos?: number,
    dependabot_security_updates_enabled_repos?: number,
    dependabot_version_updates_enabled_repos?: number,
    advanced_security_enabled_repos?: number,
    active_committers?: number,
    purchased_committers?: number,
    maximum_committers?: number,
    secret_protection_licenses?: number,
    secret_protection_active_committers?: number,
    code_security_licenses?: number,
    code_security_active_committers?: number,
}

    export interface ActionsCacheUsageOrgEnterprise {
  /** The count of active caches across all repositories of an enterprise or an organization. */
    total_active_caches_count: number,
  /** The total size in bytes of all active cache items across all repositories of an enterprise or an organization. */
    total_active_caches_size_in_bytes: number,
}

  /**
 * Actions cache usage policy for an enterprise
 * GitHub Actions cache usage policy for an enterprise.
 */
  export interface ActionsCacheUsagePolicyEnterprise {
  /** For repositories in an enterprise, the default size limit for the sum of all caches in a repository, in gigabytes. */
    repo_cache_size_limit_in_gb?: number,
  /** For repositories in an enterprise, the maximum value that can be set as the limit for the sum of all caches in a repository, in gigabytes. */
    max_repo_cache_size_limit_in_gb?: number,
}

  /** The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`. */
  export type SelectedActionsUrl = string

    export interface ActionsEnterprisePermissions {
  /** The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. */
    enabled_organizations: EnabledOrganizations,
  /** The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when `enabled_organizations` is set to `selected`. */
    selected_organizations_url?: string,
  /** The permissions policy that controls the actions that are allowed to run. */
    allowed_actions?: AllowedActions,
  /** The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`. */
    selected_actions_url?: SelectedActionsUrl,
}

    export interface SelectedActions {
  /** Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization. */
    github_owned_allowed?: boolean,
  /** Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators using GitHub Connect. */
    verified_allowed?: boolean,
  /**
   * Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.
   * 
   * > [!NOTE]
   * > The `patterns_allowed` setting only applies to public repositories.
   */
    patterns_allowed?: (string)[],
}

  /** Whether GitHub Actions can approve pull requests. Enabling this can be a security risk. */
  export type ActionsCanApprovePullRequestReviews = boolean

    export interface ActionsGetDefaultWorkflowPermissions {
  /** The default workflow permissions granted to the GITHUB_TOKEN when running workflows. */
    default_workflow_permissions: ActionsDefaultWorkflowPermissions,
  /** Whether GitHub Actions can approve pull requests. Enabling this can be a security risk. */
    can_approve_pull_request_reviews: ActionsCanApprovePullRequestReviews,
}

    export interface ActionsSetDefaultWorkflowPermissions {
  /** The default workflow permissions granted to the GITHUB_TOKEN when running workflows. */
    default_workflow_permissions?: ActionsDefaultWorkflowPermissions,
  /** Whether GitHub Actions can approve pull requests. Enabling this can be a security risk. */
    can_approve_pull_request_reviews?: ActionsCanApprovePullRequestReviews,
}

    export interface RunnerGroupsEnterprise {
    id: number,
    name: string,
    visibility: string,
    default: boolean,
    selected_organizations_url?: string,
    runners_url: string,
    allows_public_repositories: boolean,
  /**
   * If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.
   * @default false
   */
    workflow_restrictions_read_only?: boolean,
  /**
   * If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
   * @default false
   */
    restricted_to_workflows?: boolean,
  /** List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
    selected_workflows?: (string)[],
}

  /**
 * Self hosted runner label
 * A label for a self hosted runner
 */
  export interface RunnerLabel {
  /** Unique identifier of the label. */
    id?: number,
  /** Name of the label. */
    name: string,
  /** The type of label. Read-only labels are applied automatically when the runner is configured. */
    type?: "read-only" | "custom",
}

  /**
 * Self hosted runners
 * A self hosted runner
 */
  export interface Runner {
  /** The ID of the runner. */
    id: number,
  /** The ID of the runner group. */
    runner_group_id?: number,
  /** The name of the runner. */
    name: string,
  /** The Operating System of the runner. */
    os: string,
  /** The status of the runner. */
    status: string,
    busy: boolean,
    labels: (RunnerLabel)[],
    ephemeral?: boolean,
}

  /**
 * Runner Application
 * Runner Application
 */
  export interface RunnerApplication {
    os: string,
    architecture: string,
    download_url: string,
    filename: string,
  /** A short lived bearer token used to download the runner, if needed. */
    temp_download_token?: string,
    "sha256_checksum"?: string,
}

  /**
 * Authentication Token
 * Authentication Token
 */
  export interface AuthenticationToken {
  /** The token used for authentication */
    token: string,
  /**
   * The time this token expires
   * @format date-time
   */
    expires_at: string,
    permissions?: object,
  /** The repositories this token has access to */
    repositories?: (Repository)[],
    single_file?: string | null,
  /** Describe whether all repositories have been selected or there's a selection involved */
    repository_selection?: "all" | "selected",
}

    export interface AuditLogEvent {
  /** The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). */
    "@timestamp"?: number,
  /** The name of the action that was performed, for example `user.login` or `repo.create`. */
    action?: string,
    active?: boolean,
    active_was?: boolean,
  /** The actor who performed the action. */
    actor?: string,
  /** The id of the actor who performed the action. */
    actor_id?: number,
    actor_location?: {
    country_name?: string,

},
    data?: Record<string,any>,
    org_id?: number,
    user_id?: number,
    business_id?: number,
  /** The username of the account being blocked. */
    blocked_user?: string,
    business?: string,
    config?: (object)[],
    config_was?: (object)[],
    content_type?: string,
    operation_type?: string,
  /** The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). */
    created_at?: number,
    deploy_key_fingerprint?: string,
  /** A unique identifier for an audit event. */
    _document_id?: string,
    emoji?: string,
    events?: (object)[],
    events_were?: (object)[],
    explanation?: string,
    fingerprint?: string,
    hook_id?: number,
    limited_availability?: boolean,
    message?: string,
    name?: string,
    old_user?: string,
    openssh_public_key?: string,
    org?: string,
    previous_visibility?: string,
    read_only?: boolean,
  /** The name of the repository. */
    repo?: string,
  /** The name of the repository. */
    repository?: string,
    repository_public?: boolean,
    target_login?: string,
    team?: string,
  /** The type of protocol (for example, HTTP or SSH) used to transfer Git data. */
    transport_protocol?: number,
  /** A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data. */
    transport_protocol_name?: string,
  /** The user that was affected by the action performed (if available). */
    user?: string,
  /** The repository visibility, for example `public` or `private`. */
    visibility?: string,
}

  /**
 * stream-key
 * Audit Log Streaming Public Key
 */
  export interface AuditLogStreamKey {
    key_id: string,
    key: string,
}

  /**
 * List audit log streaming configurations
 * Lists the audit log streaming configurations for an enterprise.
 */
  export type GetAuditLogStreamConfigs = ({
    id?: number,
    stream_type?: string,
    stream_details?: string,
    enabled?: boolean,
  /** @format date-time */
    created_at?: string,
  /** @format date-time */
    updated_at?: string,
  /** @format date-time */
    paused_at?: string | null,

})[]

  /**
 * AzureBlobConfig
 * Azure Blob Config for audit log streaming configuration.
 */
  export interface AzureBlobConfig {
  /** Key ID obtained from the audit log stream key endpoint used to encrypt secrets. */
    key_id: string,
    encrypted_sas_url: string,
}

  /**
 * AzureHubConfig
 * Azure Event Hubs Config for audit log streaming configuration.
 */
  export interface AzureHubConfig {
  /** Instance name of Azure Event Hubs */
    name: string,
  /** Encrypted Connection String for Azure Event Hubs */
    encrypted_connstring: string,
  /** Key ID obtained from the audit log stream key endpoint used to encrypt secrets. */
    key_id: string,
}

  /**
 * AmazonS3OIDCConfig
 * Amazon S3 OIDC Config for audit log streaming configuration.
 */
  export interface AmazonS3OidcConfig {
  /** Amazon S3 Bucket Name. */
    bucket: string,
  /** AWS S3 Bucket Region. */
    region: string,
  /** Key ID obtained from the audit log stream key endpoint used to encrypt secrets. */
    key_id: string,
  /** Authentication Type for Amazon S3. */
    authentication_type: "oidc",
    arn_role: string,
}

  /**
 * AmazonS3AccessKeysConfig
 * Amazon S3 Access Keys Config for audit log streaming configuration.
 */
  export interface AmazonS3AccessKeysConfig {
  /** Amazon S3 Bucket Name. */
    bucket: string,
  /** Amazon S3 Bucket Name. */
    region: string,
  /** Key ID obtained from the audit log stream key endpoint used to encrypt secrets. */
    key_id: string,
  /** Authentication Type for Amazon S3. */
    authentication_type: "access_keys",
  /** Encrypted AWS Secret Key. */
    encrypted_secret_key: string,
  /** Encrypted AWS Access Key ID. */
    encrypted_access_key_id: string,
}

  /**
 * SplunkConfig
 * Splunk Config for Audit Log Stream Configuration
 */
  export interface SplunkConfig {
  /** Domain of Splunk instance. */
    domain: string,
  /** The port number for connecting to Splunk. */
    port: number,
  /** Key ID obtained from the audit log stream key endpoint used to encrypt secrets. */
    key_id: string,
  /** Encrypted Token. */
    encrypted_token: string,
  /** SSL verification helps ensure your events are sent to your Splunk endpoint securely. */
    ssl_verify: boolean,
}

  /**
 * HecConfig
 * Hec Config for Audit Log Stream Configuration
 */
  export interface HecConfig {
  /** Domain of Hec instance. */
    domain: string,
  /** The port number for connecting to HEC. */
    port: number,
  /** Key ID obtained from the audit log stream key endpoint used to encrypt secrets. */
    key_id: string,
  /** Encrypted Token. */
    encrypted_token: string,
  /** Path to send events to. */
    path: string,
  /** SSL verification helps ensure your events are sent to your HEC endpoint securely. */
    ssl_verify: boolean,
}

  /**
 * GoogleCloudConfig
 * Google Cloud Config for audit log streaming configuration.
 */
  export interface GoogleCloudConfig {
  /** Google Cloud Bucket Name */
    bucket: string,
  /** Key ID obtained from the audit log stream key endpoint used to encrypt secrets. */
    key_id: string,
    encrypted_json_credentials: string,
}

  /**
 * DatadogConfig
 * Datadog Config for audit log streaming configuration.
 */
  export interface DatadogConfig {
  /** Encrypted Splunk token. */
    encrypted_token: string,
  /** Datadog Site to use. */
    site: "US" | "US3" | "US5" | "EU1" | "US1-FED" | "AP1",
  /** Key ID obtained from the audit log stream key endpoint used to encrypt secrets. */
    key_id: string,
}

  /**
 * Get an audit log streaming configuration
 * Get an audit log streaming configuration for an enterprise.
 */
  export interface GetAuditLogStreamConfig {
    id: number,
    stream_type: string,
    stream_details: string,
    enabled: boolean,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** @format date-time */
    paused_at?: string | null,
}

  /** The name of the tool used to generate the code scanning analysis. */
  export type CodeScanningAnalysisToolName = string

  /** The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
  export type CodeScanningAnalysisToolGuid = string | null

  /** The security alert number. */
  export type AlertNumber = number

  /**
 * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
  export type AlertCreatedAt = string

  /**
 * The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
  export type AlertUpdatedAt = string

  /**
 * The REST API URL of the alert resource.
 * @format uri
 */
  export type AlertUrl = string

  /**
 * The GitHub URL of the alert resource.
 * @format uri
 */
  export type AlertHtmlUrl = string

  /**
 * The REST API URL for fetching the list of instances for an alert.
 * @format uri
 */
  export type AlertInstancesUrl = string

  /**
 * The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
  export type AlertFixedAt = string | null

  /**
 * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
  export type AlertDismissedAt = string | null

  /**
 * The dismissal comment associated with the dismissal of the alert.
 * @maxLength 280
 */
  export type CodeScanningAlertDismissedComment = string | null

    export interface CodeScanningAlertRuleSummary {
  /** A unique identifier for the rule used to detect the alert. */
    id?: string | null,
  /** The name of the rule used to detect the alert. */
    name?: string,
  /** The severity of the alert. */
    severity?: "none" | "note" | "warning" | "error",
  /** The security severity of the alert. */
    security_severity_level?: "low" | "medium" | "high" | "critical",
  /** A short description of the rule used to detect the alert. */
    description?: string,
  /** A description of the rule used to detect the alert. */
    full_description?: string,
  /** A set of tags applicable for the rule. */
    tags?: (any)[] | null,
  /** Detailed documentation for the rule as GitHub Flavored Markdown. */
    help?: string | null,
  /** A link to the documentation for the rule used to detect the alert. */
    help_uri?: string | null,
}

  /** The version of the tool used to generate the code scanning analysis. */
  export type CodeScanningAnalysisToolVersion = string | null

    export interface CodeScanningAnalysisTool {
  /** The name of the tool used to generate the code scanning analysis. */
    name?: CodeScanningAnalysisToolName,
  /** The version of the tool used to generate the code scanning analysis. */
    version?: CodeScanningAnalysisToolVersion,
  /** The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
    guid?: CodeScanningAnalysisToolGuid,
}

  /**
 * The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,
 * `refs/heads/<branch name>` or simply `<branch name>`.
 */
  export type CodeScanningRef = string

  /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
  export type CodeScanningAnalysisAnalysisKey = string

  /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
  export type CodeScanningAlertEnvironment = string

  /** Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
  export type CodeScanningAnalysisCategory = string

  /** Describe a region within a file for the alert. */
  export interface CodeScanningAlertLocation {
    path?: string,
    start_line?: number,
    end_line?: number,
    start_column?: number,
    end_column?: number,
}

    export interface CodeScanningAlertInstance {
  /**
   * The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,
   * `refs/heads/<branch name>` or simply `<branch name>`.
   */
    ref?: CodeScanningRef,
  /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
    analysis_key?: CodeScanningAnalysisAnalysisKey,
  /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
    environment?: CodeScanningAlertEnvironment,
  /** Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
    category?: CodeScanningAnalysisCategory,
  /** State of a code scanning alert. */
    state?: CodeScanningAlertState,
    commit_sha?: string,
    message?: {
    text?: string,

},
  /** Describe a region within a file for the alert. */
    location?: CodeScanningAlertLocation,
    html_url?: string,
  /**
   * Classifications that have been applied to the file that triggered the alert.
   * For example identifying it as documentation, or a generated file.
   */
    classifications?: (CodeScanningAlertClassification)[],
}

  /**
 * Simple Repository
 * A GitHub repository.
 */
  export interface SimpleRepository {
  /**
   * A unique identifier of the repository.
   * @format int64
   */
    id: number,
  /** The GraphQL identifier of the repository. */
    node_id: string,
  /** The name of the repository. */
    name: string,
  /** The full, globally unique, name of the repository. */
    full_name: string,
  /** A GitHub user. */
    owner: SimpleUser,
  /** Whether the repository is private. */
    private: boolean,
  /**
   * The URL to view the repository on GitHub.com.
   * @format uri
   */
    html_url: string,
  /** The repository description. */
    description: string | null,
  /** Whether the repository is a fork. */
    fork: boolean,
  /**
   * The URL to get more information about the repository from the GitHub API.
   * @format uri
   */
    url: string,
  /** A template for the API URL to download the repository as an archive. */
    archive_url: string,
  /** A template for the API URL to list the available assignees for issues in the repository. */
    assignees_url: string,
  /** A template for the API URL to create or retrieve a raw Git blob in the repository. */
    blobs_url: string,
  /** A template for the API URL to get information about branches in the repository. */
    branches_url: string,
  /** A template for the API URL to get information about collaborators of the repository. */
    collaborators_url: string,
  /** A template for the API URL to get information about comments on the repository. */
    comments_url: string,
  /** A template for the API URL to get information about commits on the repository. */
    commits_url: string,
  /** A template for the API URL to compare two commits or refs. */
    compare_url: string,
  /** A template for the API URL to get the contents of the repository. */
    contents_url: string,
  /**
   * A template for the API URL to list the contributors to the repository.
   * @format uri
   */
    contributors_url: string,
  /**
   * The API URL to list the deployments of the repository.
   * @format uri
   */
    deployments_url: string,
  /**
   * The API URL to list the downloads on the repository.
   * @format uri
   */
    downloads_url: string,
  /**
   * The API URL to list the events of the repository.
   * @format uri
   */
    events_url: string,
  /**
   * The API URL to list the forks of the repository.
   * @format uri
   */
    forks_url: string,
  /** A template for the API URL to get information about Git commits of the repository. */
    git_commits_url: string,
  /** A template for the API URL to get information about Git refs of the repository. */
    git_refs_url: string,
  /** A template for the API URL to get information about Git tags of the repository. */
    git_tags_url: string,
  /** A template for the API URL to get information about issue comments on the repository. */
    issue_comment_url: string,
  /** A template for the API URL to get information about issue events on the repository. */
    issue_events_url: string,
  /** A template for the API URL to get information about issues on the repository. */
    issues_url: string,
  /** A template for the API URL to get information about deploy keys on the repository. */
    keys_url: string,
  /** A template for the API URL to get information about labels of the repository. */
    labels_url: string,
  /**
   * The API URL to get information about the languages of the repository.
   * @format uri
   */
    languages_url: string,
  /**
   * The API URL to merge branches in the repository.
   * @format uri
   */
    merges_url: string,
  /** A template for the API URL to get information about milestones of the repository. */
    milestones_url: string,
  /** A template for the API URL to get information about notifications on the repository. */
    notifications_url: string,
  /** A template for the API URL to get information about pull requests on the repository. */
    pulls_url: string,
  /** A template for the API URL to get information about releases on the repository. */
    releases_url: string,
  /**
   * The API URL to list the stargazers on the repository.
   * @format uri
   */
    stargazers_url: string,
  /** A template for the API URL to get information about statuses of a commit. */
    statuses_url: string,
  /**
   * The API URL to list the subscribers on the repository.
   * @format uri
   */
    subscribers_url: string,
  /**
   * The API URL to subscribe to notifications for this repository.
   * @format uri
   */
    subscription_url: string,
  /**
   * The API URL to get information about tags on the repository.
   * @format uri
   */
    tags_url: string,
  /**
   * The API URL to list the teams on the repository.
   * @format uri
   */
    teams_url: string,
  /** A template for the API URL to create or retrieve a raw Git tree of the repository. */
    trees_url: string,
  /**
   * The API URL to list the hooks on the repository.
   * @format uri
   */
    hooks_url: string,
}

    export interface CodeScanningOrganizationAlertItems {
  /** The security alert number. */
    number: AlertNumber,
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    created_at: AlertCreatedAt,
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    updated_at?: AlertUpdatedAt,
  /** The REST API URL of the alert resource. */
    url: AlertUrl,
  /** The GitHub URL of the alert resource. */
    html_url: AlertHtmlUrl,
  /** The REST API URL for fetching the list of instances for an alert. */
    instances_url: AlertInstancesUrl,
  /** State of a code scanning alert. */
    state: CodeScanningAlertState,
  /** The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: AlertFixedAt,
    dismissed_by: (null | SimpleUser),
  /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    dismissed_at: AlertDismissedAt,
  /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */
    dismissed_reason: CodeScanningAlertDismissedReason,
  /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment,
    rule: CodeScanningAlertRuleSummary,
    tool: CodeScanningAnalysisTool,
    most_recent_instance: CodeScanningAlertInstance,
  /** A GitHub repository. */
    repository: SimpleRepository,
    dismissal_approved_by?: (null | SimpleUser),
}

  /** A code security configuration */
  export interface CodeSecurityConfiguration {
  /** The ID of the code security configuration */
    id?: number,
  /** The name of the code security configuration. Must be unique within the organization. */
    name?: string,
  /** The type of the code security configuration. */
    target_type?: "global" | "organization" | "enterprise",
  /** A description of the code security configuration */
    description?: string,
  /** The enablement status of GitHub Advanced Security */
    advanced_security?: "enabled" | "disabled" | "code_security" | "secret_protection",
  /** The enablement status of Dependency Graph */
    dependency_graph?: "enabled" | "disabled" | "not_set",
  /** The enablement status of Dependabot alerts */
    dependabot_alerts?: "enabled" | "disabled" | "not_set",
  /** The enablement status of Dependabot security updates */
    dependabot_security_updates?: "enabled" | "disabled" | "not_set",
  /** The enablement status of code scanning default setup */
    code_scanning_default_setup?: "enabled" | "disabled" | "not_set",
  /** Feature options for code scanning default setup */
    code_scanning_default_setup_options?: {
  /** Whether to use labeled runners or standard GitHub runners. */
    runner_type?: "standard" | "labeled" | "not_set",
  /** The label of the runner to use for code scanning when runner_type is 'labeled'. */
    runner_label?: string | null,

},
  /** The enablement status of code scanning delegated alert dismissal */
    code_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set",
  /** The enablement status of secret scanning */
    secret_scanning?: "enabled" | "disabled" | "not_set",
  /** The enablement status of secret scanning push protection */
    secret_scanning_push_protection?: "enabled" | "disabled" | "not_set",
  /** The enablement status of secret scanning delegated bypass */
    secret_scanning_delegated_bypass?: "enabled" | "disabled" | "not_set",
  /** Feature options for secret scanning delegated bypass */
    secret_scanning_delegated_bypass_options?: {
  /** The bypass reviewers for secret scanning delegated bypass */
    reviewers?: ({
  /** The ID of the team or role selected as a bypass reviewer */
    reviewer_id: number,
  /** The type of the bypass reviewer */
    reviewer_type: "TEAM" | "ROLE",

})[],

},
  /** The enablement status of secret scanning validity checks */
    secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set",
  /** The enablement status of secret scanning non-provider patterns */
    secret_scanning_non_provider_patterns?: "enabled" | "disabled" | "not_set",
  /** The enablement status of secret scanning delegated alert dismissal */
    secret_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set",
  /** The enforcement status for a security configuration */
    enforcement?: "enforced" | "unenforced",
  /**
   * The URL of the configuration
   * @format uri
   */
    url?: string,
  /**
   * The URL of the configuration
   * @format uri
   */
    html_url?: string,
  /** @format date-time */
    created_at?: string,
  /** @format date-time */
    updated_at?: string,
}

  /** Feature options for code scanning default setup */
  export interface CodeScanningDefaultSetupOptions {
  /** Whether to use labeled runners or standard GitHub runners. */
    runner_type?: "standard" | "labeled" | "not_set",
  /** The label of the runner to use for code scanning default setup when runner_type is 'labeled'. */
    runner_label?: string | null,
}

  /** A list of default code security configurations */
  export type CodeSecurityDefaultConfigurations = ({
  /** The visibility of newly created repositories for which the code security configuration will be applied to by default */
    default_for_new_repos?: "public" | "private_and_internal" | "all",
  /** A code security configuration */
    configuration?: CodeSecurityConfiguration,

})[]

  /** Repositories associated with a code security configuration and attachment status */
  export interface CodeSecurityConfigurationRepositories {
  /** The attachment status of the code security configuration on the repository. */
    status?: "attached" | "attaching" | "detached" | "removed" | "enforced" | "failed" | "updating" | "removed_by_enterprise",
  /** A GitHub repository. */
    repository?: SimpleRepository,
}

  /** Enterprise Security Analysis Settings */
  export interface EnterpriseSecurityAnalysisSettings {
  /**
   * Whether GitHub advanced security is automatically enabled for new repositories and repositories transferred to
   * this enterprise.
   */
    advanced_security_enabled_for_new_repositories: boolean,
  /** Whether GitHub Advanced Security is automatically enabled for new user namespace repositories. */
    advanced_security_enabled_for_new_user_namespace_repositories?: boolean,
  /**
   * Whether Dependabot alerts are automatically enabled for new repositories and repositories transferred to this
   * enterprise.
   */
    dependabot_alerts_enabled_for_new_repositories: boolean,
  /**
   * Whether secret scanning is automatically enabled for new repositories and repositories transferred to this
   * enterprise.
   */
    secret_scanning_enabled_for_new_repositories: boolean,
  /**
   * Whether secret scanning push protection is automatically enabled for new repositories and repositories
   * transferred to this enterprise.
   */
    secret_scanning_push_protection_enabled_for_new_repositories: boolean,
  /** An optional URL string to display to contributors who are blocked from pushing a secret. */
    secret_scanning_push_protection_custom_link?: string | null,
  /** Whether secret scanning of non-provider patterns is enabled for new repositories under this enterprise. */
    secret_scanning_non_provider_patterns_enabled_for_new_repositories?: boolean,
}

  /** Details for the vulnerable package. */
  export interface DependabotAlertPackage {
  /** The package's language or package management ecosystem. */
    ecosystem: string,
  /** The unique package name within its ecosystem. */
    name: string,
}

  /** Details pertaining to one vulnerable version range for the advisory. */
  export interface DependabotAlertSecurityVulnerability {
  /** Details for the vulnerable package. */
    package: DependabotAlertPackage,
  /** The severity of the vulnerability. */
    severity: "low" | "medium" | "high" | "critical",
  /** Conditions that identify vulnerable versions of this vulnerability's package. */
    vulnerable_version_range: string,
  /** Details pertaining to the package version that patches this vulnerability. */
    first_patched_version: {
  /** The package version that patches this vulnerability. */
    identifier: string,

},
}

  /** Details for the GitHub Security Advisory. */
  export interface DependabotAlertSecurityAdvisory {
  /** The unique GitHub Security Advisory ID assigned to the advisory. */
    ghsa_id: string,
  /** The unique CVE ID assigned to the advisory. */
    cve_id: string | null,
  /**
   * A short, plain text summary of the advisory.
   * @maxLength 1024
   */
    summary: string,
  /** A long-form Markdown-supported description of the advisory. */
    description: string,
  /** Vulnerable version range information for the advisory. */
    vulnerabilities: (DependabotAlertSecurityVulnerability)[],
  /** The severity of the advisory. */
    severity: "low" | "medium" | "high" | "critical",
  /** Details for the advisory pertaining to the Common Vulnerability Scoring System. */
    cvss: {
  /**
   * The overall CVSS score of the advisory.
   * @min 0
   * @max 10
   */
    score: number,
  /** The full CVSS vector string for the advisory. */
    vector_string: string | null,

},
    cvss_severities?: CvssSeverities,
  /** The EPSS scores as calculated by the [Exploit Prediction Scoring System](https://www.first.org/epss). */
    epss?: SecurityAdvisoryEpss,
  /** Details for the advisory pertaining to Common Weakness Enumeration. */
    cwes: ({
  /** The unique CWE ID. */
    cwe_id: string,
  /** The short, plain text name of the CWE. */
    name: string,

})[],
  /** Values that identify this advisory among security information sources. */
    identifiers: ({
  /** The type of advisory identifier. */
    type: "CVE" | "GHSA",
  /** The value of the advisory identifer. */
    value: string,

})[],
  /** Links to additional advisory information. */
    references: ({
  /**
   * The URL of the reference.
   * @format uri
   */
    url: string,

})[],
  /**
   * The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    published_at: string,
  /**
   * The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    updated_at: string,
  /**
   * The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    withdrawn_at: string | null,
}

  /**
 * The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
  export type AlertAutoDismissedAt = string | null

  /** A Dependabot alert. */
  export interface DependabotAlertWithRepository {
  /** The security alert number. */
    number: AlertNumber,
  /** The state of the Dependabot alert. */
    state: "auto_dismissed" | "dismissed" | "fixed" | "open",
  /** Details for the vulnerable dependency. */
    dependency: {
  /** Details for the vulnerable package. */
    package?: DependabotAlertPackage,
  /** The full path to the dependency manifest file, relative to the root of the repository. */
    manifest_path?: string,
  /** The execution scope of the vulnerable dependency. */
    scope?: "development" | "runtime",

},
  /** Details for the GitHub Security Advisory. */
    security_advisory: DependabotAlertSecurityAdvisory,
  /** Details pertaining to one vulnerable version range for the advisory. */
    security_vulnerability: DependabotAlertSecurityVulnerability,
  /** The REST API URL of the alert resource. */
    url: AlertUrl,
  /** The GitHub URL of the alert resource. */
    html_url: AlertHtmlUrl,
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    created_at: AlertCreatedAt,
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    updated_at: AlertUpdatedAt,
  /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    dismissed_at: AlertDismissedAt,
    dismissed_by: (null | SimpleUser),
  /** The reason that the alert was dismissed. */
    dismissed_reason: "fix_started" | "inaccurate" | "no_bandwidth" | "not_used" | "tolerable_risk",
  /**
   * An optional comment associated with the alert's dismissal.
   * @maxLength 280
   */
    dismissed_comment: string | null,
  /** The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at: AlertFixedAt,
  /** The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    auto_dismissed_at?: AlertAutoDismissedAt,
  /** A GitHub repository. */
    repository: SimpleRepository,
}

    export interface OrganizationSecretScanningAlert {
  /** The security alert number. */
    number?: AlertNumber,
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    created_at?: AlertCreatedAt,
    updated_at?: (null | AlertUpdatedAt),
  /** The REST API URL of the alert resource. */
    url?: AlertUrl,
  /** The GitHub URL of the alert resource. */
    html_url?: AlertHtmlUrl,
  /**
   * The REST API URL of the code locations for this alert.
   * @format uri
   */
    locations_url?: string,
  /** Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`. */
    state?: SecretScanningAlertState,
  /** **Required when the `state` is `resolved`.** The reason for resolving the alert. */
    resolution?: SecretScanningAlertResolution,
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    resolved_at?: string | null,
    resolved_by?: (null | SimpleUser),
  /** The type of secret that secret scanning detected. */
    secret_type?: string,
  /**
   * User-friendly name for the detected secret, matching the `secret_type`.
   * For a list of built-in patterns, see "[Supported secret scanning patterns](https://docs.github.com/enterprise-server@3.17/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
   */
    secret_type_display_name?: string,
  /** The secret that was detected. */
    secret?: string,
  /** A GitHub repository. */
    repository?: SimpleRepository,
  /** Whether push protection was bypassed for the detected secret. */
    push_protection_bypassed?: boolean | null,
    push_protection_bypassed_by?: (null | SimpleUser),
  /**
   * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    push_protection_bypassed_at?: string | null,
    push_protection_bypass_request_reviewer?: (null | SimpleUser),
  /** An optional comment when reviewing a push protection bypass. */
    push_protection_bypass_request_reviewer_comment?: string | null,
  /** An optional comment when requesting a push protection bypass. */
    push_protection_bypass_request_comment?: string | null,
  /**
   * The URL to a push protection bypass request.
   * @format uri
   */
    push_protection_bypass_request_html_url?: string | null,
  /** The comment that was optionally added when this alert was closed */
    resolution_comment?: string | null,
  /** The token status as of the latest validity check. */
    validity?: "active" | "inactive" | "unknown",
  /** Whether the detected secret was found in multiple repositories in the same organization or enterprise. */
    multi_repo?: boolean | null,
  /** A boolean value representing whether or not alert is base64 encoded */
    "is_base64_encoded"?: boolean | null,
}

    export interface AdvancedSecurityActiveCommittersUser {
    user_login: string,
    last_pushed_date: string,
    last_pushed_email: string,
}

    export interface AdvancedSecurityActiveCommittersRepository {
    name: string,
    advanced_security_committers: number,
    advanced_security_committers_breakdown: (AdvancedSecurityActiveCommittersUser)[],
}

    export interface AdvancedSecurityActiveCommitters {
    total_advanced_security_committers?: number,
    total_count?: number,
  /** The total number of GitHub Advanced Security licences required if all repositories were to enable GitHub Advanced Security */
    maximum_advanced_security_committers?: number,
  /** The total number of GitHub Advanced Security licences purchased */
    purchased_advanced_security_committers?: number,
    repositories: (AdvancedSecurityActiveCommittersRepository)[],
}

  /**
 * Actor
 * Actor
 */
  export interface Actor {
    id: number,
    login: string,
    display_login?: string,
    gravatar_id: string | null,
  /** @format uri */
    url: string,
  /** @format uri */
    avatar_url: string,
}

  /**
 * Milestone
 * A collection of related issues and pull requests.
 */
  export interface Milestone {
  /** @format uri */
    url: string,
  /** @format uri */
    html_url: string,
  /** @format uri */
    labels_url: string,
    id: number,
    node_id: string,
  /** The number of the milestone. */
    number: number,
  /**
   * The state of the milestone.
   * @default "open"
   */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
    description: string | null,
    creator: (null | SimpleUser),
    open_issues: number,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** @format date-time */
    closed_at: string | null,
  /** @format date-time */
    due_on: string | null,
}

  /**
 * Issue Type
 * The type of issue.
 */
  export interface IssueType {
  /** The unique identifier of the issue type. */
    id: number,
  /** The node identifier of the issue type. */
    node_id: string,
  /** The name of the issue type. */
    name: string,
  /** The description of the issue type. */
    description: string | null,
  /** The color of the issue type. */
    color?: "gray" | "blue" | "green" | "yellow" | "orange" | "red" | "pink" | "purple",
  /**
   * The time the issue type created.
   * @format date-time
   */
    created_at?: string,
  /**
   * The time the issue type last updated.
   * @format date-time
   */
    updated_at?: string,
  /** The enabled state of the issue type. */
    is_enabled?: boolean,
}

  /** Reaction Rollup */
  export interface ReactionRollup {
  /** @format uri */
    url: string,
    total_count: number,
    "+1": number,
    "-1": number,
    laugh: number,
    confused: number,
    heart: number,
    hooray: number,
    eyes: number,
    rocket: number,
}

  /** Sub-issues Summary */
  export interface SubIssuesSummary {
    total: number,
    completed: number,
    percent_completed: number,
}

  /**
 * Issue
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
  export interface Issue {
  /** @format int64 */
    id: number,
    node_id: string,
  /**
   * URL for the issue
   * @format uri
   */
    url: string,
  /** @format uri */
    repository_url: string,
    labels_url: string,
  /** @format uri */
    comments_url: string,
  /** @format uri */
    events_url: string,
  /** @format uri */
    html_url: string,
  /** Number uniquely identifying the issue within its repository */
    number: number,
  /** State of the issue; either 'open' or 'closed' */
    state: string,
  /** The reason for the current state */
    state_reason?: "completed" | "reopened" | "not_planned" | "duplicate",
  /** Title of the issue */
    title: string,
  /** Contents of the issue */
    body?: string | null,
    user: (null | SimpleUser),
  /** Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository */
    labels: ((string | {
  /** @format int64 */
    id?: number,
    node_id?: string,
  /** @format uri */
    url?: string,
    name?: string,
    description?: string | null,
    color?: string | null,
    default?: boolean,

}))[],
    assignee: (null | SimpleUser),
    assignees?: (any)[] | null,
    milestone: (null | Milestone),
    locked: boolean,
    active_lock_reason?: string | null,
    comments: number,
    pull_request?: {
  /** @format date-time */
    merged_at?: string | null,
  /** @format uri */
    diff_url: string | null,
  /** @format uri */
    html_url: string | null,
  /** @format uri */
    patch_url: string | null,
  /** @format uri */
    url: string | null,

},
  /** @format date-time */
    closed_at: string | null,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
    draft?: boolean,
    closed_by?: (null | SimpleUser),
    body_html?: string,
    body_text?: string,
  /** @format uri */
    timeline_url?: string,
  /** The type of issue. */
    type?: IssueType,
  /** A repository on GitHub. */
    repository?: Repository,
    performed_via_github_app?: (null | Integration),
  /** How the author is associated with the repository. */
    author_association: AuthorAssociation,
    reactions?: ReactionRollup,
    sub_issues_summary?: SubIssuesSummary,
}

  /**
 * Issue Comment
 * Comments provide a way for people to collaborate on an issue.
 */
  export interface IssueComment {
  /**
   * Unique identifier of the issue comment
   * @format int64
   */
    id: number,
    node_id: string,
  /**
   * URL for the issue comment
   * @format uri
   */
    url: string,
  /** Contents of the issue comment */
    body?: string,
    body_text?: string,
    body_html?: string,
  /** @format uri */
    html_url: string,
    user: (null | SimpleUser),
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    issue_url: string,
  /** How the author is associated with the repository. */
    author_association: AuthorAssociation,
    performed_via_github_app?: (null | Integration),
    reactions?: ReactionRollup,
}

  /**
 * Event
 * Event
 */
  export interface Event {
    id: string,
    type: string | null,
  /** Actor */
    actor: Actor,
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
  /** Actor */
    org?: Actor,
    payload: {
    action?: string,
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
    issue?: Issue,
  /** Comments provide a way for people to collaborate on an issue. */
    comment?: IssueComment,
    pages?: ({
    page_name?: string,
    title?: string,
    summary?: string | null,
    action?: string,
    sha?: string,
    html_url?: string,

})[],

},
    public: boolean,
  /** @format date-time */
    created_at: string | null,
}

  /**
 * Link With Type
 * Hypermedia Link with Type
 */
  export interface LinkWithType {
    href: string,
    type: string,
}

  /**
 * Feed
 * Feed
 */
  export interface Feed {
    timeline_url: string,
    user_url: string,
    current_user_public_url?: string,
    current_user_url?: string,
    current_user_actor_url?: string,
    current_user_organization_url?: string,
    current_user_organization_urls?: (string)[],
    security_advisories_url?: string,
  /** A feed of discussions for a given repository. */
    repository_discussions_url?: string,
  /** A feed of discussions for a given repository and category. */
    repository_discussions_category_url?: string,
    _links: {
  /** Hypermedia Link with Type */
    timeline: LinkWithType,
  /** Hypermedia Link with Type */
    user: LinkWithType,
  /** Hypermedia Link with Type */
    security_advisories?: LinkWithType,
  /** Hypermedia Link with Type */
    current_user?: LinkWithType,
  /** Hypermedia Link with Type */
    current_user_public?: LinkWithType,
  /** Hypermedia Link with Type */
    current_user_actor?: LinkWithType,
  /** Hypermedia Link with Type */
    current_user_organization?: LinkWithType,
    current_user_organizations?: (LinkWithType)[],
  /** Hypermedia Link with Type */
    repository_discussions?: LinkWithType,
  /** Hypermedia Link with Type */
    repository_discussions_category?: LinkWithType,

},
}

  /**
 * Base Gist
 * Base Gist
 */
  export interface BaseGist {
  /** @format uri */
    url: string,
  /** @format uri */
    forks_url: string,
  /** @format uri */
    commits_url: string,
    id: string,
    node_id: string,
  /** @format uri */
    git_pull_url: string,
  /** @format uri */
    git_push_url: string,
  /** @format uri */
    html_url: string,
    files: Record<string,{
    filename?: string,
    type?: string,
    language?: string,
    raw_url?: string,
    size?: number,
  /**
   * The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
   * @default "utf-8"
   */
    encoding?: string,

}>,
    public: boolean,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
    description: string | null,
    comments: number,
    comments_enabled?: boolean,
    user: (null | SimpleUser),
  /** @format uri */
    comments_url: string,
  /** A GitHub user. */
    owner?: SimpleUser,
    truncated?: boolean,
    forks?: (any)[],
    history?: (any)[],
}

  /**
 * Public User
 * Public User
 */
  export interface PublicUser {
    login: string,
  /** @format int64 */
    id: number,
    user_view_type?: string,
    node_id: string,
  /** @format uri */
    avatar_url: string,
    gravatar_id: string | null,
  /** @format uri */
    url: string,
  /** @format uri */
    html_url: string,
  /** @format uri */
    followers_url: string,
    following_url: string,
    gists_url: string,
    starred_url: string,
  /** @format uri */
    subscriptions_url: string,
  /** @format uri */
    organizations_url: string,
  /** @format uri */
    repos_url: string,
    events_url: string,
  /** @format uri */
    received_events_url: string,
    type: string,
    site_admin: boolean,
    name: string | null,
    company: string | null,
    blog: string | null,
    location: string | null,
  /** @format email */
    email: string | null,
  /** @format email */
    notification_email?: string | null,
    hireable: boolean | null,
    bio: string | null,
    twitter_username?: string | null,
    public_repos: number,
    public_gists: number,
    followers: number,
    following: number,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
    plan?: {
    collaborators: number,
    name: string,
    space: number,
    private_repos: number,

},
    private_gists?: number,
    total_private_repos?: number,
    owned_private_repos?: number,
    disk_usage?: number,
    collaborators?: number,
}

  /**
 * Gist History
 * Gist History
 */
  export interface GistHistory {
    user?: (null | SimpleUser),
    version?: string,
  /** @format date-time */
    committed_at?: string,
    change_status?: {
    total?: number,
    additions?: number,
    deletions?: number,

},
  /** @format uri */
    url?: string,
}

  /**
 * Gist Simple
 * Gist Simple
 */
  export interface GistSimple {
  /** @deprecated */
    forks?: (any)[] | null,
  /** @deprecated */
    history?: (any)[] | null,
  /**
   * Gist
   * Gist
   */
    fork_of?: {
  /** @format uri */
    url: string,
  /** @format uri */
    forks_url: string,
  /** @format uri */
    commits_url: string,
    id: string,
    node_id: string,
  /** @format uri */
    git_pull_url: string,
  /** @format uri */
    git_push_url: string,
  /** @format uri */
    html_url: string,
    files: Record<string,{
    filename?: string,
    type?: string,
    language?: string,
    raw_url?: string,
    size?: number,

}>,
    public: boolean,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
    description: string | null,
    comments: number,
    comments_enabled?: boolean,
    user: (null | SimpleUser),
  /** @format uri */
    comments_url: string,
    owner?: (null | SimpleUser),
    truncated?: boolean,
    forks?: (any)[],
    history?: (any)[],

},
    url?: string,
    forks_url?: string,
    commits_url?: string,
    id?: string,
    node_id?: string,
    git_pull_url?: string,
    git_push_url?: string,
    html_url?: string,
    files?: Record<string,{
    filename?: string,
    type?: string,
    language?: string,
    raw_url?: string,
    size?: number,
    truncated?: boolean,
    content?: string,
  /**
   * The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
   * @default "utf-8"
   */
    encoding?: string,

}>,
    public?: boolean,
    created_at?: string,
    updated_at?: string,
    description?: string | null,
    comments?: number,
    comments_enabled?: boolean,
    user?: string | null,
    comments_url?: string,
  /** A GitHub user. */
    owner?: SimpleUser,
    truncated?: boolean,
}

  /**
 * Gist Comment
 * A comment made to a gist.
 */
  export interface GistComment {
    id: number,
    node_id: string,
  /** @format uri */
    url: string,
  /**
   * The comment text.
   * @maxLength 65535
   */
    body: string,
    user: (null | SimpleUser),
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** How the author is associated with the repository. */
    author_association: AuthorAssociation,
}

  /**
 * Gist Commit
 * Gist Commit
 */
  export interface GistCommit {
  /** @format uri */
    url: string,
    version: string,
    user: (null | SimpleUser),
    change_status: {
    total?: number,
    additions?: number,
    deletions?: number,

},
  /** @format date-time */
    committed_at: string,
}

  /**
 * Gitignore Template
 * Gitignore Template
 */
  export interface GitignoreTemplate {
    name: string,
    source: string,
}

  /**
 * License
 * License
 */
  export interface License {
    key: string,
    name: string,
    spdx_id: string | null,
  /** @format uri */
    url: string | null,
    node_id: string,
  /** @format uri */
    html_url: string,
    description: string,
    implementation: string,
    permissions: (string)[],
    conditions: (string)[],
    limitations: (string)[],
    body: string,
    featured: boolean,
}

    export type GhesGetSsh = ({
  /**
   * The full public key
   * @format ssh-key
   */
    key?: string,
  /**
   * The fingerprint of the key
   * @format ssh-key fingerprint
   */
    fingerprint?: string,

})[]

  /** Set SSH key */
  export interface GhesSetSshRequest {
  /** The public SSH key to add to the `authorized_keys` file. */
    key: string,
}

    export type GhesSetSshResponse = ({
  /**
   * Hostname of the node where the SSH key was added.
   * @format hostname
   */
    hostname?: string,
  /**
   * UUID of the SSH key that was added.
   * @format uuid
   */
    uuid?: string,
  /** Message indicating the result of the SSH key addition. */
    message?: string,
  /** Error message indicating the reason for the SSH key addition failure. This field is only present if the SSH key addition failed. */
    error?: string,
  /** Whether the SSH key was already present on the `authorized_keys` file. */
    modified?: boolean,

})[]

  /** Set SSH key */
  export interface GhesDeleteSshRequest {
  /** The public SSH key to remove from the `authorized_keys` file. */
    key: string,
}

    export type GhesDeleteSshResponse = ({
  /**
   * Hostname of the node where the SSH key was removed.
   * @format hostname
   */
    hostname?: string,
  /**
   * UUID of the SSH key that was removed.
   * @format uuid
   */
    uuid?: string,
  /** Message indicating the result of the SSH key removal. */
    message?: string,
  /** Error message indicating the reason for the SSH key removal failure. This field is only present if the SSH key removal failed. */
    error?: string,

})[]

    export interface GhesChecksSystemRequirements {
    status?: GhesChecksResultIndicator,
    nodes?: ({
    hostname?: string,
    status?: GhesChecksResultIndicator,
    roles_status?: ({
    status?: GhesChecksResultIndicator,
    role?: string,

})[],

})[],
}

    export interface GhesClusterStatus {
    status?: GhesClusterStatusIndicator,
    nodes?: ({
    hostname?: string,
    status?: GhesClusterStatusIndicator,
    services?: ({
    status?: GhesClusterStatusIndicator,
    name?: string,
    details?: string,

})[],

})[],
}

  /** Initialize configuration with license upload */
  export interface GhesConfigInitRequest {
  /** The content of your _.ghl_ license file. */
    license: string,
  /** The root site administrator password. */
    password: string,
}

    export interface GhesLicenseInfo {
  /** Whether the GitHub Advanced Security feature is enabled. */
    advancedSecurityEnabled?: boolean,
  /** If the GitHub Advanced Security feature is enabled, the seat count. */
    advancedSecuritySeats?: number,
  /** Whether the cluster support feature is enabled. */
    clusterSupport?: boolean,
  /** The company under which the license is issued. */
    company?: string,
  /** Whether the GitHub Connect feature is enabled. */
    croquetSupport?: boolean,
  /** Whether this license is issued under custom terms. */
    customTerms?: boolean,
  /** Wheter this license is issued as an evaluation license. */
    evaluation?: boolean,
  /**
   * The expiration date of the license.
   * @format date-time
   */
    expireAt?: string,
  /** Whether the insights feature is enabled. */
    insightsEnabled?: boolean,
  /**
   * If the insights feature is enabled, the expiration date.
   * @format date-time
   */
    insightsExpireAt?: string,
  /**
   * If the learning lab feature is enabled, the expiration date.
   * @format date-time
   */
    learningLabEvaluationExpires?: string,
  /** If the learning lab feature is enabled, the seat count. */
    learningLabSeats?: number,
  /** Whether the perpetual feature is enabled. */
    perpetual?: boolean,
  /** The unique reference number of the license. */
    referenceNumber?: string,
  /** If the license is issued with limited seating, the seat count. */
    seats?: number,
  /** Whether the SSH feature is enabled. */
    sshAllowed?: boolean,
  /** The support key of the license. */
    supportKey?: string,
  /** Whether the license is issued with unlimited seat count. */
    unlimitedSeating?: boolean,
}

  /** License upload form */
  export interface GhesUploadLicenseRequest {
  /** The content of your _.ghl_ license file. */
    license: string,
}

    export interface GhesLicenseCheck {
  /** The license status of the currently active enterprise license. */
    status?: "valid" | "invalid" | "expired" | "cluster mode not supported",
}

    export interface GhesConfigNodes {
    topology?: GhesClusterTopology,
    nodes?: ({
    hostname?: string,
    uuid?: string,
    replica?: boolean,
    cluster_roles?: (GhesClusterRoles)[],

})[],
}

    export interface GhesGetSettings {
    private_mode?: boolean,
    public_pages?: boolean,
    subdomain_isolation?: boolean,
    signup_enabled?: boolean,
    github_hostname?: string,
    identicons_host?: string,
    http_proxy?: string | null,
    auth_mode?: string,
    expire_sessions?: boolean,
    admin_password?: string | null,
    configuration_id?: number,
    configuration_run_count?: number,
    avatar?: {
    enabled?: boolean,
    uri?: string,

},
    customer?: {
    name?: string,
    email?: string,
    uuid?: string,
    secret_key_data?: string,
    public_key_data?: string,

},
    license?: {
    seats?: number,
    evaluation?: boolean,
    perpetual?: boolean,
    unlimited_seating?: boolean,
    support_key?: string,
    ssh_allowed?: boolean,
    cluster_support?: boolean,
    expire_at?: string,

},
    github_ssl?: {
    enabled?: boolean,
    cert?: string | null,
    key?: string | null,

},
    ldap?: {
    host?: string | null,
    port?: number,
    base?: (string)[],
    uid?: string | null,
    bind_dn?: string | null,
    password?: string | null,
    method?: string,
    search_strategy?: string,
    user_groups?: (string)[],
    admin_group?: string | null,
    virtual_attribute_enabled?: boolean,
    recursive_group_search?: boolean,
    posix_support?: boolean,
    user_sync_emails?: boolean,
    user_sync_keys?: boolean,
    user_sync_interval?: number,
    team_sync_interval?: number,
    sync_enabled?: boolean,
    reconciliation?: {
    user?: string | null,
    org?: string | null,

},
    profile?: {
    uid?: string,
    name?: string | null,
    mail?: string | null,
    key?: string | null,

},

},
    cas?: {
    url?: string | null,

},
    saml?: {
    sso_url?: string | null,
    certificate?: string | null,
    certificate_path?: string | null,
    issuer?: string | null,
    idp_initiated_sso?: boolean,
    disable_admin_demote?: boolean,

},
    github_oauth?: {
    client_id?: string,
    client_secret?: string,
    organization_name?: string,
    organization_team?: string,

},
    smtp?: {
    enabled?: boolean,
    address?: string,
    authentication?: string,
    port?: string,
    domain?: string,
    username?: string,
    user_name?: string,
    enable_starttls_auto?: boolean,
    password?: string,
    "discard-to-noreply-address"?: boolean,
    support_address?: string,
    support_address_type?: string,
    noreply_address?: string,

},
    ntp?: {
    primary_server?: string,
    secondary_server?: string,

},
    timezone?: string | null,
    snmp?: {
    enabled?: boolean,
    community?: string,

},
    syslog?: {
    enabled?: boolean,
    server?: string | null,
    protocol_name?: string,

},
    assets?: string | null,
    pages?: {
    enabled?: boolean,

},
    collectd?: {
    enabled?: boolean,
    server?: string | null,
    port?: number,
    encryption?: string | null,
    username?: string | null,
    password?: string | null,

},
    mapping?: {
    enabled?: boolean,
    tileserver?: string | null,
    basemap?: string,
    token?: string | null,

},
    load_balancer?: string | null,
    prometheus?: {
    enabled?: boolean,
    trusted_ips?: string | null,

},
}

    export type GhesGetMaintenance = ({
  /** @format hostname */
    hostname?: string,
  /** @format uuid */
    uuid?: string,
    status?: "on" | "off" | "scheduled",
  /** @format date */
    scheduled_time?: string,
    connection_services?: ({
    name?: string,
    number?: number,

})[],
    can_unset_maintenance?: boolean,
    ip_exception_list?: (string)[],
    maintenance_mode_message?: string,

})[]

  /** Set Maintenance mode */
  export interface GhesSetMaintenanceRequest {
  /** Whether to enable maintenance mode. */
    enabled: boolean,
  /**
   * The UUID of the node to target. This parameter is incompatible with maintenance mode scheduling. Only use `uuid` if the value of `when` is empty or `now`.
   * @format uuid
   */
    uuid?: string,
  /**
   * The time to enable maintenance mode. If this parameter is empty or set to `now`, maintenance mode is enabled immediately. Otherwise, maintenance mode is enabled at the specified time. The format is ISO 8601.
   * @format date-time
   */
    when?: string,
  /** The list of IP addresses to exclude from maintenance mode. IPv4, IPv6, and CIDR addresses are supported. */
    ip_exception_list?: (string)[],
  /** The message to display to users when maintenance mode is enabled. */
    maintenance_mode_message?: string,
}

    export type GhesSetMaintenanceResponse = ({
  /** @format hostname */
    hostname?: string,
  /** @format uuid */
    uuid?: string,
    message?: string,
    error?: string,

})[]

    export interface GhesReplicationStatus {
    status?: GhesReplicationStatusIndicator,
    nodes?: ({
    hostname?: string,
    status?: GhesReplicationStatusIndicator,
    services?: ({
    status?: GhesReplicationStatusIndicator,
    name?: string,
    details?: string,

})[],

})[],
}

    export type GhesVersion = ({
  /** @format hostname */
    hostname?: string,
    version?: {
  /** @pattern [0-9]\.[0-9]{2}\.[0-9] */
    version?: string,
    platform?: "ami" | "azure" | "esx" | "gce" | "hyperv" | "kvm",
  /** @pattern [0-9a-f]{8} */
    build_id?: string,
  /** @format date */
    build_date?: string,

},

})[]

  /**
 * Api Overview
 * Api Overview
 */
  export interface ApiOverview {
    verifiable_password_authentication: boolean,
    packages?: (string)[],
    domains?: {
    website?: (string)[],
    codespaces?: (string)[],
    copilot?: (string)[],
    packages?: (string)[],
    actions?: (string)[],
    actions_inbound?: {
    full_domains?: (string)[],
    wildcard_domains?: (string)[],

},
    artifact_attestations?: {
    trust_domain?: string,
    services?: (string)[],

},

},
    installed_version?: string,
}

    export interface SecurityAndAnalysis {
  /**
   * Enable or disable GitHub Advanced Security for the repository.
   * 
   * For standalone Code Scanning or Secret Protection products, this parameter cannot be used.
   */
    advanced_security?: {
    status?: "enabled" | "disabled",

},
    code_security?: {
    status?: "enabled" | "disabled",

},
  /** Enable or disable Dependabot security updates for the repository. */
    dependabot_security_updates?: {
  /** The enablement status of Dependabot security updates for the repository. */
    status?: "enabled" | "disabled",

},
    secret_scanning?: {
    status?: "enabled" | "disabled",

},
    secret_scanning_push_protection?: {
    status?: "enabled" | "disabled",

},
    secret_scanning_non_provider_patterns?: {
    status?: "enabled" | "disabled",

},
}

  /**
 * Minimal Repository
 * Minimal Repository
 */
  export interface MinimalRepository {
  /** @format int64 */
    id: number,
    node_id: string,
    name: string,
    full_name: string,
  /** A GitHub user. */
    owner: SimpleUser,
    private: boolean,
  /** @format uri */
    html_url: string,
    description: string | null,
    fork: boolean,
  /** @format uri */
    url: string,
    archive_url: string,
    assignees_url: string,
    blobs_url: string,
    branches_url: string,
    collaborators_url: string,
    comments_url: string,
    commits_url: string,
    compare_url: string,
    contents_url: string,
  /** @format uri */
    contributors_url: string,
  /** @format uri */
    deployments_url: string,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
  /** @format uri */
    forks_url: string,
    git_commits_url: string,
    git_refs_url: string,
    git_tags_url: string,
    git_url?: string,
    issue_comment_url: string,
    issue_events_url: string,
    issues_url: string,
    keys_url: string,
    labels_url: string,
  /** @format uri */
    languages_url: string,
  /** @format uri */
    merges_url: string,
    milestones_url: string,
    notifications_url: string,
    pulls_url: string,
    releases_url: string,
    ssh_url?: string,
  /** @format uri */
    stargazers_url: string,
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    trees_url: string,
    clone_url?: string,
    mirror_url?: string | null,
  /** @format uri */
    hooks_url: string,
    svn_url?: string,
    homepage?: string | null,
    language?: string | null,
    forks_count?: number,
    stargazers_count?: number,
    watchers_count?: number,
  /** The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0. */
    size?: number,
    default_branch?: string,
    open_issues_count?: number,
    is_template?: boolean,
    topics?: (string)[],
    has_issues?: boolean,
    has_projects?: boolean,
    has_wiki?: boolean,
    has_pages?: boolean,
    has_downloads?: boolean,
    has_discussions?: boolean,
    archived?: boolean,
    disabled?: boolean,
    visibility?: string,
  /** @format date-time */
    pushed_at?: string | null,
  /** @format date-time */
    created_at?: string | null,
  /** @format date-time */
    updated_at?: string | null,
    permissions?: {
    admin?: boolean,
    maintain?: boolean,
    push?: boolean,
    triage?: boolean,
    pull?: boolean,

},
    role_name?: string,
    temp_clone_token?: string,
    delete_branch_on_merge?: boolean,
    subscribers_count?: number,
    network_count?: number,
  /** Code Of Conduct */
    code_of_conduct?: CodeOfConduct,
    license?: {
    key?: string,
    name?: string,
    spdx_id?: string,
    url?: string,
    node_id?: string,

},
    forks?: number,
    open_issues?: number,
    watchers?: number,
    allow_forking?: boolean,
    web_commit_signoff_required?: boolean,
    security_and_analysis?: SecurityAndAnalysis,
}

  /**
 * Thread
 * Thread
 */
  export interface Thread {
    id: string,
  /** Minimal Repository */
    repository: MinimalRepository,
    subject: {
    title: string,
    url: string,
    latest_comment_url: string,
    type: string,

},
    reason: string,
    unread: boolean,
    updated_at: string,
    last_read_at: string | null,
    url: string,
    subscription_url: string,
}

  /**
 * Thread Subscription
 * Thread Subscription
 */
  export interface ThreadSubscription {
    subscribed: boolean,
    ignored: boolean,
    reason: string | null,
  /** @format date-time */
    created_at: string | null,
  /** @format uri */
    url: string,
  /** @format uri */
    thread_url?: string,
  /** @format uri */
    repository_url?: string,
}

  /**
 * Organization Custom Repository Role
 * Custom repository roles created by organization owners
 */
  export interface OrganizationCustomRepositoryRole {
  /** The unique identifier of the custom role. */
    id: number,
  /** The name of the custom role. */
    name: string,
  /** A short description about who this role is for or what permissions it grants. */
    description?: string | null,
  /** The system role from which this role inherits permissions. */
    base_role: "read" | "triage" | "write" | "maintain",
  /** A list of additional permissions included in this role. */
    permissions: (string)[],
  /** A GitHub user. */
    organization: SimpleUser,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
}

  /**
 * Organization Full
 * Organization Full
 */
  export interface OrganizationFull {
    login: string,
    id: number,
    node_id: string,
  /** @format uri */
    url: string,
  /** @format uri */
    repos_url: string,
  /** @format uri */
    events_url: string,
    hooks_url: string,
    issues_url: string,
    members_url: string,
    public_members_url: string,
    avatar_url: string,
    description: string | null,
    name?: string,
    company?: string,
  /** @format uri */
    blog?: string,
    location?: string,
  /** @format email */
    email?: string,
    twitter_username?: string | null,
    is_verified?: boolean,
    has_organization_projects: boolean,
    has_repository_projects: boolean,
    public_repos: number,
    public_gists: number,
    followers: number,
    following: number,
  /** @format uri */
    html_url: string,
    type: string,
    total_private_repos?: number,
    owned_private_repos?: number,
    private_gists?: number | null,
    disk_usage?: number | null,
  /**
   * The number of collaborators on private repositories.
   * 
   * This field may be null if the number of private repositories is over 50,000.
   */
    collaborators?: number | null,
  /** @format email */
    billing_email?: string | null,
    plan?: {
    name: string,
    space: number,
    private_repos: number,
    filled_seats?: number,
    seats?: number,

},
    default_repository_permission?: string | null,
  /** The default branch for repositories created in this organization. */
    default_repository_branch?: string | null,
    members_can_create_repositories?: boolean | null,
    two_factor_requirement_enabled?: boolean | null,
    members_allowed_repository_creation_type?: string,
    members_can_create_public_repositories?: boolean,
    members_can_create_private_repositories?: boolean,
    members_can_create_internal_repositories?: boolean,
    members_can_create_pages?: boolean,
    members_can_create_public_pages?: boolean,
    members_can_create_private_pages?: boolean,
    members_can_delete_repositories?: boolean,
    members_can_change_repo_visibility?: boolean,
    members_can_invite_outside_collaborators?: boolean,
    members_can_delete_issues?: boolean,
    display_commenter_full_name_setting_enabled?: boolean,
    readers_can_create_discussions?: boolean,
    members_can_create_teams?: boolean,
    members_can_view_dependency_insights?: boolean,
    members_can_fork_private_repositories?: boolean | null,
    web_commit_signoff_required?: boolean,
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.17/rest/code-security/configurations) instead.
   * 
   * Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
   * 
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   */
    advanced_security_enabled_for_new_repositories?: boolean,
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.17/rest/code-security/configurations) instead.
   * 
   * Whether Dependabot alerts are automatically enabled for new repositories and repositories transferred to this organization.
   * 
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   */
    dependabot_alerts_enabled_for_new_repositories?: boolean,
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.17/rest/code-security/configurations) instead.
   * 
   * Whether Dependabot security updates are automatically enabled for new repositories and repositories transferred to this organization.
   * 
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   */
    dependabot_security_updates_enabled_for_new_repositories?: boolean,
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.17/rest/code-security/configurations) instead.
   * 
   * Whether dependency graph is automatically enabled for new repositories and repositories transferred to this organization.
   * 
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   */
    dependency_graph_enabled_for_new_repositories?: boolean,
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.17/rest/code-security/configurations) instead.
   * 
   * Whether secret scanning is automatically enabled for new repositories and repositories transferred to this organization.
   * 
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   */
    secret_scanning_enabled_for_new_repositories?: boolean,
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.17/rest/code-security/configurations) instead.
   * 
   * Whether secret scanning push protection is automatically enabled for new repositories and repositories transferred to this organization.
   * 
   * This field is only visible to organization owners or members of a team with the security manager role.
   * @deprecated
   */
    secret_scanning_push_protection_enabled_for_new_repositories?: boolean,
  /** Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection. */
    secret_scanning_push_protection_custom_link_enabled?: boolean,
  /** An optional URL string to display to contributors who are blocked from pushing a secret. */
    secret_scanning_push_protection_custom_link?: string | null,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** @format date-time */
    archived_at: string | null,
  /** Controls whether or not deploy keys may be added and used for repositories in the organization. */
    deploy_keys_enabled_for_repositories?: boolean,
}

  /**
 * Actions Cache Usage by repository
 * GitHub Actions Cache Usage by repository.
 */
  export interface ActionsCacheUsageByRepository {
  /** The repository owner and name for the cache usage being shown. */
    full_name: string,
  /** The sum of the size in bytes of all the active cache items in the repository. */
    active_caches_size_in_bytes: number,
  /** The number of active caches in the repository. */
    active_caches_count: number,
}

  /**
 * Actions OIDC Subject customization
 * Actions OIDC Subject customization
 */
  export interface OidcCustomSub {
  /** Array of unique strings. Each claim key can only contain alphanumeric characters and underscores. */
    include_claim_keys: (string)[],
}

  /**
 * Empty Object
 * An object without any properties.
 */
  export type EmptyObject = object

    export interface ActionsOrganizationPermissions {
  /** The policy that controls the repositories in the organization that are allowed to run GitHub Actions. */
    enabled_repositories: EnabledRepositories,
  /** The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`. */
    selected_repositories_url?: string,
  /** The permissions policy that controls the actions that are allowed to run. */
    allowed_actions?: AllowedActions,
  /** The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`. */
    selected_actions_url?: SelectedActionsUrl,
}

    export interface RunnerGroupsOrg {
    id: number,
    name: string,
    visibility: string,
    default: boolean,
  /** Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected` */
    selected_repositories_url?: string,
    runners_url: string,
    inherited: boolean,
    inherited_allows_public_repositories?: boolean,
    allows_public_repositories: boolean,
  /**
   * If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.
   * @default false
   */
    workflow_restrictions_read_only?: boolean,
  /**
   * If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
   * @default false
   */
    restricted_to_workflows?: boolean,
  /** List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
    selected_workflows?: (string)[],
}

  /**
 * Actions Secret for an Organization
 * Secrets for GitHub Actions for an organization.
 */
  export interface OrganizationActionsSecret {
  /** The name of the secret. */
    name: string,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** Visibility of a secret */
    visibility: "all" | "private" | "selected",
  /** @format uri */
    selected_repositories_url?: string,
}

  /**
 * ActionsPublicKey
 * The public key used for setting Actions Secrets.
 */
  export interface ActionsPublicKey {
  /** The identifier for the key. */
    key_id: string,
  /** The Base64 encoded public key. */
    key: string,
    id?: number,
    url?: string,
    title?: string,
    created_at?: string,
}

  /**
 * Actions Variable for an Organization
 * Organization variable for GitHub Actions.
 */
  export interface OrganizationActionsVariable {
  /** The name of the variable. */
    name: string,
  /** The value of the variable. */
    value: string,
  /**
   * The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
    created_at: string,
  /**
   * The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
    updated_at: string,
  /** Visibility of a variable */
    visibility: "all" | "private" | "selected",
  /** @format uri */
    selected_repositories_url?: string,
}

  /**
 * Announcement Banner
 * Announcement at either the repository, organization, or enterprise level
 */
  export interface AnnouncementBanner {
  /** The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see "[Basic writing and formatting syntax](https://docs.github.com/enterprise-server@3.17/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)." */
    announcement: AnnouncementMessage,
  /** The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string. */
    expires_at: AnnouncementExpiration,
  /** Whether an announcement can be dismissed by the user. */
    user_dismissible: AnnouncementUserDismissible,
}

  /**
 * Bypass response
 * A response made by a delegated bypasser to a bypass request.
 */
  export interface BypassResponse {
  /** The ID of the response to the bypass request. */
    id?: number,
  /** The user who reviewed the bypass request. */
    reviewer?: {
  /** The ID of the GitHub user who reviewed the bypass request. */
    actor_id?: number,
  /** The name of the GitHub user who reviewed the bypass request. */
    actor_name?: string,

},
  /** The response status to the bypass request until dismissed. */
    status?: "approved" | "denied" | "dismissed",
  /**
   * The date and time the response to the bypass request was created.
   * @format date-time
   */
    created_at?: string,
}

  /**
 * Push rule bypass request
 * A bypass request made by a user asking to be exempted from a push rule in this repository.
 */
  export interface PushRuleBypassRequest {
  /** The unique identifier of the bypass request. */
    id?: number,
  /** The number uniquely identifying the bypass request within its repository. */
    number?: number,
  /** The repository the bypass request is for. */
    repository?: {
  /** The ID of the repository the bypass request is for. */
    id?: number | null,
  /** The name of the repository the bypass request is for. */
    name?: string | null,
  /** The full name of the repository the bypass request is for. */
    full_name?: string | null,

},
  /** The organization associated with the repository the bypass request is for. */
    organization?: {
  /** The ID of the organization. */
    id?: number | null,
  /** The name of the organization. */
    name?: string | null,

},
  /** The user who requested the bypass. */
    requester?: {
  /** The ID of the GitHub user who requested the bypass. */
    actor_id?: number,
  /** The name of the GitHub user who requested the bypass. */
    actor_name?: string,

},
  /** The type of request. */
    request_type?: string,
  /** Data describing the push rules that are being requested to be bypassed. */
    data?: (any)[] | null,
  /** The unique identifier for the request type of the bypass request. For example, a commit SHA. */
    resource_identifier?: string,
  /** The status of the bypass request. */
    status?: "pending" | "denied" | "approved" | "cancelled" | "completed" | "expired" | "deleted" | "open",
  /** The comment the requester provided when creating the bypass request. */
    requester_comment?: string | null,
  /**
   * The date and time the bypass request will expire.
   * @format date-time
   */
    expires_at?: string,
  /**
   * The date and time the bypass request was created.
   * @format date-time
   */
    created_at?: string,
  /** The responses to the bypass request. */
    responses?: (any)[] | null,
  /** @format uri */
    url?: string,
  /**
   * The URL to view the bypass request in a browser.
   * @format uri
   */
    html_url?: string,
}

  /**
 * Secret scanning bypass request
 * A bypass request made by a user asking to be exempted from push protection in this repository.
 */
  export interface SecretScanningBypassRequest {
  /** The unique identifier of the bypass request. */
    id?: number,
  /** The number uniquely identifying the bypass request within its repository. */
    number?: number,
  /** The repository the bypass request is for. */
    repository?: {
  /** The ID of the repository the bypass request is for. */
    id?: number,
  /** The name of the repository the bypass request is for. */
    name?: string,
  /** The full name of the repository the bypass request is for. */
    full_name?: string,

},
  /** The organization associated with the repository the bypass request is for. */
    organization?: {
  /** The ID of the organization. */
    id?: number,
  /** The name of the organization. */
    name?: string,

},
  /** The user who requested the bypass. */
    requester?: {
  /** The ID of the GitHub user who requested the bypass. */
    actor_id?: number,
  /** The name of the GitHub user who requested the bypass. */
    actor_name?: string,

},
  /** The type of request. */
    request_type?: string,
  /** Data describing the push rules that are being requested to be bypassed. */
    data?: (any)[] | null,
  /** The unique identifier for the request type of the bypass request. For example, a commit SHA. */
    resource_identifier?: string,
  /** The status of the bypass request. */
    status?: "pending" | "denied" | "approved" | "cancelled" | "completed" | "expired" | "open",
  /** The comment the requester provided when creating the bypass request. */
    requester_comment?: string | null,
  /**
   * The date and time the bypass request will expire.
   * @format date-time
   */
    expires_at?: string,
  /**
   * The date and time the bypass request was created.
   * @format date-time
   */
    created_at?: string,
  /** The responses to the bypass request. */
    responses?: (any)[] | null,
  /** @format uri */
    url?: string,
  /**
   * The URL to view the bypass request in a browser.
   * @format uri
   */
    html_url?: string,
}

    export interface OrganizationCustomRepositoryRoleCreateSchema {
  /** The name of the custom role. */
    name: string,
  /** A short description about who this role is for or what permissions it grants. */
    description?: string | null,
  /** The system role from which this role inherits permissions. */
    base_role: "read" | "triage" | "write" | "maintain",
  /** A list of additional permissions included in this role. */
    permissions: (string)[],
}

    export interface OrganizationCustomRepositoryRoleUpdateSchema {
  /** The name of the custom role. */
    name?: string,
  /** A short description about who this role is for or what permissions it grants. */
    description?: string | null,
  /** The system role from which this role inherits permissions. */
    base_role?: "read" | "triage" | "write" | "maintain",
  /** A list of additional permissions included in this role. */
    permissions?: (string)[],
}

  /**
 * Dependabot Secret for an Organization
 * Secrets for GitHub Dependabot for an organization.
 */
  export interface OrganizationDependabotSecret {
  /** The name of the secret. */
    name: string,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** Visibility of a secret */
    visibility: "all" | "private" | "selected",
  /** @format uri */
    selected_repositories_url?: string,
}

  /**
 * DependabotPublicKey
 * The public key used for setting Dependabot Secrets.
 */
  export interface DependabotPublicKey {
  /** The identifier for the key. */
    key_id: string,
  /** The Base64 encoded public key. */
    key: string,
}

  /**
 * Package
 * A software package
 */
  export interface Package {
  /** Unique identifier of the package. */
    id: number,
  /** The name of the package. */
    name: string,
    package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
    url: string,
    html_url: string,
  /** The number of versions of the package. */
    version_count: number,
    visibility: "private" | "public",
    owner?: (null | SimpleUser),
    repository?: (null | MinimalRepository),
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
}

  /**
 * ExternalGroup
 * Information about an external group's usage and its members
 */
  export interface ExternalGroup {
  /** The internal ID of the group */
    group_id: number,
  /** The display name for the group */
    group_name: string,
  /** The date when the group was last updated_at */
    updated_at?: string,
  /** An array of teams linked to this group */
    teams: ({
  /** The id for a team */
    team_id: number,
  /** The name of the team */
    team_name: string,

})[],
  /** An array of external members linked to this group */
    members: ({
  /** The internal user ID of the identity */
    member_id: number,
  /** The handle/login for the user */
    member_login: string,
  /** The user display name/profile name */
    member_name: string,
  /** An email attached to a user */
    member_email: string,

})[],
}

  /**
 * ExternalGroups
 * A list of external groups available to be connected to a team
 */
  export interface ExternalGroups {
  /** An array of external groups available to be mapped to a team */
    groups?: ({
  /** The internal ID of the group */
    group_id: number,
  /** The display name of the group */
    group_name: string,
  /** The time of the last update for this group */
    updated_at: string,

})[],
}

  /**
 * Org Hook
 * Org Hook
 */
  export interface OrgHook {
    id: number,
  /** @format uri */
    url: string,
  /** @format uri */
    ping_url: string,
  /** @format uri */
    deliveries_url?: string,
    name: string,
    events: (string)[],
    active: boolean,
    config: {
    url?: string,
    insecure_ssl?: string,
    content_type?: string,
    secret?: string,

},
  /** @format date-time */
    updated_at: string,
  /** @format date-time */
    created_at: string,
    type: string,
}

  /**
 * Org Membership
 * Org Membership
 */
  export interface OrgMembership {
  /** @format uri */
    url: string,
  /** The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation. */
    state: "active" | "pending",
  /** The user's membership type in the organization. */
    role: "admin" | "member" | "billing_manager",
  /** Whether the user has direct membership in the organization. */
    direct_membership?: boolean,
  /**
   * The slugs of the enterprise teams providing the user with indirect membership in the organization.
   * A limit of 100 enterprise team slugs is returned.
   * @maxItems 100
   */
    enterprise_teams_providing_indirect_membership?: (string)[],
  /** @format uri */
    organization_url: string,
  /** A GitHub organization. */
    organization: OrganizationSimple,
    user: (null | SimpleUser),
    permissions?: {
    can_create_repository: boolean,

},
}

  /**
 * Migration
 * A migration.
 */
  export interface Migration {
  /** @format int64 */
    id: number,
    owner: (null | SimpleUser),
    guid: string,
    state: string,
    lock_repositories: boolean,
    exclude_metadata: boolean,
    exclude_git_data: boolean,
    exclude_attachments: boolean,
    exclude_releases: boolean,
    exclude_owner_projects: boolean,
    org_metadata_only: boolean,
  /** The repositories included in the migration. Only returned for export migrations. */
    repositories: (Repository)[],
  /** @format uri */
    url: string,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
    node_id: string,
  /** @format uri */
    archive_url?: string,
  /** Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`. */
    exclude?: (string)[],
}

  /**
 * Organization Fine-Grained Permission
 * A fine-grained permission that protects organization resources.
 */
  export interface OrganizationFineGrainedPermission {
    name: string,
    description: string,
}

  /**
 * Organization Role
 * Organization roles
 */
  export interface OrganizationRole {
  /**
   * The unique identifier of the role.
   * @format int64
   */
    id: number,
  /** The name of the role. */
    name: string,
  /** A short description about who this role is for or what permissions it grants. */
    description?: string | null,
  /** The system role from which this role inherits permissions. */
    base_role?: "read" | "triage" | "write" | "maintain" | "admin",
  /** Source answers the question, "where did this role come from?" */
    source?: "Organization" | "Enterprise" | "Predefined",
  /** A list of permissions included in this role. */
    permissions: (string)[],
    organization: (null | SimpleUser),
  /**
   * The date and time the role was created.
   * @format date-time
   */
    created_at: string,
  /**
   * The date and time the role was last updated.
   * @format date-time
   */
    updated_at: string,
}

    export interface OrganizationCustomOrganizationRoleCreateSchema {
  /** The name of the custom role. */
    name: string,
  /** A short description about the intended usage of this role or what permissions it grants. */
    description?: string,
  /** A list of additional permissions included in this role. */
    permissions: (string)[],
  /** The system role from which this role can inherit permissions. */
    base_role?: "read" | "triage" | "write" | "maintain" | "admin",
}

    export interface OrganizationCustomOrganizationRoleUpdateSchema {
  /** The name of the custom role. */
    name?: string,
  /** A short description about the intended use of this role or the permissions it grants. */
    description?: string,
  /** A list of additional permissions included in this role. */
    permissions?: (string)[],
  /** The system role from which this role can inherit permissions. */
    base_role?: "none" | "read" | "triage" | "write" | "maintain" | "admin",
}

  /**
 * Team Simple
 * Groups of organization members that gives permissions on specified repositories.
 */
  export interface TeamSimple {
  /** Unique identifier of the team */
    id: number,
    node_id: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,
    members_url: string,
  /** Name of the team */
    name: string,
  /** Description of the team */
    description: string | null,
  /** Permission that the team will have for its repositories */
    permission: string,
  /** The level of privacy this team should have */
    privacy?: string,
  /** The notification setting the team has set */
    notification_setting?: string,
  /** @format uri */
    html_url: string,
  /** @format uri */
    repositories_url: string,
    slug: string,
  /** Distinguished Name (DN) that team maps to within LDAP environment */
    ldap_dn?: string,
}

  /**
 * A Role Assignment for a Team
 * The Relationship a Team has with a role.
 */
  export interface TeamRoleAssignment {
  /** Determines if the team has a direct, indirect, or mixed relationship to a role */
    assignment?: "direct" | "indirect" | "mixed",
    id: number,
    node_id: string,
    name: string,
    slug: string,
    description: string | null,
    privacy?: string,
    notification_setting?: string,
    permission: string,
    permissions?: {
    pull: boolean,
    triage: boolean,
    push: boolean,
    maintain: boolean,
    admin: boolean,

},
  /** @format uri */
    url: string,
  /** @format uri */
    html_url: string,
    members_url: string,
  /** @format uri */
    repositories_url: string,
    parent: (null | TeamSimple),
}

  /**
 * A Role Assignment for a User
 * The Relationship a User has with a role.
 */
  export interface UserRoleAssignment {
  /** Determines if the user has a direct, indirect, or mixed relationship to a role */
    assignment?: "direct" | "indirect" | "mixed",
  /** Team the user has gotten the role through */
    inherited_from?: (TeamSimple)[],
    name?: string | null,
    email?: string | null,
    login: string,
    id: number,
    node_id: string,
  /** @format uri */
    avatar_url: string,
    gravatar_id: string | null,
  /** @format uri */
    url: string,
  /** @format uri */
    html_url: string,
  /** @format uri */
    followers_url: string,
    following_url: string,
    gists_url: string,
    starred_url: string,
  /** @format uri */
    subscriptions_url: string,
  /** @format uri */
    organizations_url: string,
  /** @format uri */
    repos_url: string,
    events_url: string,
  /** @format uri */
    received_events_url: string,
    type: string,
    site_admin: boolean,
    starred_at?: string,
    user_view_type?: string,
}

  /**
 * Package Version
 * A version of a software package
 */
  export interface PackageVersion {
  /** Unique identifier of the package version. */
    id: number,
  /** The name of the package version. */
    name: string,
    url: string,
    package_html_url: string,
    html_url?: string,
    license?: string,
    description?: string,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** @format date-time */
    deleted_at?: string,
  /** Package Version Metadata */
    metadata?: {
    package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  /** Container Metadata */
    container?: {
    tags: (string)[],

},
  /** Docker Metadata */
    docker?: {
    tag?: (string)[],

},

},
}

  /**
 * Simple Organization Programmatic Access Grant Request
 * Minimal representation of an organization programmatic access grant request for enumerations
 */
  export interface OrganizationProgrammaticAccessGrantRequest {
  /** Unique identifier of the request for access via fine-grained personal access token. The `pat_request_id` used to review PAT requests. */
    id: number,
  /** Reason for requesting access. */
    reason: string | null,
  /** A GitHub user. */
    owner: SimpleUser,
  /** Type of repository selection requested. */
    repository_selection: "none" | "all" | "subset",
  /** URL to the list of repositories requested to be accessed via fine-grained personal access token. Should only be followed when `repository_selection` is `subset`. */
    repositories_url: string,
  /** Permissions requested, categorized by type of permission. */
    permissions: {
    organization?: Record<string,string>,
    repository?: Record<string,string>,
    other?: Record<string,string>,

},
  /** Date and time when the request for access was created. */
    created_at: string,
  /** Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants. */
    token_id: number,
  /** The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens. */
    token_name: string,
  /** Whether the associated fine-grained personal access token has expired. */
    token_expired: boolean,
  /** Date and time when the associated fine-grained personal access token expires. */
    token_expires_at: string | null,
  /** Date and time when the associated fine-grained personal access token was last used for authentication. */
    token_last_used_at: string | null,
}

  /**
 * Organization Programmatic Access Grant
 * Minimal representation of an organization programmatic access grant for enumerations
 */
  export interface OrganizationProgrammaticAccessGrant {
  /** Unique identifier of the fine-grained personal access token grant. The `pat_id` used to get details about an approved fine-grained personal access token. */
    id: number,
  /** A GitHub user. */
    owner: SimpleUser,
  /** Type of repository selection requested. */
    repository_selection: "none" | "all" | "subset",
  /** URL to the list of repositories the fine-grained personal access token can access. Only follow when `repository_selection` is `subset`. */
    repositories_url: string,
  /** Permissions requested, categorized by type of permission. */
    permissions: {
    organization?: Record<string,string>,
    repository?: Record<string,string>,
    other?: Record<string,string>,

},
  /** Date and time when the fine-grained personal access token was approved to access the organization. */
    access_granted_at: string,
  /** Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants. */
    token_id: number,
  /** The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens. */
    token_name: string,
  /** Whether the associated fine-grained personal access token has expired. */
    token_expired: boolean,
  /** Date and time when the associated fine-grained personal access token expires. */
    token_expires_at: string | null,
  /** Date and time when the associated fine-grained personal access token was last used for authentication. */
    token_last_used_at: string | null,
}

    export interface OrgPreReceiveHook {
    id?: number,
    name?: string,
    enforcement?: string,
    configuration_url?: string,
    allow_downstream_configuration?: boolean,
}

  /**
 * Organization private registry
 * Private registry configuration for an organization
 */
  export interface OrgPrivateRegistryConfiguration {
  /** The name of the private registry configuration. */
    name: string,
  /** The registry type. */
    registry_type: "maven_repository" | "nuget_feed" | "goproxy_server" | "npm_registry" | "rubygems_server" | "cargo_registry" | "composer_repository" | "docker_registry" | "git_source" | "helm_registry",
  /** The username to use when authenticating with the private registry. */
    username?: string | null,
  /** Which type of organization repositories have access to the private registry. */
    visibility: "all" | "private" | "selected",
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
}

  /**
 * Project
 * Projects are a way to organize columns and cards of work.
 */
  export interface Project {
  /** @format uri */
    owner_url: string,
  /** @format uri */
    url: string,
  /** @format uri */
    html_url: string,
  /** @format uri */
    columns_url: string,
    id: number,
    node_id: string,
  /** Name of the project */
    name: string,
  /** Body of the project */
    body: string | null,
    number: number,
  /** State of the project; either 'open' or 'closed' */
    state: string,
    creator: (null | SimpleUser),
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** The baseline permission that all organization members have on this project. Only present if owner is an organization. */
    organization_permission?: "read" | "write" | "admin" | "none",
  /** Whether or not this project can be seen by everyone. Only present if owner is an organization. */
    private?: boolean,
}

  /**
 * Organization Custom Property
 * Custom property defined on an organization
 */
  export interface CustomProperty {
  /** The name of the property */
    property_name: string,
  /**
   * The URL that can be used to fetch, update, or delete info about this property via the API.
   * @format uri
   */
    url?: string,
  /** The source type of the property */
    source_type?: "organization" | "enterprise",
  /** The type of the value for the property */
    value_type: "string" | "single_select" | "multi_select" | "true_false",
  /** Whether the property is required. */
    required?: boolean,
  /** Default value of the property */
    default_value?: (string | (string)[]),
  /** Short description of the property */
    description?: string | null,
  /**
   * An ordered list of the allowed values of the property.
   * The property can have up to 200 allowed values.
   * @maxItems 200
   */
    allowed_values?: (any)[] | null,
  /** Who can edit the values of the property */
    values_editable_by?: "org_actors" | "org_and_repo_actors",
}

  /**
 * Custom Property Set Payload
 * Custom property set payload
 */
  export interface CustomPropertySetPayload {
  /** The type of the value for the property */
    value_type: "string" | "single_select" | "multi_select" | "true_false",
  /** Whether the property is required. */
    required?: boolean,
  /** Default value of the property */
    default_value?: (string | (string)[]),
  /** Short description of the property */
    description?: string | null,
  /**
   * An ordered list of the allowed values of the property.
   * The property can have up to 200 allowed values.
   * @maxItems 200
   */
    allowed_values?: (any)[] | null,
  /** Who can edit the values of the property */
    values_editable_by?: "org_actors" | "org_and_repo_actors",
}

  /**
 * Custom Property Value
 * Custom property name and associated value
 */
  export interface CustomPropertyValue {
  /** The name of the property */
    property_name: string,
  /** The value assigned to the property */
    value: (string | (string)[]),
}

  /**
 * Organization Repository Custom Property Values
 * List of custom property values for a repository
 */
  export interface OrgRepoCustomPropertyValues {
    repository_id: number,
    repository_name: string,
    repository_full_name: string,
  /** List of custom property names and associated values */
    properties: (CustomPropertyValue)[],
}

  /**
 * Code Of Conduct Simple
 * Code of Conduct Simple
 */
  export interface CodeOfConductSimple {
  /** @format uri */
    url: string,
    key: string,
    name: string,
  /** @format uri */
    html_url: string | null,
}

  /**
 * Full Repository
 * Full Repository
 */
  export interface FullRepository {
  /** @format int64 */
    id: number,
    node_id: string,
    name: string,
    full_name: string,
  /** A GitHub user. */
    owner: SimpleUser,
    private: boolean,
  /** @format uri */
    html_url: string,
    description: string | null,
    fork: boolean,
  /** @format uri */
    url: string,
    archive_url: string,
    assignees_url: string,
    blobs_url: string,
    branches_url: string,
    collaborators_url: string,
    comments_url: string,
    commits_url: string,
    compare_url: string,
    contents_url: string,
  /** @format uri */
    contributors_url: string,
  /** @format uri */
    deployments_url: string,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
  /** @format uri */
    forks_url: string,
    git_commits_url: string,
    git_refs_url: string,
    git_tags_url: string,
    git_url: string,
    issue_comment_url: string,
    issue_events_url: string,
    issues_url: string,
    keys_url: string,
    labels_url: string,
  /** @format uri */
    languages_url: string,
  /** @format uri */
    merges_url: string,
    milestones_url: string,
    notifications_url: string,
    pulls_url: string,
    releases_url: string,
    ssh_url: string,
  /** @format uri */
    stargazers_url: string,
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    trees_url: string,
    clone_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    homepage: string | null,
    language: string | null,
    forks_count: number,
    stargazers_count: number,
    watchers_count: number,
  /** The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0. */
    size: number,
    default_branch: string,
    open_issues_count: number,
    is_template?: boolean,
    topics?: (string)[],
    has_issues: boolean,
    has_projects: boolean,
    has_wiki: boolean,
    has_pages: boolean,
    has_downloads?: boolean,
    has_discussions: boolean,
    archived: boolean,
  /** Returns whether or not this repository disabled. */
    disabled: boolean,
  /** The repository visibility: public, private, or internal. */
    visibility?: string,
  /** @format date-time */
    pushed_at: string,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    push: boolean,
    triage?: boolean,
    pull: boolean,

},
    allow_rebase_merge?: boolean,
    template_repository?: (null | Repository),
    temp_clone_token?: string | null,
    allow_squash_merge?: boolean,
    allow_auto_merge?: boolean,
    delete_branch_on_merge?: boolean,
    allow_merge_commit?: boolean,
    allow_update_branch?: boolean,
    use_squash_pr_title_as_default?: boolean,
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   *   - `PR_TITLE` - default to the pull request's title.
   *   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
    allow_forking?: boolean,
    web_commit_signoff_required?: boolean,
    subscribers_count: number,
    network_count: number,
    license: (null | LicenseSimple),
    organization?: (null | SimpleUser),
  /** A repository on GitHub. */
    parent?: Repository,
  /** A repository on GitHub. */
    source?: Repository,
    forks: number,
    master_branch?: string,
    open_issues: number,
    watchers: number,
  /**
   * Whether anonymous git access is allowed.
   * @default true
   */
    anonymous_access_enabled?: boolean,
  /** Code of Conduct Simple */
    code_of_conduct?: CodeOfConductSimple,
    security_and_analysis?: SecurityAndAnalysis,
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string,any>,
}

  /**
 * Repository Fine-Grained Permission
 * A fine-grained permission that protects repository resources.
 */
  export interface RepositoryFineGrainedPermission {
    name: string,
    description: string,
}

  /**
 * Repository Ruleset Bypass Actor
 * An actor that can bypass rules in a ruleset
 */
  export interface RepositoryRulesetBypassActor {
  /** The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`. If `actor_type` is `DeployKey`, this should be null. If `actor_type` is `EnterpriseOwner`, `actor_id` is ignored. `OrganizationAdmin` and `EnterpriseOwner` are not applicable for personal repositories. */
    actor_id?: number | null,
  /** The type of actor that can bypass a ruleset */
    actor_type: "Integration" | "OrganizationAdmin" | "RepositoryRole" | "Team" | "DeployKey" | "EnterpriseOwner",
  /**
   * When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. Also, `pull_request` is only applicable to branch rulesets.
   * @default "always"
   */
    bypass_mode?: "always" | "pull_request",
}

  /**
 * Repository ruleset conditions for ref names
 * Parameters for a repository ruleset ref name condition
 */
  export interface RepositoryRulesetConditions {
    ref_name?: {
  /** Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches. */
    include?: (string)[],
  /** Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match. */
    exclude?: (string)[],

},
}

  /**
 * Repository ruleset conditions for repository names
 * Parameters for a repository name condition
 */
  export interface RepositoryRulesetConditionsRepositoryNameTarget {
    repository_name: {
  /** Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories. */
    include?: (string)[],
  /** Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match. */
    exclude?: (string)[],
  /** Whether renaming of target repositories is prevented. */
    protected?: boolean,

},
}

  /**
 * Repository ruleset conditions for repository IDs
 * Parameters for a repository ID condition
 */
  export interface RepositoryRulesetConditionsRepositoryIdTarget {
    repository_id: {
  /** The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass. */
    repository_ids?: (number)[],

},
}

  /**
 * Repository ruleset property targeting definition
 * Parameters for a targeting a repository property
 */
  export interface RepositoryRulesetConditionsRepositoryPropertySpec {
  /** The name of the repository property to target */
    name: string,
  /** The values to match for the repository property */
    property_values: (string)[],
  /** The source of the repository property. Defaults to 'custom' if not specified. */
    source?: "custom" | "system",
}

  /**
 * Repository ruleset conditions for repository properties
 * Parameters for a repository property condition
 */
  export interface RepositoryRulesetConditionsRepositoryPropertyTarget {
    repository_property: {
  /** The repository properties and values to include. All of these properties must match for the condition to pass. */
    include?: (RepositoryRulesetConditionsRepositoryPropertySpec)[],
  /** The repository properties and values to exclude. The condition will not pass if any of these properties match. */
    exclude?: (RepositoryRulesetConditionsRepositoryPropertySpec)[],

},
}

  /**
 * Organization ruleset conditions
 * Conditions for an organization ruleset.
 * The branch and tag rulesets conditions object should contain both `repository_name` and `ref_name` properties, or both `repository_id` and `ref_name` properties, or both `repository_property` and `ref_name` properties.
 * The push rulesets conditions object does not require the `ref_name` property.
 */
  export type OrgRulesetConditions = ((RepositoryRulesetConditions & RepositoryRulesetConditionsRepositoryNameTarget) | (RepositoryRulesetConditions & RepositoryRulesetConditionsRepositoryIdTarget) | (RepositoryRulesetConditions & RepositoryRulesetConditionsRepositoryPropertyTarget))

  /**
 * creation
 * Only allow users with bypass permission to create matching refs.
 */
  export interface RepositoryRuleCreation {
    type: "creation",
}

  /**
 * update
 * Only allow users with bypass permission to update matching refs.
 */
  export interface RepositoryRuleUpdate {
    type: "update",
    parameters?: {
  /** Branch can pull changes from its upstream repository */
    update_allows_fetch_and_merge: boolean,

},
}

  /**
 * deletion
 * Only allow users with bypass permissions to delete matching refs.
 */
  export interface RepositoryRuleDeletion {
    type: "deletion",
}

  /**
 * required_linear_history
 * Prevent merge commits from being pushed to matching refs.
 */
  export interface RepositoryRuleRequiredLinearHistory {
    type: "required_linear_history",
}

  /**
 * merge_queue
 * Merges must be performed via a merge queue.
 */
  export interface RepositoryRuleMergeQueue {
    type: "merge_queue",
    parameters?: {
  /**
   * Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed
   * @min 1
   * @max 360
   */
    check_response_timeout_minutes: number,
  /** When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge. */
    grouping_strategy: "ALLGREEN" | "HEADGREEN",
  /**
   * Limit the number of queued pull requests requesting checks and workflow runs at the same time.
   * @min 0
   * @max 100
   */
    max_entries_to_build: number,
  /**
   * The maximum number of PRs that will be merged together in a group.
   * @min 0
   * @max 100
   */
    max_entries_to_merge: number,
  /** Method to use when merging changes from queued pull requests. */
    merge_method: "MERGE" | "SQUASH" | "REBASE",
  /**
   * The minimum number of PRs that will be merged together in a group.
   * @min 0
   * @max 100
   */
    min_entries_to_merge: number,
  /**
   * The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged.
   * @min 0
   * @max 360
   */
    min_entries_to_merge_wait_minutes: number,

},
}

  /**
 * required_deployments
 * Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
 */
  export interface RepositoryRuleRequiredDeployments {
    type: "required_deployments",
    parameters?: {
  /** The environments that must be successfully deployed to before branches can be merged. */
    required_deployment_environments: (string)[],

},
}

  /**
 * required_signatures
 * Commits pushed to matching refs must have verified signatures.
 */
  export interface RepositoryRuleRequiredSignatures {
    type: "required_signatures",
}

  /**
 * Reviewer
 * A required reviewing team
 */
  export interface RepositoryRuleParamsReviewer {
  /** ID of the reviewer which must review changes to matching files. */
    id: number,
  /** The type of the reviewer */
    type: "Team",
}

  /**
 * RequiredReviewerConfiguration
 * A reviewing team, and file patterns describing which files they must approve changes to.
 */
  export interface RepositoryRuleParamsRequiredReviewerConfiguration {
  /** Array of file patterns. Pull requests which change matching files must be approved by the specified team. File patterns use the same syntax as `.gitignore` files. */
    file_patterns: (string)[],
  /** Minimum number of approvals required from the specified team. If set to zero, the team will be added to the pull request but approval is optional. */
    minimum_approvals: number,
  /** A required reviewing team */
    reviewer: RepositoryRuleParamsReviewer,
}

  /**
 * pull_request
 * Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
 */
  export interface RepositoryRulePullRequest {
    type: "pull_request",
    parameters?: {
  /** Array of allowed merge methods. Allowed values include `merge`, `squash`, and `rebase`. At least one option must be enabled. */
    allowed_merge_methods?: ("merge" | "squash" | "rebase")[],
  /** Automatically request review from Copilot for new pull requests, if the author has access to Copilot code review. */
    automatic_copilot_code_review_enabled?: boolean,
  /** New, reviewable commits pushed will dismiss previous pull request review approvals. */
    dismiss_stale_reviews_on_push: boolean,
  /** Require an approving review in pull requests that modify files that have a designated code owner. */
    require_code_owner_review: boolean,
  /** Whether the most recent reviewable push must be approved by someone other than the person who pushed it. */
    require_last_push_approval: boolean,
  /**
   * The number of approving reviews that are required before a pull request can be merged.
   * @min 0
   * @max 10
   */
    required_approving_review_count: number,
  /** All conversations on code must be resolved before a pull request can be merged. */
    required_review_thread_resolution: boolean,

},
}

  /**
 * StatusCheckConfiguration
 * Required status check
 */
  export interface RepositoryRuleParamsStatusCheckConfiguration {
  /** The status check context name that must be present on the commit. */
    context: string,
  /** The optional integration ID that this status check must originate from. */
    integration_id?: number,
}

  /**
 * required_status_checks
 * Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
 */
  export interface RepositoryRuleRequiredStatusChecks {
    type: "required_status_checks",
    parameters?: {
  /** Allow repositories and branches to be created if a check would otherwise prohibit it. */
    do_not_enforce_on_create?: boolean,
  /** Status checks that are required. */
    required_status_checks: (RepositoryRuleParamsStatusCheckConfiguration)[],
  /** Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. */
    strict_required_status_checks_policy: boolean,

},
}

  /**
 * non_fast_forward
 * Prevent users with push access from force pushing to refs.
 */
  export interface RepositoryRuleNonFastForward {
    type: "non_fast_forward",
}

  /**
 * commit_message_pattern
 * Parameters to be used for the commit_message_pattern rule
 */
  export interface RepositoryRuleCommitMessagePattern {
    type: "commit_message_pattern",
    parameters?: {
  /** How this rule will appear to users. */
    name?: string,
  /** If true, the rule will fail if the pattern matches. */
    negate?: boolean,
  /** The operator to use for matching. */
    operator: "starts_with" | "ends_with" | "contains" | "regex",
  /** The pattern to match with. */
    pattern: string,

},
}

  /**
 * commit_author_email_pattern
 * Parameters to be used for the commit_author_email_pattern rule
 */
  export interface RepositoryRuleCommitAuthorEmailPattern {
    type: "commit_author_email_pattern",
    parameters?: {
  /** How this rule will appear to users. */
    name?: string,
  /** If true, the rule will fail if the pattern matches. */
    negate?: boolean,
  /** The operator to use for matching. */
    operator: "starts_with" | "ends_with" | "contains" | "regex",
  /** The pattern to match with. */
    pattern: string,

},
}

  /**
 * committer_email_pattern
 * Parameters to be used for the committer_email_pattern rule
 */
  export interface RepositoryRuleCommitterEmailPattern {
    type: "committer_email_pattern",
    parameters?: {
  /** How this rule will appear to users. */
    name?: string,
  /** If true, the rule will fail if the pattern matches. */
    negate?: boolean,
  /** The operator to use for matching. */
    operator: "starts_with" | "ends_with" | "contains" | "regex",
  /** The pattern to match with. */
    pattern: string,

},
}

  /**
 * branch_name_pattern
 * Parameters to be used for the branch_name_pattern rule
 */
  export interface RepositoryRuleBranchNamePattern {
    type: "branch_name_pattern",
    parameters?: {
  /** How this rule will appear to users. */
    name?: string,
  /** If true, the rule will fail if the pattern matches. */
    negate?: boolean,
  /** The operator to use for matching. */
    operator: "starts_with" | "ends_with" | "contains" | "regex",
  /** The pattern to match with. */
    pattern: string,

},
}

  /**
 * tag_name_pattern
 * Parameters to be used for the tag_name_pattern rule
 */
  export interface RepositoryRuleTagNamePattern {
    type: "tag_name_pattern",
    parameters?: {
  /** How this rule will appear to users. */
    name?: string,
  /** If true, the rule will fail if the pattern matches. */
    negate?: boolean,
  /** The operator to use for matching. */
    operator: "starts_with" | "ends_with" | "contains" | "regex",
  /** The pattern to match with. */
    pattern: string,

},
}

  /**
 * file_path_restriction
 * Prevent commits that include changes in specified file and folder paths from being pushed to the commit graph. This includes absolute paths that contain file names.
 */
  export interface RepositoryRuleFilePathRestriction {
    type: "file_path_restriction",
    parameters?: {
  /** The file paths that are restricted from being pushed to the commit graph. */
    restricted_file_paths: (string)[],

},
}

  /**
 * max_file_path_length
 * Prevent commits that include file paths that exceed the specified character limit from being pushed to the commit graph.
 */
  export interface RepositoryRuleMaxFilePathLength {
    type: "max_file_path_length",
    parameters?: {
  /**
   * The maximum amount of characters allowed in file paths.
   * @min 1
   * @max 32767
   */
    max_file_path_length: number,

},
}

  /**
 * file_extension_restriction
 * Prevent commits that include files with specified file extensions from being pushed to the commit graph.
 */
  export interface RepositoryRuleFileExtensionRestriction {
    type: "file_extension_restriction",
    parameters?: {
  /** The file extensions that are restricted from being pushed to the commit graph. */
    restricted_file_extensions: (string)[],

},
}

  /**
 * max_file_size
 * Prevent commits with individual files that exceed the specified limit from being pushed to the commit graph.
 */
  export interface RepositoryRuleMaxFileSize {
    type: "max_file_size",
    parameters?: {
  /**
   * The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).
   * @min 1
   * @max 100
   */
    max_file_size: number,

},
}

  /**
 * RestrictedCommits
 * Restricted commit
 */
  export interface RepositoryRuleParamsRestrictedCommits {
  /** Full or abbreviated commit hash to reject */
    oid: string,
  /** Reason for restriction */
    reason?: string,
}

  /**
 * WorkflowFileReference
 * A workflow that must run for this rule to pass
 */
  export interface RepositoryRuleParamsWorkflowFileReference {
  /** The path to the workflow file */
    path: string,
  /** The ref (branch or tag) of the workflow file to use */
    ref?: string,
  /** The ID of the repository where the workflow is defined */
    repository_id: number,
  /** The commit SHA of the workflow file to use */
    sha?: string,
}

  /**
 * workflows
 * Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
 */
  export interface RepositoryRuleWorkflows {
    type: "workflows",
    parameters?: {
  /** Allow repositories and branches to be created if a check would otherwise prohibit it. */
    do_not_enforce_on_create?: boolean,
  /** Workflows that must pass for this rule to pass. */
    workflows: (RepositoryRuleParamsWorkflowFileReference)[],

},
}

  /**
 * CodeScanningTool
 * A tool that must provide code scanning results for this rule to pass.
 */
  export interface RepositoryRuleParamsCodeScanningTool {
  /** The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see "[About code scanning alerts](https://docs.github.com/enterprise-server@3.17/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)." */
    alerts_threshold: "none" | "errors" | "errors_and_warnings" | "all",
  /** The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see "[About code scanning alerts](https://docs.github.com/enterprise-server@3.17/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels)." */
    security_alerts_threshold: "none" | "critical" | "high_or_higher" | "medium_or_higher" | "all",
  /** The name of a code scanning tool */
    tool: string,
}

  /**
 * code_scanning
 * Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.
 */
  export interface RepositoryRuleCodeScanning {
    type: "code_scanning",
    parameters?: {
  /** Tools that must provide code scanning results for this rule to pass. */
    code_scanning_tools: (RepositoryRuleParamsCodeScanningTool)[],

},
}

  /**
 * Repository Rule
 * A repository rule.
 */
  export type RepositoryRule = (RepositoryRuleCreation | RepositoryRuleUpdate | RepositoryRuleDeletion | RepositoryRuleRequiredLinearHistory | RepositoryRuleMergeQueue | RepositoryRuleRequiredDeployments | RepositoryRuleRequiredSignatures | RepositoryRulePullRequest | RepositoryRuleRequiredStatusChecks | RepositoryRuleNonFastForward | RepositoryRuleCommitMessagePattern | RepositoryRuleCommitAuthorEmailPattern | RepositoryRuleCommitterEmailPattern | RepositoryRuleBranchNamePattern | RepositoryRuleTagNamePattern | RepositoryRuleFilePathRestriction | RepositoryRuleMaxFilePathLength | RepositoryRuleFileExtensionRestriction | RepositoryRuleMaxFileSize | RepositoryRuleWorkflows | RepositoryRuleCodeScanning)

  /**
 * Repository ruleset
 * A set of rules to apply when specified conditions are met.
 */
  export interface RepositoryRuleset {
  /** The ID of the ruleset */
    id: number,
  /** The name of the ruleset */
    name: string,
  /** The target of the ruleset. */
    target?: "branch" | "tag" | "push",
  /** The type of the source of the ruleset */
    source_type?: "Repository" | "Organization",
  /** The name of the source */
    source: string,
  /** The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page. `evaluate` is not available for the `repository` target. */
    enforcement: RepositoryRuleEnforcement,
  /** The actors that can bypass the rules in this ruleset */
    bypass_actors?: (RepositoryRulesetBypassActor)[],
  /**
   * The bypass type of the user making the API request for this ruleset. This field is only returned when
   * querying the repository-level endpoint.
   */
    current_user_can_bypass?: "always" | "pull_requests_only" | "never",
    node_id?: string,
    _links?: {
    self?: {
  /** The URL of the ruleset */
    href?: string,

},
    html?: {
  /** The html URL of the ruleset */
    href?: string,

},

},
    conditions?: (RepositoryRulesetConditions | OrgRulesetConditions),
    rules?: (RepositoryRule)[],
  /** @format date-time */
    created_at?: string,
  /** @format date-time */
    updated_at?: string,
}

  /**
 * Rule Suites
 * Response
 */
  export type RuleSuites = ({
  /** The unique identifier of the rule insight. */
    id?: number,
  /** The number that identifies the user. */
    actor_id?: number,
  /** The handle for the GitHub user account. */
    actor_name?: string,
  /** The first commit sha before the push evaluation. */
    before_sha?: string,
  /** The last commit sha in the push evaluation. */
    after_sha?: string,
  /** The ref name that the evaluation ran on. */
    ref?: string,
  /** The ID of the repository associated with the rule evaluation. */
    repository_id?: number,
  /** The name of the repository without the `.git` extension. */
    repository_name?: string,
  /** @format date-time */
    pushed_at?: string,
  /** The result of the rule evaluations for rules with the `active` enforcement status. */
    result?: "pass" | "fail" | "bypass",
  /** The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`. */
    evaluation_result?: "pass" | "fail" | "bypass",

})[]

  /**
 * Rule Suite
 * Response
 */
  export interface RuleSuite {
  /** The unique identifier of the rule insight. */
    id?: number,
  /** The number that identifies the user. */
    actor_id?: number | null,
  /** The handle for the GitHub user account. */
    actor_name?: string | null,
  /** The first commit sha before the push evaluation. */
    before_sha?: string,
  /** The last commit sha in the push evaluation. */
    after_sha?: string,
  /** The ref name that the evaluation ran on. */
    ref?: string,
  /** The ID of the repository associated with the rule evaluation. */
    repository_id?: number,
  /** The name of the repository without the `.git` extension. */
    repository_name?: string,
  /** @format date-time */
    pushed_at?: string,
  /** The result of the rule evaluations for rules with the `active` enforcement status. */
    result?: "pass" | "fail" | "bypass",
  /** The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`. Null if no rules with `evaluate` enforcement status were run. */
    evaluation_result?: "pass" | "fail" | "bypass",
  /** Details on the evaluated rules. */
    rule_evaluations?: ({
    rule_source?: {
  /** The type of rule source. */
    type?: string,
  /** The ID of the rule source. */
    id?: number | null,
  /** The name of the rule source. */
    name?: string | null,

},
  /** The enforcement level of this rule source. */
    enforcement?: "active" | "evaluate" | "deleted ruleset",
  /** The result of the evaluation of the individual rule. */
    result?: "pass" | "fail",
  /** The type of rule. */
    rule_type?: string,
  /** The detailed failure message for the rule. Null if the rule passed. */
    details?: string | null,

})[],
}

  /**
 * Team
 * Groups of organization members that gives permissions on specified repositories.
 */
  export interface Team {
    id: number,
    node_id: string,
    name: string,
    slug: string,
    description: string | null,
    privacy?: string,
    notification_setting?: string,
    permission: string,
    permissions?: {
    pull: boolean,
    triage: boolean,
    push: boolean,
    maintain: boolean,
    admin: boolean,

},
  /** @format uri */
    url: string,
  /** @format uri */
    html_url: string,
    members_url: string,
  /** @format uri */
    repositories_url: string,
    parent: (null | TeamSimple),
}

  /**
 * Team Organization
 * Team Organization
 */
  export interface TeamOrganization {
    login: string,
    id: number,
    node_id: string,
  /** @format uri */
    url: string,
  /** @format uri */
    repos_url: string,
  /** @format uri */
    events_url: string,
    hooks_url: string,
    issues_url: string,
    members_url: string,
    public_members_url: string,
    avatar_url: string,
    description: string | null,
    name?: string,
    company?: string,
  /** @format uri */
    blog?: string,
    location?: string,
  /** @format email */
    email?: string,
    twitter_username?: string | null,
    is_verified?: boolean,
    has_organization_projects: boolean,
    has_repository_projects: boolean,
    public_repos: number,
    public_gists: number,
    followers: number,
    following: number,
  /** @format uri */
    html_url: string,
  /** @format date-time */
    created_at: string,
    type: string,
    total_private_repos?: number,
    owned_private_repos?: number,
    private_gists?: number | null,
    disk_usage?: number | null,
    collaborators?: number | null,
  /** @format email */
    billing_email?: string | null,
    plan?: {
    name: string,
    space: number,
    private_repos: number,
    filled_seats?: number,
    seats?: number,

},
    default_repository_permission?: string | null,
    members_can_create_repositories?: boolean | null,
    two_factor_requirement_enabled?: boolean | null,
    members_allowed_repository_creation_type?: string,
    members_can_create_public_repositories?: boolean,
    members_can_create_private_repositories?: boolean,
    members_can_create_internal_repositories?: boolean,
    members_can_create_pages?: boolean,
    members_can_create_public_pages?: boolean,
    members_can_create_private_pages?: boolean,
    members_can_fork_private_repositories?: boolean | null,
    web_commit_signoff_required?: boolean,
  /** @format date-time */
    updated_at: string,
  /** @format date-time */
    archived_at: string | null,
}

  /**
 * Full Team
 * Groups of organization members that gives permissions on specified repositories.
 */
  export interface TeamFull {
  /** Unique identifier of the team */
    id: number,
    node_id: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,
  /** @format uri */
    html_url: string,
  /** Name of the team */
    name: string,
    slug: string,
    description: string | null,
  /** The level of privacy this team should have */
    privacy?: "closed" | "secret",
  /** The notification setting the team has set */
    notification_setting?: "notifications_enabled" | "notifications_disabled",
  /** Permission that the team will have for its repositories */
    permission: string,
    members_url: string,
  /** @format uri */
    repositories_url: string,
    parent?: (null | TeamSimple),
    members_count: number,
    repos_count: number,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** Team Organization */
    organization: TeamOrganization,
  /** Distinguished Name (DN) that team maps to within LDAP environment */
    ldap_dn?: string,
}

  /**
 * Team Discussion
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
  export interface TeamDiscussion {
    author: (null | SimpleUser),
  /** The main text of the discussion. */
    body: string,
    body_html: string,
  /** The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */
    body_version: string,
    comments_count: number,
  /** @format uri */
    comments_url: string,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    last_edited_at: string | null,
  /** @format uri */
    html_url: string,
    node_id: string,
  /** The unique sequence number of a team discussion. */
    number: number,
  /** Whether or not this discussion should be pinned for easy retrieval. */
    pinned: boolean,
  /** Whether or not this discussion should be restricted to team members and organization owners. */
    private: boolean,
  /** @format uri */
    team_url: string,
  /** The title of the discussion. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    reactions?: ReactionRollup,
}

  /**
 * Team Discussion Comment
 * A reply to a discussion within a team.
 */
  export interface TeamDiscussionComment {
    author: (null | SimpleUser),
  /** The main text of the comment. */
    body: string,
    body_html: string,
  /** The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */
    body_version: string,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    last_edited_at: string | null,
  /** @format uri */
    discussion_url: string,
  /** @format uri */
    html_url: string,
    node_id: string,
  /** The unique sequence number of a team discussion comment. */
    number: number,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    reactions?: ReactionRollup,
}

  /**
 * Reaction
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
  export interface Reaction {
    id: number,
    node_id: string,
    user: (null | SimpleUser),
  /** The reaction to use */
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes",
  /** @format date-time */
    created_at: string,
}

  /**
 * Team Membership
 * Team Membership
 */
  export interface TeamMembership {
  /** @format uri */
    url: string,
  /**
   * The role of the user in the team.
   * @default "member"
   */
    role: "member" | "maintainer",
  /** The state of the user's membership in the team. */
    state: "active" | "pending",
}

  /**
 * Team Project
 * A team's access to a project.
 */
  export interface TeamProject {
    owner_url: string,
    url: string,
    html_url: string,
    columns_url: string,
    id: number,
    node_id: string,
    name: string,
    body: string | null,
    number: number,
    state: string,
  /** A GitHub user. */
    creator: SimpleUser,
    created_at: string,
    updated_at: string,
  /** The organization permission for this project. Only present when owner is an organization. */
    organization_permission?: string,
  /** Whether the project is private or not. Only present when owner is an organization. */
    private?: boolean,
    permissions: {
    read: boolean,
    write: boolean,
    admin: boolean,

},
}

  /**
 * Team Repository
 * A team's access to a repository.
 */
  export interface TeamRepository {
  /** Unique identifier of the repository */
    id: number,
    node_id: string,
  /** The name of the repository. */
    name: string,
    full_name: string,
    license: (null | LicenseSimple),
    forks: number,
    permissions?: {
    admin: boolean,
    pull: boolean,
    triage?: boolean,
    push: boolean,
    maintain?: boolean,

},
    role_name?: string,
    owner: (null | SimpleUser),
  /**
   * Whether the repository is private or public.
   * @default false
   */
    private: boolean,
  /** @format uri */
    html_url: string,
    description: string | null,
    fork: boolean,
  /** @format uri */
    url: string,
    archive_url: string,
    assignees_url: string,
    blobs_url: string,
    branches_url: string,
    collaborators_url: string,
    comments_url: string,
    commits_url: string,
    compare_url: string,
    contents_url: string,
  /** @format uri */
    contributors_url: string,
  /** @format uri */
    deployments_url: string,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
  /** @format uri */
    forks_url: string,
    git_commits_url: string,
    git_refs_url: string,
    git_tags_url: string,
    git_url: string,
    issue_comment_url: string,
    issue_events_url: string,
    issues_url: string,
    keys_url: string,
    labels_url: string,
  /** @format uri */
    languages_url: string,
  /** @format uri */
    merges_url: string,
    milestones_url: string,
    notifications_url: string,
    pulls_url: string,
    releases_url: string,
    ssh_url: string,
  /** @format uri */
    stargazers_url: string,
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    trees_url: string,
    clone_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    homepage: string | null,
    language: string | null,
    forks_count: number,
    stargazers_count: number,
    watchers_count: number,
    size: number,
  /** The default branch of the repository. */
    default_branch: string,
    open_issues_count: number,
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @default false
   */
    is_template?: boolean,
    topics?: (string)[],
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
    has_pages: boolean,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** Returns whether or not this repository disabled. */
    disabled: boolean,
  /**
   * The repository visibility: public, private, or internal.
   * @default "public"
   */
    visibility?: string,
  /** @format date-time */
    pushed_at: string | null,
  /** @format date-time */
    created_at: string | null,
  /** @format date-time */
    updated_at: string | null,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
    temp_clone_token?: string,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow forking this repo
   * @default false
   */
    allow_forking?: boolean,
  /**
   * Whether to require contributors to sign off on web-based commits
   * @default false
   */
    web_commit_signoff_required?: boolean,
    subscribers_count?: number,
    network_count?: number,
    open_issues: number,
    watchers: number,
    master_branch?: string,
}

  /**
 * Project Card
 * Project cards represent a scope of work.
 */
  export interface ProjectCard {
  /** @format uri */
    url: string,
  /**
   * The project card's ID
   * @format int64
   */
    id: number,
    node_id: string,
    note: string | null,
    creator: (null | SimpleUser),
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** Whether or not the card is archived */
    archived?: boolean,
    column_name?: string,
    project_id?: string,
  /** @format uri */
    column_url: string,
  /** @format uri */
    content_url?: string,
  /** @format uri */
    project_url: string,
}

  /**
 * Project Column
 * Project columns contain cards of work.
 */
  export interface ProjectColumn {
  /** @format uri */
    url: string,
  /** @format uri */
    project_url: string,
  /** @format uri */
    cards_url: string,
  /** The unique identifier of the project column */
    id: number,
    node_id: string,
  /** Name of the project column */
    name: string,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
}

  /**
 * Project Collaborator Permission
 * Project Collaborator Permission
 */
  export interface ProjectCollaboratorPermission {
    permission: string,
    user: (null | SimpleUser),
}

  /** Rate Limit */
  export interface RateLimit {
    limit: number,
    remaining: number,
    reset: number,
    used: number,
}

  /**
 * Rate Limit Overview
 * Rate Limit Overview
 */
  export interface RateLimitOverview {
    resources: {
    core: RateLimit,
    graphql?: RateLimit,
    search: RateLimit,
    code_search?: RateLimit,
    source_import?: RateLimit,
    integration_manifest?: RateLimit,
    code_scanning_upload?: RateLimit,
    actions_runner_registration?: RateLimit,
    scim?: RateLimit,
    dependency_sbom?: RateLimit,
    code_scanning_autofix?: RateLimit,

},
    rate: RateLimit,
}

  /**
 * Artifact
 * An artifact
 */
  export interface Artifact {
    id: number,
    node_id: string,
  /** The name of the artifact. */
    name: string,
  /** The size in bytes of the artifact. */
    size_in_bytes: number,
    url: string,
    archive_download_url: string,
  /** Whether or not the artifact has expired. */
    expired: boolean,
  /** @format date-time */
    created_at: string | null,
  /** @format date-time */
    expires_at: string | null,
  /** @format date-time */
    updated_at: string | null,
    workflow_run?: {
    id?: number,
    repository_id?: number,
    head_repository_id?: number,
    head_branch?: string,
    head_sha?: string,

},
}

  /**
 * Actions cache usage policy for repository
 * GitHub Actions cache usage policy for repository.
 */
  export interface ActionsCacheUsagePolicyForRepository {
  /** The size limit for the sum of all caches, in gigabytes. */
    repo_cache_size_limit_in_gb: number,
}

  /**
 * Repository actions caches
 * Repository actions caches
 */
  export interface ActionsCacheList {
  /** Total number of caches */
    total_count: number,
  /** Array of caches */
    actions_caches: ({
    id?: number,
    ref?: string,
    key?: string,
    version?: string,
  /** @format date-time */
    last_accessed_at?: string,
  /** @format date-time */
    created_at?: string,
    size_in_bytes?: number,

})[],
}

  /**
 * Job
 * Information of a job execution in a workflow run
 */
  export interface Job {
  /** The id of the job. */
    id: number,
  /** The id of the associated workflow run. */
    run_id: number,
    run_url: string,
  /** Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run. */
    run_attempt?: number,
    node_id: string,
  /** The SHA of the commit that is being run. */
    head_sha: string,
    url: string,
    html_url: string | null,
  /** The phase of the lifecycle that the job is currently in. */
    status: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending",
  /** The outcome of the job. */
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required",
  /**
   * The time that the job created, in ISO 8601 format.
   * @format date-time
   */
    created_at: string,
  /**
   * The time that the job started, in ISO 8601 format.
   * @format date-time
   */
    started_at: string,
  /**
   * The time that the job finished, in ISO 8601 format.
   * @format date-time
   */
    completed_at: string | null,
  /** The name of the job. */
    name: string,
  /** Steps in this job. */
    steps?: ({
  /** The phase of the lifecycle that the job is currently in. */
    status: "queued" | "in_progress" | "completed",
  /** The outcome of the job. */
    conclusion: string | null,
  /** The name of the job. */
    name: string,
    number: number,
  /**
   * The time that the step started, in ISO 8601 format.
   * @format date-time
   */
    started_at?: string | null,
  /**
   * The time that the job finished, in ISO 8601 format.
   * @format date-time
   */
    completed_at?: string | null,

})[],
    check_run_url: string,
  /** Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file. */
    labels: (string)[],
  /** The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
    runner_id: number | null,
  /** The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
    runner_name: string | null,
  /** The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
    runner_group_id: number | null,
  /** The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
    runner_group_name: string | null,
  /** The name of the workflow. */
    workflow_name: string | null,
  /** The name of the current branch. */
    head_branch: string | null,
}

  /**
 * Actions OIDC subject customization for a repository
 * Actions OIDC subject customization for a repository
 */
  export interface OidcCustomSubRepo {
  /** Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored. */
    use_default: boolean,
  /** Array of unique strings. Each claim key can only contain alphanumeric characters and underscores. */
    include_claim_keys?: (string)[],
}

  /**
 * Actions Secret
 * Set secrets for GitHub Actions.
 */
  export interface ActionsSecret {
  /** The name of the secret. */
    name: string,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
}

  /** Actions Variable */
  export interface ActionsVariable {
  /** The name of the variable. */
    name: string,
  /** The value of the variable. */
    value: string,
  /**
   * The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
    created_at: string,
  /**
   * The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @format date-time
   */
    updated_at: string,
}

  /** Whether GitHub Actions is enabled on the repository. */
  export type ActionsEnabled = boolean

    export interface ActionsRepositoryPermissions {
  /** Whether GitHub Actions is enabled on the repository. */
    enabled: ActionsEnabled,
  /** The permissions policy that controls the actions that are allowed to run. */
    allowed_actions?: AllowedActions,
  /** The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`. */
    selected_actions_url?: SelectedActionsUrl,
}

    export interface ActionsWorkflowAccessToRepository {
  /**
   * Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
   * repository.
   * 
   * `none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repositories only. `organization` level access allows sharing across the organization. `enterprise` level access allows sharing across the enterprise.
   */
    access_level: "none" | "user" | "organization" | "enterprise",
}

  /**
 * Referenced workflow
 * A workflow referenced/reused by the initial caller workflow
 */
  export interface ReferencedWorkflow {
    path: string,
    sha: string,
    ref?: string,
}

  /** Pull Request Minimal */
  export interface PullRequestMinimal {
  /** @format int64 */
    id: number,
    number: number,
    url: string,
    head: {
    ref: string,
    sha: string,
    repo: {
  /** @format int64 */
    id: number,
    url: string,
    name: string,

},

},
    base: {
    ref: string,
    sha: string,
    repo: {
  /** @format int64 */
    id: number,
    url: string,
    name: string,

},

},
}

  /**
 * Simple Commit
 * A commit.
 */
  export interface SimpleCommit {
  /** SHA for the commit */
    id: string,
  /** SHA for the commit's tree */
    tree_id: string,
  /** Message describing the purpose of the commit */
    message: string,
  /**
   * Timestamp of the commit
   * @format date-time
   */
    timestamp: string,
  /** Information about the Git author */
    author: {
  /** Name of the commit's author */
    name: string,
  /**
   * Git email address of the commit's author
   * @format email
   */
    email: string,

},
  /** Information about the Git committer */
    committer: {
  /** Name of the commit's committer */
    name: string,
  /**
   * Git email address of the commit's committer
   * @format email
   */
    email: string,

},
}

  /**
 * Workflow Run
 * An invocation of a workflow
 */
  export interface WorkflowRun {
  /** The ID of the workflow run. */
    id: number,
  /** The name of the workflow run. */
    name?: string | null,
    node_id: string,
  /** The ID of the associated check suite. */
    check_suite_id?: number,
  /** The node ID of the associated check suite. */
    check_suite_node_id?: string,
    head_branch: string | null,
  /** The SHA of the head commit that points to the version of the workflow being run. */
    head_sha: string,
  /** The full path of the workflow */
    path: string,
  /** The auto incrementing run number for the workflow run. */
    run_number: number,
  /** Attempt number of the run, 1 for first attempt and higher if the workflow was re-run. */
    run_attempt?: number,
    referenced_workflows?: (any)[] | null,
    event: string,
    status: string | null,
    conclusion: string | null,
  /** The ID of the parent workflow. */
    workflow_id: number,
  /** The URL to the workflow run. */
    url: string,
    html_url: string,
  /** Pull requests that are open with a `head_sha` or `head_branch` that matches the workflow run. The returned pull requests do not necessarily indicate pull requests that triggered the run. */
    pull_requests: (any)[] | null,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** A GitHub user. */
    actor?: SimpleUser,
  /** A GitHub user. */
    triggering_actor?: SimpleUser,
  /**
   * The start time of the latest run. Resets on re-run.
   * @format date-time
   */
    run_started_at?: string,
  /** The URL to the jobs for the workflow run. */
    jobs_url: string,
  /** The URL to download the logs for the workflow run. */
    logs_url: string,
  /** The URL to the associated check suite. */
    check_suite_url: string,
  /** The URL to the artifacts for the workflow run. */
    artifacts_url: string,
  /** The URL to cancel the workflow run. */
    cancel_url: string,
  /** The URL to rerun the workflow run. */
    rerun_url: string,
  /** The URL to the previous attempted run of this workflow, if one exists. */
    previous_attempt_url?: string | null,
  /** The URL to the workflow. */
    workflow_url: string,
    head_commit: (null | SimpleCommit),
  /** Minimal Repository */
    repository: MinimalRepository,
  /** Minimal Repository */
    head_repository: MinimalRepository,
    head_repository_id?: number,
  /** The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow. */
    display_title: string,
}

  /**
 * Environment Approval
 * An entry in the reviews log for environment deployments
 */
  export interface EnvironmentApprovals {
  /** The list of environments that were approved or rejected */
    environments: ({
  /** The id of the environment. */
    id?: number,
    node_id?: string,
  /** The name of the environment. */
    name?: string,
    url?: string,
    html_url?: string,
  /**
   * The time that the environment was created, in ISO 8601 format.
   * @format date-time
   */
    created_at?: string,
  /**
   * The time that the environment was last updated, in ISO 8601 format.
   * @format date-time
   */
    updated_at?: string,

})[],
  /** Whether deployment to the environment(s) was approved or rejected or pending (with comments) */
    state: "approved" | "rejected" | "pending",
  /** A GitHub user. */
    user: SimpleUser,
  /** The comment submitted with the deployment review */
    comment: string,
}

    export interface ReviewCustomGatesCommentRequired {
  /** The name of the environment to approve or reject. */
    environment_name: string,
  /** Comment associated with the pending deployment protection rule. **Required when state is not provided.** */
    comment: string,
}

    export interface ReviewCustomGatesStateRequired {
  /** The name of the environment to approve or reject. */
    environment_name: string,
  /** Whether to approve or reject deployment to the specified environments. */
    state: "approved" | "rejected",
  /** Optional comment to include with the review. */
    comment?: string,
}

  /**
 * Pending Deployment
 * Details of a deployment that is waiting for protection rules to pass
 */
  export interface PendingDeployment {
    environment: {
  /**
   * The id of the environment.
   * @format int64
   */
    id?: number,
    node_id?: string,
  /** The name of the environment. */
    name?: string,
    url?: string,
    html_url?: string,

},
  /** The set duration of the wait timer */
    wait_timer: number,
  /**
   * The time that the wait timer began.
   * @format date-time
   */
    wait_timer_started_at: string | null,
  /** Whether the currently authenticated user can approve the deployment */
    current_user_can_approve: boolean,
  /** The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
    reviewers: ({
  /** The type of reviewer. */
    type?: DeploymentReviewerType,
    reviewer?: (SimpleUser | Team),

})[],
}

  /**
 * Deployment
 * A request for a specific ref(branch,sha,tag) to be deployed
 */
  export interface Deployment {
  /** @format uri */
    url: string,
  /**
   * Unique identifier of the deployment
   * @format int64
   */
    id: number,
    node_id: string,
    sha: string,
  /** The ref to deploy. This can be a branch, tag, or sha. */
    ref: string,
  /** Parameter to specify a task to execute */
    task: string,
    payload: (Record<string,any> | string),
    original_environment?: string,
  /** Name for the target deployment environment. */
    environment: string,
    description: string | null,
    creator: (null | SimpleUser),
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    statuses_url: string,
  /** @format uri */
    repository_url: string,
  /** Specifies if the given environment is will no longer exist at some point in the future. Default: false. */
    transient_environment?: boolean,
  /** Specifies if the given environment is one that end-users directly interact with. Default: false. */
    production_environment?: boolean,
    performed_via_github_app?: (null | Integration),
}

  /**
 * Workflow
 * A GitHub Actions workflow
 */
  export interface Workflow {
    id: number,
    node_id: string,
    name: string,
    path: string,
    state: "active" | "deleted" | "disabled_fork" | "disabled_inactivity" | "disabled_manually",
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
    url: string,
    html_url: string,
    badge_url: string,
  /** @format date-time */
    deleted_at?: string,
}

  /**
 * Activity
 * Activity
 */
  export interface Activity {
    id: number,
    node_id: string,
  /** The SHA of the commit before the activity. */
    before: string,
  /** The SHA of the commit after the activity. */
    after: string,
  /** The full Git reference, formatted as `refs/heads/<branch name>`. */
    ref: string,
  /**
   * The time when the activity occurred.
   * @format date-time
   */
    timestamp: string,
  /** The type of the activity that was performed. */
    activity_type: "push" | "force_push" | "branch_deletion" | "branch_creation" | "pr_merge" | "merge_queue_merge",
    actor: (null | SimpleUser),
}

  /**
 * Autolink reference
 * An autolink reference.
 */
  export interface Autolink {
    id: number,
  /** The prefix of a key that is linkified. */
    key_prefix: string,
  /** A template for the target URL that is generated if a key was found. */
    url_template: string,
  /** Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters. */
    is_alphanumeric: boolean,
}

  /**
 * Check Dependabot security updates
 * Check Dependabot security updates
 */
  export interface CheckAutomatedSecurityFixes {
  /** Whether Dependabot security updates are enabled for the repository. */
    enabled: boolean,
  /** Whether Dependabot security updates are paused for the repository. */
    paused: boolean,
}

  /**
 * Protected Branch Required Status Check
 * Protected Branch Required Status Check
 */
  export interface ProtectedBranchRequiredStatusCheck {
    url?: string,
    enforcement_level?: string,
    contexts: (string)[],
    checks: ({
    context: string,
    app_id: number | null,

})[],
    contexts_url?: string,
    strict?: boolean,
}

  /**
 * Protected Branch Admin Enforced
 * Protected Branch Admin Enforced
 */
  export interface ProtectedBranchAdminEnforced {
  /** @format uri */
    url: string,
    enabled: boolean,
}

  /**
 * Protected Branch Pull Request Review
 * Protected Branch Pull Request Review
 */
  export interface ProtectedBranchPullRequestReview {
  /** @format uri */
    url?: string,
    dismissal_restrictions?: {
  /** The list of users with review dismissal access. */
    users?: (SimpleUser)[],
  /** The list of teams with review dismissal access. */
    teams?: (Team)[],
  /** The list of apps with review dismissal access. */
    apps?: (Integration)[],
    url?: string,
    users_url?: string,
    teams_url?: string,

},
  /** Allow specific users, teams, or apps to bypass pull request requirements. */
    bypass_pull_request_allowances?: {
  /** The list of users allowed to bypass pull request requirements. */
    users?: (SimpleUser)[],
  /** The list of teams allowed to bypass pull request requirements. */
    teams?: (Team)[],
  /** The list of apps allowed to bypass pull request requirements. */
    apps?: (Integration)[],

},
    dismiss_stale_reviews: boolean,
    require_code_owner_reviews: boolean,
  /**
   * @min 0
   * @max 6
   */
    required_approving_review_count?: number,
  /**
   * Whether the most recent push must be approved by someone other than the person who pushed it.
   * @default false
   */
    require_last_push_approval?: boolean,
}

  /**
 * Branch Restriction Policy
 * Branch Restriction Policy
 */
  export interface BranchRestrictionPolicy {
  /** @format uri */
    url: string,
  /** @format uri */
    users_url: string,
  /** @format uri */
    teams_url: string,
  /** @format uri */
    apps_url: string,
    users: ({
    login?: string,
  /** @format int64 */
    id?: number,
    node_id?: string,
    avatar_url?: string,
    gravatar_id?: string,
    url?: string,
    html_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    starred_url?: string,
    subscriptions_url?: string,
    organizations_url?: string,
    repos_url?: string,
    events_url?: string,
    received_events_url?: string,
    type?: string,
    site_admin?: boolean,
    user_view_type?: string,

})[],
    teams: ({
    id?: number,
    node_id?: string,
    url?: string,
    html_url?: string,
    name?: string,
    slug?: string,
    description?: string | null,
    privacy?: string,
    notification_setting?: string,
    permission?: string,
    members_url?: string,
    repositories_url?: string,
    parent?: string | null,

})[],
    apps: ({
    id?: number,
    slug?: string,
    node_id?: string,
    owner?: {
    login?: string,
    id?: number,
    node_id?: string,
    url?: string,
    repos_url?: string,
    events_url?: string,
    hooks_url?: string,
    issues_url?: string,
    members_url?: string,
    public_members_url?: string,
    avatar_url?: string,
    description?: string,
    gravatar_id?: string,
    html_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    starred_url?: string,
    subscriptions_url?: string,
    organizations_url?: string,
    received_events_url?: string,
    type?: string,
    site_admin?: boolean,
    user_view_type?: string,

},
    name?: string,
    client_id?: string,
    description?: string,
    external_url?: string,
    html_url?: string,
    created_at?: string,
    updated_at?: string,
    permissions?: {
    metadata?: string,
    contents?: string,
    issues?: string,
    single_file?: string,

},
    events?: (string)[],

})[],
}

  /**
 * Branch Protection
 * Branch Protection
 */
  export interface BranchProtection {
    url?: string,
    enabled?: boolean,
  /** Protected Branch Required Status Check */
    required_status_checks?: ProtectedBranchRequiredStatusCheck,
  /** Protected Branch Admin Enforced */
    enforce_admins?: ProtectedBranchAdminEnforced,
  /** Protected Branch Pull Request Review */
    required_pull_request_reviews?: ProtectedBranchPullRequestReview,
  /** Branch Restriction Policy */
    restrictions?: BranchRestrictionPolicy,
    required_linear_history?: {
    enabled?: boolean,

},
    allow_force_pushes?: {
    enabled?: boolean,

},
    allow_deletions?: {
    enabled?: boolean,

},
    block_creations?: {
    enabled?: boolean,

},
    required_conversation_resolution?: {
    enabled?: boolean,

},
    name?: string,
    protection_url?: string,
    required_signatures?: {
  /** @format uri */
    url: string,
    enabled: boolean,

},
  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
    lock_branch?: {
  /** @default false */
    enabled?: boolean,

},
  /** Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
    allow_fork_syncing?: {
  /** @default false */
    enabled?: boolean,

},
}

  /**
 * Short Branch
 * Short Branch
 */
  export interface ShortBranch {
    name: string,
    commit: {
    sha: string,
  /** @format uri */
    url: string,

},
    protected: boolean,
  /** Branch Protection */
    protection?: BranchProtection,
  /** @format uri */
    protection_url?: string,
}

  /**
 * Git User
 * Metaproperties for Git author/committer information.
 */
  export interface GitUser {
    name?: string,
    email?: string,
    date?: string,
}

  /** Verification */
  export interface Verification {
    verified: boolean,
    reason: string,
    payload: string | null,
    signature: string | null,
    verified_at: string | null,
}

  /**
 * Diff Entry
 * Diff Entry
 */
  export interface DiffEntry {
    sha: string,
    filename: string,
    status: "added" | "removed" | "modified" | "renamed" | "copied" | "changed" | "unchanged",
    additions: number,
    deletions: number,
    changes: number,
  /** @format uri */
    blob_url: string,
  /** @format uri */
    raw_url: string,
  /** @format uri */
    contents_url: string,
    patch?: string,
    previous_filename?: string,
}

  /**
 * Commit
 * Commit
 */
  export interface Commit {
  /** @format uri */
    url: string,
    sha: string,
    node_id: string,
  /** @format uri */
    html_url: string,
  /** @format uri */
    comments_url: string,
    commit: {
  /** @format uri */
    url: string,
    author: (null | GitUser),
    committer: (null | GitUser),
    message: string,
    comment_count: number,
    tree: {
    sha: string,
  /** @format uri */
    url: string,

},
    verification?: Verification,

},
    author: (SimpleUser | EmptyObject),
    committer: (SimpleUser | EmptyObject),
    parents: ({
    sha: string,
  /** @format uri */
    url: string,
  /** @format uri */
    html_url?: string,

})[],
    stats?: {
    additions?: number,
    deletions?: number,
    total?: number,

},
    files?: (DiffEntry)[],
}

  /**
 * Branch With Protection
 * Branch With Protection
 */
  export interface BranchWithProtection {
    name: string,
  /** Commit */
    commit: Commit,
    _links: {
    html: string,
  /** @format uri */
    self: string,

},
    protected: boolean,
  /** Branch Protection */
    protection: BranchProtection,
  /** @format uri */
    protection_url: string,
    pattern?: string,
    required_approving_review_count?: number,
}

  /**
 * Status Check Policy
 * Status Check Policy
 */
  export interface StatusCheckPolicy {
  /** @format uri */
    url: string,
    strict: boolean,
    contexts: (string)[],
    checks: ({
    context: string,
    app_id: number | null,

})[],
  /** @format uri */
    contexts_url: string,
}

  /**
 * Protected Branch
 * Branch protections protect branches
 */
  export interface ProtectedBranch {
  /** @format uri */
    url: string,
  /** Status Check Policy */
    required_status_checks?: StatusCheckPolicy,
    required_pull_request_reviews?: {
  /** @format uri */
    url: string,
    dismiss_stale_reviews?: boolean,
    require_code_owner_reviews?: boolean,
    required_approving_review_count?: number,
  /**
   * Whether the most recent push must be approved by someone other than the person who pushed it.
   * @default false
   */
    require_last_push_approval?: boolean,
    dismissal_restrictions?: {
  /** @format uri */
    url: string,
  /** @format uri */
    users_url: string,
  /** @format uri */
    teams_url: string,
    users: (SimpleUser)[],
    teams: (Team)[],
    apps?: (Integration)[],

},
    bypass_pull_request_allowances?: {
    users: (SimpleUser)[],
    teams: (Team)[],
    apps?: (Integration)[],

},

},
    required_signatures?: {
  /** @format uri */
    url: string,
    enabled: boolean,

},
    enforce_admins?: {
  /** @format uri */
    url: string,
    enabled: boolean,

},
    required_linear_history?: {
    enabled: boolean,

},
    allow_force_pushes?: {
    enabled: boolean,

},
    allow_deletions?: {
    enabled: boolean,

},
  /** Branch Restriction Policy */
    restrictions?: BranchRestrictionPolicy,
    required_conversation_resolution?: {
    enabled?: boolean,

},
    block_creations?: {
    enabled: boolean,

},
  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
    lock_branch?: {
  /** @default false */
    enabled?: boolean,

},
  /** Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
    allow_fork_syncing?: {
  /** @default false */
    enabled?: boolean,

},
}

  /**
 * Deployment
 * A deployment created as the result of an Actions check run from a workflow that references an environment
 */
  export interface DeploymentSimple {
  /** @format uri */
    url: string,
  /** Unique identifier of the deployment */
    id: number,
    node_id: string,
  /** Parameter to specify a task to execute */
    task: string,
    original_environment?: string,
  /** Name for the target deployment environment. */
    environment: string,
    description: string | null,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    statuses_url: string,
  /** @format uri */
    repository_url: string,
  /** Specifies if the given environment is will no longer exist at some point in the future. Default: false. */
    transient_environment?: boolean,
  /** Specifies if the given environment is one that end-users directly interact with. Default: false. */
    production_environment?: boolean,
    performed_via_github_app?: (null | Integration),
}

  /**
 * CheckRun
 * A check performed on the code of a given code change
 */
  export interface CheckRun {
  /**
   * The id of the check.
   * @format int64
   */
    id: number,
  /** The SHA of the commit that is being checked. */
    head_sha: string,
    node_id: string,
    external_id: string | null,
    url: string,
    html_url: string | null,
    details_url: string | null,
  /** The phase of the lifecycle that the check is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check runs. */
    status: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending",
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required",
  /** @format date-time */
    started_at: string | null,
  /** @format date-time */
    completed_at: string | null,
    output: {
    title: string | null,
    summary: string | null,
    text: string | null,
    annotations_count: number,
  /** @format uri */
    annotations_url: string,

},
  /** The name of the check. */
    name: string,
    check_suite: {
    id: number,

},
    app: (null | Integration),
  /** Pull requests that are open with a `head_sha` or `head_branch` that matches the check. The returned pull requests do not necessarily indicate pull requests that triggered the check. */
    pull_requests: (PullRequestMinimal)[],
  /** A deployment created as the result of an Actions check run from a workflow that references an environment */
    deployment?: DeploymentSimple,
}

  /**
 * Check Annotation
 * Check Annotation
 */
  export interface CheckAnnotation {
    path: string,
    start_line: number,
    end_line: number,
    start_column: number | null,
    end_column: number | null,
    annotation_level: string | null,
    title: string | null,
    message: string | null,
    raw_details: string | null,
    blob_href: string,
}

  /**
 * CheckSuite
 * A suite of checks performed on the code of a given code change
 */
  export interface CheckSuite {
  /** @format int64 */
    id: number,
    node_id: string,
    head_branch: string | null,
  /** The SHA of the head commit that is being checked. */
    head_sha: string,
  /** The phase of the lifecycle that the check suite is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check suites. */
    status: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending",
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required" | "startup_failure" | "stale",
    url: string | null,
    before: string | null,
    after: string | null,
    pull_requests: (any)[] | null,
    app: (null | Integration),
  /** Minimal Repository */
    repository: MinimalRepository,
  /** @format date-time */
    created_at: string | null,
  /** @format date-time */
    updated_at: string | null,
  /** A commit. */
    head_commit: SimpleCommit,
    latest_check_runs_count: number,
    check_runs_url: string,
    rerequestable?: boolean,
    runs_rerequestable?: boolean,
}

  /**
 * Check Suite Preference
 * Check suite configuration preferences for a repository.
 */
  export interface CheckSuitePreference {
    preferences: {
    auto_trigger_checks?: ({
    app_id: number,
    setting: boolean,

})[],

},
  /** Minimal Repository */
    repository: MinimalRepository,
}

    export interface CodeScanningAlertItems {
  /** The security alert number. */
    number: AlertNumber,
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    created_at: AlertCreatedAt,
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    updated_at?: AlertUpdatedAt,
  /** The REST API URL of the alert resource. */
    url: AlertUrl,
  /** The GitHub URL of the alert resource. */
    html_url: AlertHtmlUrl,
  /** The REST API URL for fetching the list of instances for an alert. */
    instances_url: AlertInstancesUrl,
  /** State of a code scanning alert. */
    state: CodeScanningAlertState,
  /** The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: AlertFixedAt,
    dismissed_by: (null | SimpleUser),
  /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    dismissed_at: AlertDismissedAt,
  /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */
    dismissed_reason: CodeScanningAlertDismissedReason,
  /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment,
    rule: CodeScanningAlertRuleSummary,
    tool: CodeScanningAnalysisTool,
    most_recent_instance: CodeScanningAlertInstance,
    dismissal_approved_by?: (null | SimpleUser),
}

    export interface CodeScanningAlertRule {
  /** A unique identifier for the rule used to detect the alert. */
    id?: string | null,
  /** The name of the rule used to detect the alert. */
    name?: string,
  /** The severity of the alert. */
    severity?: "none" | "note" | "warning" | "error",
  /** The security severity of the alert. */
    security_severity_level?: "low" | "medium" | "high" | "critical",
  /** A short description of the rule used to detect the alert. */
    description?: string,
  /** A description of the rule used to detect the alert. */
    full_description?: string,
  /** A set of tags applicable for the rule. */
    tags?: (any)[] | null,
  /** Detailed documentation for the rule as GitHub Flavored Markdown. */
    help?: string | null,
  /** A link to the documentation for the rule used to detect the alert. */
    help_uri?: string | null,
}

    export interface CodeScanningAlert {
  /** The security alert number. */
    number: AlertNumber,
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    created_at: AlertCreatedAt,
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    updated_at?: AlertUpdatedAt,
  /** The REST API URL of the alert resource. */
    url: AlertUrl,
  /** The GitHub URL of the alert resource. */
    html_url: AlertHtmlUrl,
  /** The REST API URL for fetching the list of instances for an alert. */
    instances_url: AlertInstancesUrl,
  /** State of a code scanning alert. */
    state: CodeScanningAlertState,
  /** The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: AlertFixedAt,
    dismissed_by: (null | SimpleUser),
  /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    dismissed_at: AlertDismissedAt,
  /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */
    dismissed_reason: CodeScanningAlertDismissedReason,
  /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment,
    rule: CodeScanningAlertRule,
    tool: CodeScanningAnalysisTool,
    most_recent_instance: CodeScanningAlertInstance,
    dismissal_approved_by?: (null | SimpleUser),
}

  /** An identifier for the upload. */
  export type CodeScanningAnalysisSarifId = string

  /**
 * The SHA of the commit to which the analysis you are uploading relates.
 * @minLength 40
 * @maxLength 40
 * @pattern ^[0-9a-fA-F]+$
 */
  export type CodeScanningAnalysisCommitSha = string

  /** Identifies the variable values associated with the environment in which this analysis was performed. */
  export type CodeScanningAnalysisEnvironment = string

  /**
 * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @format date-time
 */
  export type CodeScanningAnalysisCreatedAt = string

  /**
 * The REST API URL of the analysis resource.
 * @format uri
 */
  export type CodeScanningAnalysisUrl = string

    export interface CodeScanningAnalysis {
  /**
   * The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,
   * `refs/heads/<branch name>` or simply `<branch name>`.
   */
    ref: CodeScanningRef,
  /** The SHA of the commit to which the analysis you are uploading relates. */
    commit_sha: CodeScanningAnalysisCommitSha,
  /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
    analysis_key: CodeScanningAnalysisAnalysisKey,
  /** Identifies the variable values associated with the environment in which this analysis was performed. */
    environment: CodeScanningAnalysisEnvironment,
  /** Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
    category?: CodeScanningAnalysisCategory,
    error: string,
  /** The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    created_at: CodeScanningAnalysisCreatedAt,
  /** The total number of results in the analysis. */
    results_count: number,
  /** The total number of rules used in the analysis. */
    rules_count: number,
  /** Unique identifier for this analysis. */
    id: number,
  /** The REST API URL of the analysis resource. */
    url: CodeScanningAnalysisUrl,
  /** An identifier for the upload. */
    sarif_id: CodeScanningAnalysisSarifId,
    tool: CodeScanningAnalysisTool,
    deletable: boolean,
  /** Warning generated when processing the analysis */
    warning: string,
}

  /**
 * Analysis deletion
 * Successful deletion of a code scanning analysis
 */
  export interface CodeScanningAnalysisDeletion {
  /**
   * Next deletable analysis in chain, without last analysis deletion confirmation
   * @format uri
   */
    next_analysis_url: string | null,
  /**
   * Next deletable analysis in chain, with last analysis deletion confirmation
   * @format uri
   */
    confirm_delete_url: string | null,
}

  /** Configuration for code scanning default setup. */
  export interface CodeScanningDefaultSetup {
  /** Code scanning default setup has been configured or not. */
    state?: "configured" | "not-configured",
  /** Languages to be analyzed. */
    languages?: ("actions" | "c-cpp" | "csharp" | "go" | "java-kotlin" | "javascript-typescript" | "javascript" | "python" | "ruby" | "typescript" | "swift")[],
  /** Runner type to be used. */
    runner_type?: "standard" | "labeled",
  /** Runner label to be used if the runner type is labeled. */
    runner_label?: string | null,
  /** CodeQL query suite to be used. */
    query_suite?: "default" | "extended",
  /**
   * Timestamp of latest configuration update.
   * @format date-time
   */
    updated_at?: string | null,
  /** The frequency of the periodic analysis. */
    schedule?: "weekly",
}

  /** Configuration for code scanning default setup. */
  export interface CodeScanningDefaultSetupUpdate {
  /** The desired state of code scanning default setup. */
    state?: "configured" | "not-configured",
  /** Runner type to be used. */
    runner_type?: "standard" | "labeled",
  /** Runner label to be used if the runner type is labeled. */
    runner_label?: string | null,
  /** CodeQL query suite to be used. */
    query_suite?: "default" | "extended",
  /** CodeQL languages to be analyzed. */
    languages?: ("actions" | "c-cpp" | "csharp" | "go" | "java-kotlin" | "javascript-typescript" | "python" | "ruby" | "swift")[],
}

  /**
 * You can use `run_url` to track the status of the run. This includes a property status and conclusion.
 * You should not rely on this always being an actions workflow run object.
 */
  export interface CodeScanningDefaultSetupUpdateResponse {
  /** ID of the corresponding run. */
    run_id?: number,
  /** URL of the corresponding run. */
    run_url?: string,
}

  /**
 * The full Git reference, formatted as `refs/heads/<branch name>`,
 * `refs/tags/<tag>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
 * @pattern ^refs/(heads|tags|pull)/.*$
 */
  export type CodeScanningRefFull = string

  /** A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/enterprise-server@3.17/code-security/secure-coding/sarif-support-for-code-scanning)." */
  export type CodeScanningAnalysisSarifFile = string

    export interface CodeScanningSarifsReceipt {
  /** An identifier for the upload. */
    id?: CodeScanningAnalysisSarifId,
  /**
   * The REST API URL for checking the status of the upload.
   * @format uri
   */
    url?: string,
}

    export interface CodeScanningSarifsStatus {
  /** `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed. */
    processing_status?: "pending" | "complete" | "failed",
  /**
   * The REST API URL for getting the analyses associated with the upload.
   * @format uri
   */
    analyses_url?: string | null,
  /** Any errors that ocurred during processing of the delivery. */
    errors?: (any)[] | null,
}

  /** Code security configuration associated with a repository and attachment status */
  export interface CodeSecurityConfigurationForRepository {
  /** The attachment status of the code security configuration on the repository. */
    status?: "attached" | "attaching" | "detached" | "removed" | "enforced" | "failed" | "updating" | "removed_by_enterprise",
  /** A code security configuration */
    configuration?: CodeSecurityConfiguration,
}

  /**
 * CODEOWNERS errors
 * A list of errors found in a repo's CODEOWNERS file
 */
  export interface CodeownersErrors {
    errors: ({
  /** The line number where this errors occurs. */
    line: number,
  /** The column number where this errors occurs. */
    column: number,
  /** The contents of the line where the error occurs. */
    source?: string,
  /** The type of error. */
    kind: string,
  /** Suggested action to fix the error. This will usually be `null`, but is provided for some common errors. */
    suggestion?: string | null,
  /** A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting). */
    message: string,
  /** The path of the file where the error occured. */
    path: string,

})[],
}

  /**
 * Collaborator
 * Collaborator
 */
  export interface Collaborator {
    login: string,
  /** @format int64 */
    id: number,
    email?: string | null,
    name?: string | null,
    node_id: string,
  /** @format uri */
    avatar_url: string,
    gravatar_id: string | null,
  /** @format uri */
    url: string,
  /** @format uri */
    html_url: string,
  /** @format uri */
    followers_url: string,
    following_url: string,
    gists_url: string,
    starred_url: string,
  /** @format uri */
    subscriptions_url: string,
  /** @format uri */
    organizations_url: string,
  /** @format uri */
    repos_url: string,
    events_url: string,
  /** @format uri */
    received_events_url: string,
    type: string,
    site_admin: boolean,
    permissions?: {
    pull: boolean,
    triage?: boolean,
    push: boolean,
    maintain?: boolean,
    admin: boolean,

},
    role_name?: string,
    user_view_type?: string,
}

  /**
 * Repository Collaborator Permission
 * Repository Collaborator Permission
 */
  export interface RepositoryCollaboratorPermission {
    permission: string,
    role_name: string,
    user: (null | Collaborator),
}

  /**
 * Commit Comment
 * Commit Comment
 */
  export interface CommitComment {
  /** @format uri */
    html_url: string,
  /** @format uri */
    url: string,
    id: number,
    node_id: string,
    body: string,
    path: string | null,
    position: number | null,
    line: number | null,
    commit_id: string,
    user: (null | SimpleUser),
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** How the author is associated with the repository. */
    author_association: AuthorAssociation,
    reactions?: ReactionRollup,
}

  /**
 * Branch Short
 * Branch Short
 */
  export interface BranchShort {
    name: string,
    commit: {
    sha: string,
    url: string,

},
    protected: boolean,
}

  /**
 * Link
 * Hypermedia Link
 */
  export interface Link {
    href: string,
}

  /**
 * Auto merge
 * The status of auto merging a pull request.
 */
  export interface AutoMerge {
  /** A GitHub user. */
    enabled_by: SimpleUser,
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",
  /** Title for the merge commit message. */
    commit_title: string,
  /** Commit message for the merge commit. */
    commit_message: string,
}

  /**
 * Pull Request Simple
 * Pull Request Simple
 */
  export interface PullRequestSimple {
  /** @format uri */
    url: string,
  /** @format int64 */
    id: number,
    node_id: string,
  /** @format uri */
    html_url: string,
  /** @format uri */
    diff_url: string,
  /** @format uri */
    patch_url: string,
  /** @format uri */
    issue_url: string,
  /** @format uri */
    commits_url: string,
  /** @format uri */
    review_comments_url: string,
    review_comment_url: string,
  /** @format uri */
    comments_url: string,
  /** @format uri */
    statuses_url: string,
    number: number,
    state: string,
    locked: boolean,
    title: string,
    user: (null | SimpleUser),
    body: string | null,
    labels: ({
  /** @format int64 */
    id: number,
    node_id: string,
    url: string,
    name: string,
    description: string,
    color: string,
    default: boolean,

})[],
    milestone: (null | Milestone),
    active_lock_reason?: string | null,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** @format date-time */
    closed_at: string | null,
  /** @format date-time */
    merged_at: string | null,
    merge_commit_sha: string | null,
    assignee: (null | SimpleUser),
    assignees?: (any)[] | null,
    requested_reviewers?: (any)[] | null,
    requested_teams?: (any)[] | null,
    head: {
    label: string,
    ref: string,
  /** A repository on GitHub. */
    repo: Repository,
    sha: string,
    user: (null | SimpleUser),

},
    base: {
    label: string,
    ref: string,
  /** A repository on GitHub. */
    repo: Repository,
    sha: string,
    user: (null | SimpleUser),

},
    _links: {
  /** Hypermedia Link */
    comments: Link,
  /** Hypermedia Link */
    commits: Link,
  /** Hypermedia Link */
    statuses: Link,
  /** Hypermedia Link */
    html: Link,
  /** Hypermedia Link */
    issue: Link,
  /** Hypermedia Link */
    review_comments: Link,
  /** Hypermedia Link */
    review_comment: Link,
  /** Hypermedia Link */
    self: Link,

},
  /** How the author is associated with the repository. */
    author_association: AuthorAssociation,
  /** The status of auto merging a pull request. */
    auto_merge: AutoMerge,
  /** Indicates whether or not the pull request is a draft. */
    draft?: boolean,
}

  /** Simple Commit Status */
  export interface SimpleCommitStatus {
    description: string | null,
    id: number,
    node_id: string,
    state: string,
    context: string,
  /** @format uri */
    target_url: string | null,
    required?: boolean | null,
  /** @format uri */
    avatar_url: string | null,
  /** @format uri */
    url: string,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
}

  /**
 * Combined Commit Status
 * Combined Commit Status
 */
  export interface CombinedCommitStatus {
    state: string,
    statuses: (SimpleCommitStatus)[],
    sha: string,
    total_count: number,
  /** Minimal Repository */
    repository: MinimalRepository,
  /** @format uri */
    commit_url: string,
  /** @format uri */
    url: string,
}

  /**
 * Status
 * The status of a commit.
 */
  export interface Status {
    url: string,
    avatar_url: string | null,
    id: number,
    node_id: string,
    state: string,
    description: string | null,
    target_url: string | null,
    context: string,
    created_at: string,
    updated_at: string,
    creator: (null | SimpleUser),
}

  /**
 * Commit Comparison
 * Commit Comparison
 */
  export interface CommitComparison {
  /** @format uri */
    url: string,
  /** @format uri */
    html_url: string,
  /** @format uri */
    permalink_url: string,
  /** @format uri */
    diff_url: string,
  /** @format uri */
    patch_url: string,
  /** Commit */
    base_commit: Commit,
  /** Commit */
    merge_base_commit: Commit,
    status: "diverged" | "ahead" | "behind" | "identical",
    ahead_by: number,
    behind_by: number,
    total_commits: number,
    commits: (Commit)[],
    files?: (DiffEntry)[],
}

  /**
 * Content Tree
 * Content Tree
 */
  export interface ContentTree {
    type: string,
    size: number,
    name: string,
    path: string,
    sha: string,
    content?: string,
  /** @format uri */
    url: string,
  /** @format uri */
    git_url: string | null,
  /** @format uri */
    html_url: string | null,
  /** @format uri */
    download_url: string | null,
    entries?: ({
    type: string,
    size: number,
    name: string,
    path: string,
    sha: string,
  /** @format uri */
    url: string,
  /** @format uri */
    git_url: string | null,
  /** @format uri */
    html_url: string | null,
  /** @format uri */
    download_url: string | null,
    _links: {
  /** @format uri */
    git: string | null,
  /** @format uri */
    html: string | null,
  /** @format uri */
    self: string,

},

})[],
    encoding?: string,
    _links: {
  /** @format uri */
    git: string | null,
  /** @format uri */
    html: string | null,
  /** @format uri */
    self: string,

},
}

  /**
 * Content Directory
 * A list of directory items
 */
  export type ContentDirectory = ({
    type: "dir" | "file" | "submodule" | "symlink",
    size: number,
    name: string,
    path: string,
    content?: string,
    sha: string,
  /** @format uri */
    url: string,
  /** @format uri */
    git_url: string | null,
  /** @format uri */
    html_url: string | null,
  /** @format uri */
    download_url: string | null,
    _links: {
  /** @format uri */
    git: string | null,
  /** @format uri */
    html: string | null,
  /** @format uri */
    self: string,

},

})[]

  /**
 * Content File
 * Content File
 */
  export interface ContentFile {
    type: "file",
    encoding: string,
    size: number,
    name: string,
    path: string,
    content: string,
    sha: string,
  /** @format uri */
    url: string,
  /** @format uri */
    git_url: string | null,
  /** @format uri */
    html_url: string | null,
  /** @format uri */
    download_url: string | null,
    _links: {
  /** @format uri */
    git: string | null,
  /** @format uri */
    html: string | null,
  /** @format uri */
    self: string,

},
    target?: string,
    submodule_git_url?: string,
}

  /**
 * Symlink Content
 * An object describing a symlink
 */
  export interface ContentSymlink {
    type: "symlink",
    target: string,
    size: number,
    name: string,
    path: string,
    sha: string,
  /** @format uri */
    url: string,
  /** @format uri */
    git_url: string | null,
  /** @format uri */
    html_url: string | null,
  /** @format uri */
    download_url: string | null,
    _links: {
  /** @format uri */
    git: string | null,
  /** @format uri */
    html: string | null,
  /** @format uri */
    self: string,

},
}

  /**
 * Submodule Content
 * An object describing a submodule
 */
  export interface ContentSubmodule {
    type: "submodule",
  /** @format uri */
    submodule_git_url: string,
    size: number,
    name: string,
    path: string,
    sha: string,
  /** @format uri */
    url: string,
  /** @format uri */
    git_url: string | null,
  /** @format uri */
    html_url: string | null,
  /** @format uri */
    download_url: string | null,
    _links: {
  /** @format uri */
    git: string | null,
  /** @format uri */
    html: string | null,
  /** @format uri */
    self: string,

},
}

  /**
 * File Commit
 * File Commit
 */
  export interface FileCommit {
    content: {
    name?: string,
    path?: string,
    sha?: string,
    size?: number,
    url?: string,
    html_url?: string,
    git_url?: string,
    download_url?: string,
    type?: string,
    _links?: {
    self?: string,
    git?: string,
    html?: string,

},

},
    commit: {
    sha?: string,
    node_id?: string,
    url?: string,
    html_url?: string,
    author?: {
    date?: string,
    name?: string,
    email?: string,

},
    committer?: {
    date?: string,
    name?: string,
    email?: string,

},
    message?: string,
    tree?: {
    url?: string,
    sha?: string,

},
    parents?: ({
    url?: string,
    html_url?: string,
    sha?: string,

})[],
    verification?: {
    verified?: boolean,
    reason?: string,
    signature?: string | null,
    payload?: string | null,
    verified_at?: string | null,

},

},
}

  /** The ID of the push protection bypass placeholder. This value is returned on any push protected routes. */
  export type SecretScanningPushProtectionBypassPlaceholderId = string

  /** Repository rule violation was detected */
  export interface RepositoryRuleViolationError {
    message?: string,
    documentation_url?: string,
    status?: string,
    metadata?: {
    secret_scanning?: {
    bypass_placeholders?: ({
  /** The ID of the push protection bypass placeholder. This value is returned on any push protected routes. */
    placeholder_id?: SecretScanningPushProtectionBypassPlaceholderId,
    token_type?: string,

})[],

},

},
}

  /**
 * Contributor
 * Contributor
 */
  export interface Contributor {
    login?: string,
    id?: number,
    node_id?: string,
  /** @format uri */
    avatar_url?: string,
    gravatar_id?: string | null,
  /** @format uri */
    url?: string,
  /** @format uri */
    html_url?: string,
  /** @format uri */
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    repos_url?: string,
    events_url?: string,
  /** @format uri */
    received_events_url?: string,
    type: string,
    site_admin?: boolean,
    contributions: number,
    email?: string,
    name?: string,
    user_view_type?: string,
}

  /** A Dependabot alert. */
  export interface DependabotAlert {
  /** The security alert number. */
    number: AlertNumber,
  /** The state of the Dependabot alert. */
    state: "auto_dismissed" | "dismissed" | "fixed" | "open",
  /** Details for the vulnerable dependency. */
    dependency: {
  /** Details for the vulnerable package. */
    package?: DependabotAlertPackage,
  /** The full path to the dependency manifest file, relative to the root of the repository. */
    manifest_path?: string,
  /** The execution scope of the vulnerable dependency. */
    scope?: "development" | "runtime",

},
  /** Details for the GitHub Security Advisory. */
    security_advisory: DependabotAlertSecurityAdvisory,
  /** Details pertaining to one vulnerable version range for the advisory. */
    security_vulnerability: DependabotAlertSecurityVulnerability,
  /** The REST API URL of the alert resource. */
    url: AlertUrl,
  /** The GitHub URL of the alert resource. */
    html_url: AlertHtmlUrl,
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    created_at: AlertCreatedAt,
  /** The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    updated_at: AlertUpdatedAt,
  /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    dismissed_at: AlertDismissedAt,
    dismissed_by: (null | SimpleUser),
  /** The reason that the alert was dismissed. */
    dismissed_reason: "fix_started" | "inaccurate" | "no_bandwidth" | "not_used" | "tolerable_risk",
  /**
   * An optional comment associated with the alert's dismissal.
   * @maxLength 280
   */
    dismissed_comment: string | null,
  /** The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at: AlertFixedAt,
  /** The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    auto_dismissed_at?: AlertAutoDismissedAt,
}

  /**
 * Dependabot Secret
 * Set secrets for Dependabot.
 */
  export interface DependabotSecret {
  /** The name of the secret. */
    name: string,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
}

  /**
 * Dependency Graph Diff
 * A diff of the dependencies between two commits.
 */
  export type DependencyGraphDiff = ({
    change_type: "added" | "removed",
    manifest: string,
    ecosystem: string,
    name: string,
    version: string,
    package_url: string | null,
    license: string | null,
    source_repository_url: string | null,
    vulnerabilities: ({
    severity: string,
    advisory_ghsa_id: string,
    advisory_summary: string,
    advisory_url: string,

})[],
  /** Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment. */
    scope: "unknown" | "runtime" | "development",

})[]

  /**
 * Dependency Graph SPDX SBOM
 * A schema for the SPDX JSON format returned by the Dependency Graph.
 */
  export interface DependencyGraphSpdxSbom {
    sbom: {
  /** The SPDX identifier for the SPDX document. */
    SPDXID: string,
  /** The version of the SPDX specification that this document conforms to. */
    spdxVersion: string,
  /** An optional comment about the SPDX document. */
    comment?: string,
    creationInfo: {
  /** The date and time the SPDX document was created. */
    created: string,
  /** The tools that were used to generate the SPDX document. */
    creators: (string)[],

},
  /** The name of the SPDX document. */
    name: string,
  /** The license under which the SPDX document is licensed. */
    dataLicense: string,
  /** The namespace for the SPDX document. */
    documentNamespace: string,
    packages: ({
  /** A unique SPDX identifier for the package. */
    SPDXID?: string,
  /** The name of the package. */
    name?: string,
  /**
   * The version of the package. If the package does not have an exact version specified,
   * a version range is given.
   */
    versionInfo?: string,
  /**
   * The location where the package can be downloaded,
   * or NOASSERTION if this has not been determined.
   */
    downloadLocation?: string,
  /**
   * Whether the package's file content has been subjected to
   * analysis during the creation of the SPDX document.
   */
    filesAnalyzed?: boolean,
  /** The license of the package as determined while creating the SPDX document. */
    licenseConcluded?: string,
  /**
   * The license of the package as declared by its author, or NOASSERTION if this information
   * was not available when the SPDX document was created.
   */
    licenseDeclared?: string,
  /** The distribution source of this package, or NOASSERTION if this was not determined. */
    supplier?: string,
  /** The copyright holders of the package, and any dates present with those notices, if available. */
    copyrightText?: string,
    externalRefs?: ({
  /** The category of reference to an external resource this reference refers to. */
    referenceCategory: string,
  /** A locator for the particular external resource this reference refers to. */
    referenceLocator: string,
  /** The category of reference to an external resource this reference refers to. */
    referenceType: string,

})[],

})[],
    relationships?: ({
  /** The type of relationship between the two SPDX elements. */
    relationshipType?: string,
  /** The SPDX identifier of the package that is the source of the relationship. */
    spdxElementId?: string,
  /** The SPDX identifier of the package that is the target of the relationship. */
    relatedSpdxElement?: string,

})[],

},
}

  /**
 * metadata
 * User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
 */
  export type Metadata = Record<string,(string | number | boolean)>

    export interface Dependency {
  /**
   * Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.
   * @pattern ^pkg
   */
    package_url?: string,
  /** User-defined metadata to store domain-specific information limited to 8 keys with scalar values. */
    metadata?: Metadata,
  /** A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency. */
    relationship?: "direct" | "indirect",
  /** A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes. */
    scope?: "runtime" | "development",
  /** Array of package-url (PURLs) of direct child dependencies. */
    dependencies?: (string)[],
}

    export interface Manifest {
  /** The name of the manifest. */
    name: string,
    file?: {
  /** The path of the manifest file relative to the root of the Git repository. */
    source_location?: string,

},
  /** User-defined metadata to store domain-specific information limited to 8 keys with scalar values. */
    metadata?: Metadata,
  /** A collection of resolved package dependencies. */
    resolved?: Record<string,Dependency>,
}

  /**
 * snapshot
 * Create a new snapshot of a repository's dependencies.
 */
  export interface Snapshot {
  /** The version of the repository snapshot submission. */
    version: number,
    job: {
  /** The external ID of the job. */
    id: string,
  /** Correlator provides a key that is used to group snapshots submitted over time. Only the "latest" submitted snapshot for a given combination of `job.correlator` and `detector.name` will be considered when calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given "wave" of CI workflow you run. If you're using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build matrix, then you'll also need to add additional key(s) to distinguish between each submission inside a matrix variation. */
    correlator: string,
  /** The url for the job. */
    html_url?: string,

},
  /**
   * The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.
   * @minLength 40
   * @maxLength 40
   */
    sha: string,
  /**
   * The repository branch that triggered this snapshot.
   * @pattern ^refs/
   */
    ref: string,
  /** A description of the detector used. */
    detector: {
  /** The name of the detector used. */
    name: string,
  /** The version of the detector used. */
    version: string,
  /** The url of the detector used. */
    url: string,

},
  /** User-defined metadata to store domain-specific information limited to 8 keys with scalar values. */
    metadata?: Metadata,
  /** A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies. */
    manifests?: Record<string,Manifest>,
  /**
   * The time at which the snapshot was scanned.
   * @format date-time
   */
    scanned: string,
}

  /**
 * Deployment Status
 * The status of a deployment.
 */
  export interface DeploymentStatus {
  /** @format uri */
    url: string,
  /** @format int64 */
    id: number,
    node_id: string,
  /** The state of the status. */
    state: "error" | "failure" | "inactive" | "pending" | "success" | "queued" | "in_progress",
    creator: (null | SimpleUser),
  /**
   * A short description of the status.
   * @maxLength 140
   * @default ""
   */
    description: string,
  /**
   * The environment of the deployment that the status is for.
   * @default ""
   */
    environment?: string,
  /**
   * Closing down notice: the URL to associate with this status.
   * @format uri
   * @default ""
   */
    target_url: string,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    deployment_url: string,
  /** @format uri */
    repository_url: string,
  /**
   * The URL for accessing your environment.
   * @format uri
   * @default ""
   */
    environment_url?: string,
  /**
   * The URL to associate with this status.
   * @format uri
   * @default ""
   */
    log_url?: string,
    performed_via_github_app?: (null | Integration),
}

  /** The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days). */
  export type WaitTimer = number

  /** The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`. */
  export interface DeploymentBranchPolicySettings {
  /** Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`. */
    protected_branches: boolean,
  /** Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`. */
    custom_branch_policies: boolean,
}

  /**
 * Environment
 * Details of a deployment environment
 */
  export interface Environment {
  /**
   * The id of the environment.
   * @format int64
   */
    id: number,
    node_id: string,
  /** The name of the environment. */
    name: string,
    url: string,
    html_url: string,
  /**
   * The time that the environment was created, in ISO 8601 format.
   * @format date-time
   */
    created_at: string,
  /**
   * The time that the environment was last updated, in ISO 8601 format.
   * @format date-time
   */
    updated_at: string,
  /** Built-in deployment protection rules for the environment. */
    protection_rules?: (({
    id: number,
    node_id: string,
    type: string,
  /** The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days). */
    wait_timer?: WaitTimer,

} | {
    id: number,
    node_id: string,
  /** Whether deployments to this environment can be approved by the user who created the deployment. */
    prevent_self_review?: boolean,
    type: string,
  /** The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
    reviewers?: ({
  /** The type of reviewer. */
    type?: DeploymentReviewerType,
    reviewer?: (SimpleUser | Team),

})[],

} | {
    id: number,
    node_id: string,
    type: string,

}))[],
  /** The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`. */
    deployment_branch_policy?: DeploymentBranchPolicySettings,
}

  /** Whether or not a user who created the job is prevented from approving their own job. */
  export type PreventSelfReview = boolean

  /**
 * Deployment branch policy
 * Details of a deployment branch or tag policy.
 */
  export interface DeploymentBranchPolicy {
  /** The unique identifier of the branch or tag policy. */
    id?: number,
    node_id?: string,
  /** The name pattern that branches or tags must match in order to deploy to the environment. */
    name?: string,
  /** Whether this rule targets a branch or tag. */
    type?: "branch" | "tag",
}

  /** Deployment branch and tag policy name pattern */
  export interface DeploymentBranchPolicyNamePatternWithType {
  /**
   * The name pattern that branches or tags must match in order to deploy to the environment.
   * 
   * Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`.
   * For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
   */
    name: string,
  /** Whether this rule targets a branch or tag */
    type?: "branch" | "tag",
}

  /** Deployment branch policy name pattern */
  export interface DeploymentBranchPolicyNamePattern {
  /**
   * The name pattern that branches must match in order to deploy to the environment.
   * 
   * Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`.
   * For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
   */
    name: string,
}

  /**
 * Custom deployment protection rule app
 * A GitHub App that is providing a custom deployment protection rule.
 */
  export interface CustomDeploymentRuleApp {
  /** The unique identifier of the deployment protection rule integration. */
    id: number,
  /** The slugified name of the deployment protection rule integration. */
    slug: string,
  /** The URL for the endpoint to get details about the app. */
    integration_url: string,
  /** The node ID for the deployment protection rule integration. */
    node_id: string,
}

  /**
 * Deployment protection rule
 * Deployment protection rule
 */
  export interface DeploymentProtectionRule {
  /** The unique identifier for the deployment protection rule. */
    id: number,
  /** The node ID for the deployment protection rule. */
    node_id: string,
  /** Whether the deployment protection rule is enabled for the environment. */
    enabled: boolean,
  /** A GitHub App that is providing a custom deployment protection rule. */
    app: CustomDeploymentRuleApp,
}

  /**
 * Short Blob
 * Short Blob
 */
  export interface ShortBlob {
    url: string,
    sha: string,
}

  /**
 * Blob
 * Blob
 */
  export interface Blob {
    content: string,
    encoding: string,
  /** @format uri */
    url: string,
    sha: string,
    size: number | null,
    node_id: string,
    highlighted_content?: string,
}

  /**
 * Git Commit
 * Low-level Git commit operations within a repository
 */
  export interface GitCommit {
  /** SHA for the commit */
    sha: string,
    node_id: string,
  /** @format uri */
    url: string,
  /** Identifying information for the git-user */
    author: {
  /**
   * Timestamp of the commit
   * @format date-time
   */
    date: string,
  /** Git email address of the user */
    email: string,
  /** Name of the git user */
    name: string,

},
  /** Identifying information for the git-user */
    committer: {
  /**
   * Timestamp of the commit
   * @format date-time
   */
    date: string,
  /** Git email address of the user */
    email: string,
  /** Name of the git user */
    name: string,

},
  /** Message describing the purpose of the commit */
    message: string,
    tree: {
  /** SHA for the commit */
    sha: string,
  /** @format uri */
    url: string,

},
    parents: ({
  /** SHA for the commit */
    sha: string,
  /** @format uri */
    url: string,
  /** @format uri */
    html_url: string,

})[],
    verification: {
    verified: boolean,
    reason: string,
    signature: string | null,
    payload: string | null,
    verified_at: string | null,

},
  /** @format uri */
    html_url: string,
}

  /**
 * Git Reference
 * Git references within a repository
 */
  export interface GitRef {
    ref: string,
    node_id: string,
  /** @format uri */
    url: string,
    object: {
    type: string,
  /**
   * SHA for the reference
   * @minLength 40
   * @maxLength 40
   */
    sha: string,
  /** @format uri */
    url: string,

},
}

  /**
 * Git Tag
 * Metadata for a Git tag
 */
  export interface GitTag {
    node_id: string,
  /** Name of the tag */
    tag: string,
    sha: string,
  /**
   * URL for the tag
   * @format uri
   */
    url: string,
  /** Message describing the purpose of the tag */
    message: string,
    tagger: {
    date: string,
    email: string,
    name: string,

},
    object: {
    sha: string,
    type: string,
  /** @format uri */
    url: string,

},
    verification?: Verification,
}

  /**
 * Git Tree
 * The hierarchy between files in a Git repository.
 */
  export interface GitTree {
    sha: string,
  /** @format uri */
    url?: string,
    truncated: boolean,
  /** Objects specifying a tree structure */
    tree: ({
    path: string,
    mode: string,
    type: string,
    sha: string,
    size?: number,
    url?: string,

})[],
}

  /** Hook Response */
  export interface HookResponse {
    code: number | null,
    status: string | null,
    message: string | null,
}

  /**
 * Webhook
 * Webhooks for repositories.
 */
  export interface Hook {
    type: string,
  /** Unique identifier of the webhook. */
    id: number,
  /** The name of a valid service, use 'web' for a webhook. */
    name: string,
  /** Determines whether the hook is actually triggered on pushes. */
    active: boolean,
  /** Determines what events the hook is triggered for. Default: ['push']. */
    events: (string)[],
  /** Configuration object of the webhook */
    config: WebhookConfig,
  /** @format date-time */
    updated_at: string,
  /** @format date-time */
    created_at: string,
  /** @format uri */
    url: string,
  /** @format uri */
    test_url: string,
  /** @format uri */
    ping_url: string,
  /** @format uri */
    deliveries_url?: string,
    last_response: HookResponse,
}

  /**
 * Repository Invitation
 * Repository invitations let you manage who you collaborate with.
 */
  export interface RepositoryInvitation {
  /**
   * Unique identifier of the repository invitation.
   * @format int64
   */
    id: number,
  /** Minimal Repository */
    repository: MinimalRepository,
    invitee: (null | SimpleUser),
    inviter: (null | SimpleUser),
  /** The permission associated with the invitation. */
    permissions: "read" | "write" | "admin" | "triage" | "maintain",
  /** @format date-time */
    created_at: string,
  /** Whether or not the invitation has expired */
    expired?: boolean,
  /** URL for the repository invitation */
    url: string,
    html_url: string,
    node_id: string,
}

  /**
 * Issue Event Label
 * Issue Event Label
 */
  export interface IssueEventLabel {
    name: string | null,
    color: string | null,
}

  /** Issue Event Dismissed Review */
  export interface IssueEventDismissedReview {
    state: string,
    review_id: number,
    dismissal_message: string | null,
    dismissal_commit_id?: string | null,
}

  /**
 * Issue Event Milestone
 * Issue Event Milestone
 */
  export interface IssueEventMilestone {
    title: string,
}

  /**
 * Issue Event Project Card
 * Issue Event Project Card
 */
  export interface IssueEventProjectCard {
  /** @format uri */
    url: string,
    id: number,
  /** @format uri */
    project_url: string,
    project_id: number,
    column_name: string,
    previous_column_name?: string,
}

  /**
 * Issue Event Rename
 * Issue Event Rename
 */
  export interface IssueEventRename {
    from: string,
    to: string,
}

  /**
 * Issue Event
 * Issue Event
 */
  export interface IssueEvent {
  /** @format int64 */
    id: number,
    node_id: string,
  /** @format uri */
    url: string,
    actor: (null | SimpleUser),
    event: string,
    commit_id: string | null,
    commit_url: string | null,
  /** @format date-time */
    created_at: string,
    issue?: (null | Issue),
  /** Issue Event Label */
    label?: IssueEventLabel,
    assignee?: (null | SimpleUser),
    assigner?: (null | SimpleUser),
    review_requester?: (null | SimpleUser),
    requested_reviewer?: (null | SimpleUser),
  /** Groups of organization members that gives permissions on specified repositories. */
    requested_team?: Team,
    dismissed_review?: IssueEventDismissedReview,
  /** Issue Event Milestone */
    milestone?: IssueEventMilestone,
  /** Issue Event Project Card */
    project_card?: IssueEventProjectCard,
  /** Issue Event Rename */
    rename?: IssueEventRename,
  /** How the author is associated with the repository. */
    author_association?: AuthorAssociation,
    lock_reason?: string | null,
    performed_via_github_app?: (null | Integration),
}

  /**
 * Labeled Issue Event
 * Labeled Issue Event
 */
  export interface LabeledIssueEvent {
    id: number,
    node_id: string,
    url: string,
  /** A GitHub user. */
    actor: SimpleUser,
    event: string,
    commit_id: string | null,
    commit_url: string | null,
    created_at: string,
    performed_via_github_app: (null | Integration),
    label: {
    name: string,
    color: string,

},
}

  /**
 * Unlabeled Issue Event
 * Unlabeled Issue Event
 */
  export interface UnlabeledIssueEvent {
    id: number,
    node_id: string,
    url: string,
  /** A GitHub user. */
    actor: SimpleUser,
    event: string,
    commit_id: string | null,
    commit_url: string | null,
    created_at: string,
    performed_via_github_app: (null | Integration),
    label: {
    name: string,
    color: string,

},
}

  /**
 * Assigned Issue Event
 * Assigned Issue Event
 */
  export interface AssignedIssueEvent {
    id: number,
    node_id: string,
    url: string,
  /** A GitHub user. */
    actor: SimpleUser,
    event: string,
    commit_id: string | null,
    commit_url: string | null,
    created_at: string,
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
    performed_via_github_app: Integration,
  /** A GitHub user. */
    assignee: SimpleUser,
  /** A GitHub user. */
    assigner: SimpleUser,
}

  /**
 * Unassigned Issue Event
 * Unassigned Issue Event
 */
  export interface UnassignedIssueEvent {
    id: number,
    node_id: string,
    url: string,
  /** A GitHub user. */
    actor: SimpleUser,
    event: string,
    commit_id: string | null,
    commit_url: string | null,
    created_at: string,
    performed_via_github_app: (null | Integration),
  /** A GitHub user. */
    assignee: SimpleUser,
  /** A GitHub user. */
    assigner: SimpleUser,
}

  /**
 * Milestoned Issue Event
 * Milestoned Issue Event
 */
  export interface MilestonedIssueEvent {
    id: number,
    node_id: string,
    url: string,
  /** A GitHub user. */
    actor: SimpleUser,
    event: string,
    commit_id: string | null,
    commit_url: string | null,
    created_at: string,
    performed_via_github_app: (null | Integration),
    milestone: {
    title: string,

},
}

  /**
 * Demilestoned Issue Event
 * Demilestoned Issue Event
 */
  export interface DemilestonedIssueEvent {
    id: number,
    node_id: string,
    url: string,
  /** A GitHub user. */
    actor: SimpleUser,
    event: string,
    commit_id: string | null,
    commit_url: string | null,
    created_at: string,
    performed_via_github_app: (null | Integration),
    milestone: {
    title: string,

},
}

  /**
 * Renamed Issue Event
 * Renamed Issue Event
 */
  export interface RenamedIssueEvent {
    id: number,
    node_id: string,
    url: string,
  /** A GitHub user. */
    actor: SimpleUser,
    event: string,
    commit_id: string | null,
    commit_url: string | null,
    created_at: string,
    performed_via_github_app: (null | Integration),
    rename: {
    from: string,
    to: string,

},
}

  /**
 * Review Requested Issue Event
 * Review Requested Issue Event
 */
  export interface ReviewRequestedIssueEvent {
    id: number,
    node_id: string,
    url: string,
  /** A GitHub user. */
    actor: SimpleUser,
    event: string,
    commit_id: string | null,
    commit_url: string | null,
    created_at: string,
    performed_via_github_app: (null | Integration),
  /** A GitHub user. */
    review_requester: SimpleUser,
  /** Groups of organization members that gives permissions on specified repositories. */
    requested_team?: Team,
  /** A GitHub user. */
    requested_reviewer?: SimpleUser,
}

  /**
 * Review Request Removed Issue Event
 * Review Request Removed Issue Event
 */
  export interface ReviewRequestRemovedIssueEvent {
    id: number,
    node_id: string,
    url: string,
  /** A GitHub user. */
    actor: SimpleUser,
    event: string,
    commit_id: string | null,
    commit_url: string | null,
    created_at: string,
    performed_via_github_app: (null | Integration),
  /** A GitHub user. */
    review_requester: SimpleUser,
  /** Groups of organization members that gives permissions on specified repositories. */
    requested_team?: Team,
  /** A GitHub user. */
    requested_reviewer?: SimpleUser,
}

  /**
 * Review Dismissed Issue Event
 * Review Dismissed Issue Event
 */
  export interface ReviewDismissedIssueEvent {
    id: number,
    node_id: string,
    url: string,
  /** A GitHub user. */
    actor: SimpleUser,
    event: string,
    commit_id: string | null,
    commit_url: string | null,
    created_at: string,
    performed_via_github_app: (null | Integration),
    dismissed_review: {
    state: string,
    review_id: number,
    dismissal_message: string | null,
    dismissal_commit_id?: string,

},
}

  /**
 * Locked Issue Event
 * Locked Issue Event
 */
  export interface LockedIssueEvent {
    id: number,
    node_id: string,
    url: string,
  /** A GitHub user. */
    actor: SimpleUser,
    event: string,
    commit_id: string | null,
    commit_url: string | null,
    created_at: string,
    performed_via_github_app: (null | Integration),
    lock_reason: string | null,
}

  /**
 * Added to Project Issue Event
 * Added to Project Issue Event
 */
  export interface AddedToProjectIssueEvent {
    id: number,
    node_id: string,
    url: string,
  /** A GitHub user. */
    actor: SimpleUser,
    event: string,
    commit_id: string | null,
    commit_url: string | null,
    created_at: string,
    performed_via_github_app: (null | Integration),
    project_card?: {
    id: number,
  /** @format uri */
    url: string,
    project_id: number,
  /** @format uri */
    project_url: string,
    column_name: string,
    previous_column_name?: string,

},
}

  /**
 * Moved Column in Project Issue Event
 * Moved Column in Project Issue Event
 */
  export interface MovedColumnInProjectIssueEvent {
    id: number,
    node_id: string,
    url: string,
  /** A GitHub user. */
    actor: SimpleUser,
    event: string,
    commit_id: string | null,
    commit_url: string | null,
    created_at: string,
    performed_via_github_app: (null | Integration),
    project_card?: {
    id: number,
  /** @format uri */
    url: string,
    project_id: number,
  /** @format uri */
    project_url: string,
    column_name: string,
    previous_column_name?: string,

},
}

  /**
 * Removed from Project Issue Event
 * Removed from Project Issue Event
 */
  export interface RemovedFromProjectIssueEvent {
    id: number,
    node_id: string,
    url: string,
  /** A GitHub user. */
    actor: SimpleUser,
    event: string,
    commit_id: string | null,
    commit_url: string | null,
    created_at: string,
    performed_via_github_app: (null | Integration),
    project_card?: {
    id: number,
  /** @format uri */
    url: string,
    project_id: number,
  /** @format uri */
    project_url: string,
    column_name: string,
    previous_column_name?: string,

},
}

  /**
 * Converted Note to Issue Issue Event
 * Converted Note to Issue Issue Event
 */
  export interface ConvertedNoteToIssueIssueEvent {
    id: number,
    node_id: string,
    url: string,
  /** A GitHub user. */
    actor: SimpleUser,
    event: string,
    commit_id: string | null,
    commit_url: string | null,
    created_at: string,
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
    performed_via_github_app: Integration,
    project_card?: {
    id: number,
  /** @format uri */
    url: string,
    project_id: number,
  /** @format uri */
    project_url: string,
    column_name: string,
    previous_column_name?: string,

},
}

  /**
 * Issue Event for Issue
 * Issue Event for Issue
 */
  export type IssueEventForIssue = (LabeledIssueEvent | UnlabeledIssueEvent | AssignedIssueEvent | UnassignedIssueEvent | MilestonedIssueEvent | DemilestonedIssueEvent | RenamedIssueEvent | ReviewRequestedIssueEvent | ReviewRequestRemovedIssueEvent | ReviewDismissedIssueEvent | LockedIssueEvent | AddedToProjectIssueEvent | MovedColumnInProjectIssueEvent | RemovedFromProjectIssueEvent | ConvertedNoteToIssueIssueEvent)

  /**
 * Label
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
  export interface Label {
  /**
   * Unique identifier for the label.
   * @format int64
   */
    id: number,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,
  /** The name of the label. */
    name: string,
  /** Optional description of the label, such as its purpose. */
    description: string | null,
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
  /** Whether this label comes by default in a new repository. */
    default: boolean,
}

  /**
 * Timeline Comment Event
 * Timeline Comment Event
 */
  export interface TimelineCommentEvent {
    event: string,
  /** A GitHub user. */
    actor: SimpleUser,
  /** Unique identifier of the issue comment */
    id: number,
    node_id: string,
  /**
   * URL for the issue comment
   * @format uri
   */
    url: string,
  /** Contents of the issue comment */
    body?: string,
    body_text?: string,
    body_html?: string,
  /** @format uri */
    html_url: string,
  /** A GitHub user. */
    user: SimpleUser,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    issue_url: string,
  /** How the author is associated with the repository. */
    author_association: AuthorAssociation,
    performed_via_github_app?: (null | Integration),
    reactions?: ReactionRollup,
}

  /**
 * Timeline Cross Referenced Event
 * Timeline Cross Referenced Event
 */
  export interface TimelineCrossReferencedEvent {
    event: string,
  /** A GitHub user. */
    actor?: SimpleUser,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
    source: {
    type?: string,
  /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
    issue?: Issue,

},
}

  /**
 * Timeline Committed Event
 * Timeline Committed Event
 */
  export interface TimelineCommittedEvent {
    event?: string,
  /** SHA for the commit */
    sha: string,
    node_id: string,
  /** @format uri */
    url: string,
  /** Identifying information for the git-user */
    author: {
  /**
   * Timestamp of the commit
   * @format date-time
   */
    date: string,
  /** Git email address of the user */
    email: string,
  /** Name of the git user */
    name: string,

},
  /** Identifying information for the git-user */
    committer: {
  /**
   * Timestamp of the commit
   * @format date-time
   */
    date: string,
  /** Git email address of the user */
    email: string,
  /** Name of the git user */
    name: string,

},
  /** Message describing the purpose of the commit */
    message: string,
    tree: {
  /** SHA for the commit */
    sha: string,
  /** @format uri */
    url: string,

},
    parents: ({
  /** SHA for the commit */
    sha: string,
  /** @format uri */
    url: string,
  /** @format uri */
    html_url: string,

})[],
    verification: {
    verified: boolean,
    reason: string,
    signature: string | null,
    payload: string | null,
    verified_at: string | null,

},
  /** @format uri */
    html_url: string,
}

  /**
 * Timeline Reviewed Event
 * Timeline Reviewed Event
 */
  export interface TimelineReviewedEvent {
    event: string,
  /** Unique identifier of the review */
    id: number,
    node_id: string,
  /** A GitHub user. */
    user: SimpleUser,
  /** The text of the review. */
    body: string | null,
    state: string,
  /** @format uri */
    html_url: string,
  /** @format uri */
    pull_request_url: string,
    _links: {
    html: {
    href: string,

},
    pull_request: {
    href: string,

},

},
  /** @format date-time */
    submitted_at?: string,
  /** A commit SHA for the review. */
    commit_id: string,
    body_html?: string,
    body_text?: string,
  /** How the author is associated with the repository. */
    author_association: AuthorAssociation,
}

  /**
 * Pull Request Review Comment
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
  export interface PullRequestReviewComment {
  /** URL for the pull request review comment */
    url: string,
  /**
   * The ID of the pull request review to which the comment belongs.
   * @format int64
   */
    pull_request_review_id: number | null,
  /**
   * The ID of the pull request review comment.
   * @format int64
   */
    id: number,
  /** The node ID of the pull request review comment. */
    node_id: string,
  /** The diff of the line that the comment refers to. */
    diff_hunk: string,
  /** The relative path of the file to which the comment applies. */
    path: string,
  /** The line index in the diff to which the comment applies. This field is closing down; use `line` instead. */
    position?: number,
  /** The index of the original line in the diff to which the comment applies. This field is closing down; use `original_line` instead. */
    original_position?: number,
  /** The SHA of the commit to which the comment applies. */
    commit_id: string,
  /** The SHA of the original commit to which the comment applies. */
    original_commit_id: string,
  /** The comment ID to reply to. */
    in_reply_to_id?: number,
  /** A GitHub user. */
    user: SimpleUser,
  /** The text of the comment. */
    body: string,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /**
   * HTML URL for the pull request review comment.
   * @format uri
   */
    html_url: string,
  /**
   * URL for the pull request that the review comment belongs to.
   * @format uri
   */
    pull_request_url: string,
  /** How the author is associated with the repository. */
    author_association: AuthorAssociation,
    _links: {
    self: {
  /** @format uri */
    href: string,

},
    html: {
  /** @format uri */
    href: string,

},
    pull_request: {
  /** @format uri */
    href: string,

},

},
  /** The first line of the range for a multi-line comment. */
    start_line?: number | null,
  /** The first line of the range for a multi-line comment. */
    original_start_line?: number | null,
  /**
   * The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
    start_side?: "LEFT" | "RIGHT",
  /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    line?: number,
  /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    original_line?: number,
  /**
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   * @default "RIGHT"
   */
    side?: "LEFT" | "RIGHT",
  /** The level at which the comment is targeted, can be a diff line or a file. */
    subject_type?: "line" | "file",
    reactions?: ReactionRollup,
    body_html?: string,
    body_text?: string,
}

  /**
 * Timeline Line Commented Event
 * Timeline Line Commented Event
 */
  export interface TimelineLineCommentedEvent {
    event?: string,
    node_id?: string,
    comments?: (PullRequestReviewComment)[],
}

  /**
 * Timeline Commit Commented Event
 * Timeline Commit Commented Event
 */
  export interface TimelineCommitCommentedEvent {
    event?: string,
    node_id?: string,
    commit_id?: string,
    comments?: (CommitComment)[],
}

  /**
 * Timeline Assigned Issue Event
 * Timeline Assigned Issue Event
 */
  export interface TimelineAssignedIssueEvent {
    id: number,
    node_id: string,
    url: string,
  /** A GitHub user. */
    actor: SimpleUser,
    event: string,
    commit_id: string | null,
    commit_url: string | null,
    created_at: string,
    performed_via_github_app: (null | Integration),
  /** A GitHub user. */
    assignee: SimpleUser,
}

  /**
 * Timeline Unassigned Issue Event
 * Timeline Unassigned Issue Event
 */
  export interface TimelineUnassignedIssueEvent {
    id: number,
    node_id: string,
    url: string,
  /** A GitHub user. */
    actor: SimpleUser,
    event: string,
    commit_id: string | null,
    commit_url: string | null,
    created_at: string,
    performed_via_github_app: (null | Integration),
  /** A GitHub user. */
    assignee: SimpleUser,
}

  /**
 * State Change Issue Event
 * State Change Issue Event
 */
  export interface StateChangeIssueEvent {
    id: number,
    node_id: string,
    url: string,
  /** A GitHub user. */
    actor: SimpleUser,
    event: string,
    commit_id: string | null,
    commit_url: string | null,
    created_at: string,
    performed_via_github_app: (null | Integration),
    state_reason?: string | null,
}

  /**
 * Timeline Event
 * Timeline Event
 */
  export type TimelineIssueEvents = (LabeledIssueEvent | UnlabeledIssueEvent | MilestonedIssueEvent | DemilestonedIssueEvent | RenamedIssueEvent | ReviewRequestedIssueEvent | ReviewRequestRemovedIssueEvent | ReviewDismissedIssueEvent | LockedIssueEvent | AddedToProjectIssueEvent | MovedColumnInProjectIssueEvent | RemovedFromProjectIssueEvent | ConvertedNoteToIssueIssueEvent | TimelineCommentEvent | TimelineCrossReferencedEvent | TimelineCommittedEvent | TimelineReviewedEvent | TimelineLineCommentedEvent | TimelineCommitCommentedEvent | TimelineAssignedIssueEvent | TimelineUnassignedIssueEvent | StateChangeIssueEvent)

  /**
 * Deploy Key
 * An SSH key granting access to a single repository.
 */
  export interface DeployKey {
    id: number,
    key: string,
    url: string,
    title: string,
    verified: boolean,
    created_at: string,
    read_only: boolean,
    added_by?: string | null,
    last_used?: string | null,
    enabled?: boolean,
}

  /**
 * Language
 * Language
 */
  export type Language = Record<string,number>

  /**
 * License Content
 * License Content
 */
  export interface LicenseContent {
    name: string,
    path: string,
    sha: string,
    size: number,
  /** @format uri */
    url: string,
  /** @format uri */
    html_url: string | null,
  /** @format uri */
    git_url: string | null,
  /** @format uri */
    download_url: string | null,
    type: string,
    content: string,
    encoding: string,
    _links: {
  /** @format uri */
    git: string | null,
  /** @format uri */
    html: string | null,
  /** @format uri */
    self: string,

},
    license: (null | LicenseSimple),
}

  /**
 * Merged upstream
 * Results of a successful merge upstream request
 */
  export interface MergedUpstream {
    message?: string,
    merge_type?: "merge" | "fast-forward" | "none",
    base_branch?: string,
}

  /** Pages Source Hash */
  export interface PagesSourceHash {
    branch: string,
    path: string,
}

  /** Pages Https Certificate */
  export interface PagesHttpsCertificate {
    state: "new" | "authorization_created" | "authorization_pending" | "authorized" | "authorization_revoked" | "issued" | "uploaded" | "approved" | "errored" | "bad_authz" | "destroy_pending" | "dns_changed",
    description: string,
  /** Array of the domain set and its alternate name (if it is configured) */
    domains: (string)[],
  /** @format date */
    expires_at?: string,
}

  /**
 * GitHub Pages
 * The configuration for GitHub Pages for a repository.
 */
  export interface Page {
  /**
   * The API address for accessing this Page resource.
   * @format uri
   */
    url: string,
  /** The status of the most recent build of the Page. */
    status: "built" | "building" | "errored",
  /** The Pages site's custom domain */
    cname: string | null,
  /** The state if the domain is verified */
    protected_domain_state?: "pending" | "verified" | "unverified",
  /**
   * The timestamp when a pending domain becomes unverified.
   * @format date-time
   */
    pending_domain_unverified_at?: string | null,
  /**
   * Whether the Page has a custom 404 page.
   * @default false
   */
    "custom_404": boolean,
  /**
   * The web address the Page can be accessed from.
   * @format uri
   */
    html_url?: string,
  /** The process in which the Page will be built. */
    build_type?: "legacy" | "workflow",
    source?: PagesSourceHash,
  /** Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. */
    public: boolean,
    https_certificate?: PagesHttpsCertificate,
  /** Whether https is enabled on the domain */
    https_enforced?: boolean,
}

  /**
 * Page Build
 * Page Build
 */
  export interface PageBuild {
  /** @format uri */
    url: string,
    status: string,
    error: {
    message: string | null,

},
    pusher: (null | SimpleUser),
    commit: string,
    duration: number,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
}

  /**
 * Page Build Status
 * Page Build Status
 */
  export interface PageBuildStatus {
  /** @format uri */
    url: string,
    status: string,
}

  /**
 * GitHub Pages
 * The GitHub Pages deployment status.
 */
  export interface PageDeployment {
  /** The ID of the GitHub Pages deployment. This is the Git SHA of the deployed commit. */
    id: (number | string),
  /**
   * The URI to monitor GitHub Pages deployment status.
   * @format uri
   */
    status_url: string,
  /**
   * The URI to the deployed GitHub Pages.
   * @format uri
   */
    page_url: string,
  /**
   * The URI to the deployed GitHub Pages preview.
   * @format uri
   */
    preview_url?: string,
}

  /** GitHub Pages deployment status */
  export interface PagesDeploymentStatus {
  /** The current status of the deployment. */
    status?: "deployment_in_progress" | "syncing_files" | "finished_file_sync" | "updating_pages" | "purging_cdn" | "deployment_cancelled" | "deployment_failed" | "deployment_content_failed" | "deployment_attempt_error" | "deployment_lost" | "succeed",
}

    export interface RepositoryPreReceiveHook {
    id?: number,
    name?: string,
    enforcement?: string,
    configuration_url?: string,
}

  /**
 * Pull Request
 * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 */
  export interface PullRequest {
  /** @format uri */
    url: string,
  /** @format int64 */
    id: number,
    node_id: string,
  /** @format uri */
    html_url: string,
  /** @format uri */
    diff_url: string,
  /** @format uri */
    patch_url: string,
  /** @format uri */
    issue_url: string,
  /** @format uri */
    commits_url: string,
  /** @format uri */
    review_comments_url: string,
    review_comment_url: string,
  /** @format uri */
    comments_url: string,
  /** @format uri */
    statuses_url: string,
  /** Number uniquely identifying the pull request within its repository. */
    number: number,
  /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed",
    locked: boolean,
  /** The title of the pull request. */
    title: string,
  /** A GitHub user. */
    user: SimpleUser,
    body: string | null,
    labels: ({
  /** @format int64 */
    id: number,
    node_id: string,
    url: string,
    name: string,
    description: string | null,
    color: string,
    default: boolean,

})[],
    milestone: (null | Milestone),
    active_lock_reason?: string | null,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** @format date-time */
    closed_at: string | null,
  /** @format date-time */
    merged_at: string | null,
    merge_commit_sha: string | null,
    assignee: (null | SimpleUser),
    assignees?: (any)[] | null,
    requested_reviewers?: (any)[] | null,
    requested_teams?: (any)[] | null,
    head: {
    label: string,
    ref: string,
  /** A repository on GitHub. */
    repo: Repository,
    sha: string,
  /** A GitHub user. */
    user: SimpleUser,

},
    base: {
    label: string,
    ref: string,
  /** A repository on GitHub. */
    repo: Repository,
    sha: string,
  /** A GitHub user. */
    user: SimpleUser,

},
    _links: {
  /** Hypermedia Link */
    comments: Link,
  /** Hypermedia Link */
    commits: Link,
  /** Hypermedia Link */
    statuses: Link,
  /** Hypermedia Link */
    html: Link,
  /** Hypermedia Link */
    issue: Link,
  /** Hypermedia Link */
    review_comments: Link,
  /** Hypermedia Link */
    review_comment: Link,
  /** Hypermedia Link */
    self: Link,

},
  /** How the author is associated with the repository. */
    author_association: AuthorAssociation,
  /** The status of auto merging a pull request. */
    auto_merge: AutoMerge,
  /** Indicates whether or not the pull request is a draft. */
    draft?: boolean,
    merged: boolean,
    mergeable: boolean | null,
    rebaseable?: boolean | null,
    mergeable_state: string,
    merged_by: (null | SimpleUser),
    comments: number,
    review_comments: number,
  /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify: boolean,
    commits: number,
    additions: number,
    deletions: number,
    changed_files: number,
}

  /**
 * Pull Request Merge Result
 * Pull Request Merge Result
 */
  export interface PullRequestMergeResult {
    sha: string,
    merged: boolean,
    message: string,
}

  /**
 * Pull Request Review Request
 * Pull Request Review Request
 */
  export interface PullRequestReviewRequest {
    users: (SimpleUser)[],
    teams: (Team)[],
}

  /**
 * Pull Request Review
 * Pull Request Reviews are reviews on pull requests.
 */
  export interface PullRequestReview {
  /**
   * Unique identifier of the review
   * @format int64
   */
    id: number,
    node_id: string,
    user: (null | SimpleUser),
  /** The text of the review. */
    body: string,
    state: string,
  /** @format uri */
    html_url: string,
  /** @format uri */
    pull_request_url: string,
    _links: {
    html: {
    href: string,

},
    pull_request: {
    href: string,

},

},
  /** @format date-time */
    submitted_at?: string,
  /** A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`. */
    commit_id: string | null,
    body_html?: string,
    body_text?: string,
  /** How the author is associated with the repository. */
    author_association: AuthorAssociation,
}

  /**
 * Legacy Review Comment
 * Legacy Review Comment
 */
  export interface ReviewComment {
  /** @format uri */
    url: string,
  /** @format int64 */
    pull_request_review_id: number | null,
  /** @format int64 */
    id: number,
    node_id: string,
    diff_hunk: string,
    path: string,
    position: number | null,
    original_position: number,
    commit_id: string,
    original_commit_id: string,
    in_reply_to_id?: number,
    user: (null | SimpleUser),
    body: string,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    html_url: string,
  /** @format uri */
    pull_request_url: string,
  /** How the author is associated with the repository. */
    author_association: AuthorAssociation,
    _links: {
  /** Hypermedia Link */
    self: Link,
  /** Hypermedia Link */
    html: Link,
  /** Hypermedia Link */
    pull_request: Link,

},
    body_text?: string,
    body_html?: string,
    reactions?: ReactionRollup,
  /**
   * The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
    side?: "LEFT" | "RIGHT",
  /**
   * The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
    start_side?: "LEFT" | "RIGHT",
  /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    line?: number,
  /** The original line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    original_line?: number,
  /** The first line of the range for a multi-line comment. */
    start_line?: number | null,
  /** The original first line of the range for a multi-line comment. */
    original_start_line?: number | null,
  /** The level at which the comment is targeted, can be a diff line or a file. */
    subject_type?: "line" | "file",
}

  /**
 * Release Asset
 * Data related to a release.
 */
  export interface ReleaseAsset {
  /** @format uri */
    url: string,
  /** @format uri */
    browser_download_url: string,
    id: number,
    node_id: string,
  /** The file name of the asset. */
    name: string,
    label: string | null,
  /** State of the release asset. */
    state: "uploaded" | "open",
    content_type: string,
    size: number,
    digest: string | null,
    download_count: number,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
    uploader: (null | SimpleUser),
}

  /**
 * Release
 * A release.
 */
  export interface Release {
  /** @format uri */
    url: string,
  /** @format uri */
    html_url: string,
  /** @format uri */
    assets_url: string,
    upload_url: string,
  /** @format uri */
    tarball_url: string | null,
  /** @format uri */
    zipball_url: string | null,
    id: number,
    node_id: string,
  /** The name of the tag. */
    tag_name: string,
  /** Specifies the commitish value that determines where the Git tag is created from. */
    target_commitish: string,
    name: string | null,
    body?: string | null,
  /** true to create a draft (unpublished) release, false to create a published one. */
    draft: boolean,
  /** Whether to identify the release as a prerelease or a full release. */
    prerelease: boolean,
  /** Whether or not the release is immutable. */
    immutable?: boolean,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    published_at: string | null,
  /** A GitHub user. */
    author: SimpleUser,
    assets: (ReleaseAsset)[],
    body_html?: string,
    body_text?: string,
    mentions_count?: number,
    reactions?: ReactionRollup,
}

  /**
 * Generated Release Notes Content
 * Generated name and body describing a release
 */
  export interface ReleaseNotesContent {
  /** The generated name of the release */
    name: string,
  /** The generated body describing the contents of the release supporting markdown formatting */
    body: string,
}

  /**
 * repository ruleset data for rule
 * User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
 */
  export interface RepositoryRuleRulesetInfo {
  /** The type of source for the ruleset that includes this rule. */
    ruleset_source_type?: "Repository" | "Organization",
  /** The name of the source of the ruleset that includes this rule. */
    ruleset_source?: string,
  /** The ID of the ruleset that includes this rule. */
    ruleset_id?: number,
}

  /**
 * Repository Rule
 * A repository rule with ruleset details.
 */
  export type RepositoryRuleDetailed = ((RepositoryRuleCreation & RepositoryRuleRulesetInfo) | (RepositoryRuleUpdate & RepositoryRuleRulesetInfo) | (RepositoryRuleDeletion & RepositoryRuleRulesetInfo) | (RepositoryRuleRequiredLinearHistory & RepositoryRuleRulesetInfo) | (RepositoryRuleMergeQueue & RepositoryRuleRulesetInfo) | (RepositoryRuleRequiredDeployments & RepositoryRuleRulesetInfo) | (RepositoryRuleRequiredSignatures & RepositoryRuleRulesetInfo) | (RepositoryRulePullRequest & RepositoryRuleRulesetInfo) | (RepositoryRuleRequiredStatusChecks & RepositoryRuleRulesetInfo) | (RepositoryRuleNonFastForward & RepositoryRuleRulesetInfo) | (RepositoryRuleCommitMessagePattern & RepositoryRuleRulesetInfo) | (RepositoryRuleCommitAuthorEmailPattern & RepositoryRuleRulesetInfo) | (RepositoryRuleCommitterEmailPattern & RepositoryRuleRulesetInfo) | (RepositoryRuleBranchNamePattern & RepositoryRuleRulesetInfo) | (RepositoryRuleTagNamePattern & RepositoryRuleRulesetInfo) | (RepositoryRuleFilePathRestriction & RepositoryRuleRulesetInfo) | (RepositoryRuleMaxFilePathLength & RepositoryRuleRulesetInfo) | (RepositoryRuleFileExtensionRestriction & RepositoryRuleRulesetInfo) | (RepositoryRuleMaxFileSize & RepositoryRuleRulesetInfo) | (RepositoryRuleWorkflows & RepositoryRuleRulesetInfo) | (RepositoryRuleCodeScanning & RepositoryRuleRulesetInfo))

    export interface SecretScanningAlert {
  /** The security alert number. */
    number?: AlertNumber,
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    created_at?: AlertCreatedAt,
    updated_at?: (null | AlertUpdatedAt),
  /** The REST API URL of the alert resource. */
    url?: AlertUrl,
  /** The GitHub URL of the alert resource. */
    html_url?: AlertHtmlUrl,
  /**
   * The REST API URL of the code locations for this alert.
   * @format uri
   */
    locations_url?: string,
  /** Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`. */
    state?: SecretScanningAlertState,
  /** **Required when the `state` is `resolved`.** The reason for resolving the alert. */
    resolution?: SecretScanningAlertResolution,
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    resolved_at?: string | null,
    resolved_by?: (null | SimpleUser),
  /** An optional comment to resolve an alert. */
    resolution_comment?: string | null,
  /** The type of secret that secret scanning detected. */
    secret_type?: string,
  /**
   * User-friendly name for the detected secret, matching the `secret_type`.
   * For a list of built-in patterns, see "[Supported secret scanning patterns](https://docs.github.com/enterprise-server@3.17/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
   */
    secret_type_display_name?: string,
  /** The secret that was detected. */
    secret?: string,
  /** Whether push protection was bypassed for the detected secret. */
    push_protection_bypassed?: boolean | null,
    push_protection_bypassed_by?: (null | SimpleUser),
  /**
   * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    push_protection_bypassed_at?: string | null,
    push_protection_bypass_request_reviewer?: (null | SimpleUser),
  /** An optional comment when reviewing a push protection bypass. */
    push_protection_bypass_request_reviewer_comment?: string | null,
  /** An optional comment when requesting a push protection bypass. */
    push_protection_bypass_request_comment?: string | null,
  /**
   * The URL to a push protection bypass request.
   * @format uri
   */
    push_protection_bypass_request_html_url?: string | null,
  /** The token status as of the latest validity check. */
    validity?: "active" | "inactive" | "unknown",
  /** Whether the detected secret was found in multiple repositories under the same organization or enterprise. */
    multi_repo?: boolean | null,
  /** A boolean value representing whether or not alert is base64 encoded */
    "is_base64_encoded"?: boolean | null,
}

  /** An optional comment when closing or reopening an alert. Cannot be updated or deleted. */
  export type SecretScanningAlertResolutionComment = string | null

  /** Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository. */
  export interface SecretScanningLocationCommit {
  /** The file path in the repository */
    path: string,
  /** Line number at which the secret starts in the file */
    start_line: number,
  /** Line number at which the secret ends in the file */
    end_line: number,
  /** The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII */
    start_column: number,
  /** The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII */
    end_column: number,
  /** SHA-1 hash ID of the associated blob */
    blob_sha: string,
  /** The API URL to get the associated blob resource */
    blob_url: string,
  /** SHA-1 hash ID of the associated commit */
    commit_sha: string,
  /** The API URL to get the associated commit resource */
    commit_url: string,
}

  /** Represents a 'wiki_commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository wiki. */
  export interface SecretScanningLocationWikiCommit {
  /** The file path of the wiki page */
    path: string,
  /** Line number at which the secret starts in the file */
    start_line: number,
  /** Line number at which the secret ends in the file */
    end_line: number,
  /** The column at which the secret starts within the start line when the file is interpreted as 8-bit ASCII. */
    start_column: number,
  /** The column at which the secret ends within the end line when the file is interpreted as 8-bit ASCII. */
    end_column: number,
  /** SHA-1 hash ID of the associated blob */
    blob_sha: string,
  /** The GitHub URL to get the associated wiki page */
    page_url: string,
  /** SHA-1 hash ID of the associated commit */
    commit_sha: string,
  /** The GitHub URL to get the associated wiki commit */
    commit_url: string,
}

  /** Represents an 'issue_title' secret scanning location type. This location type shows that a secret was detected in the title of an issue. */
  export interface SecretScanningLocationIssueTitle {
  /**
   * The API URL to get the issue where the secret was detected.
   * @format uri
   */
    issue_title_url: string,
}

  /** Represents an 'issue_body' secret scanning location type. This location type shows that a secret was detected in the body of an issue. */
  export interface SecretScanningLocationIssueBody {
  /**
   * The API URL to get the issue where the secret was detected.
   * @format uri
   */
    issue_body_url: string,
}

  /** Represents an 'issue_comment' secret scanning location type. This location type shows that a secret was detected in a comment on an issue. */
  export interface SecretScanningLocationIssueComment {
  /**
   * The API URL to get the issue comment where the secret was detected.
   * @format uri
   */
    issue_comment_url: string,
}

  /** Represents a 'discussion_title' secret scanning location type. This location type shows that a secret was detected in the title of a discussion. */
  export interface SecretScanningLocationDiscussionTitle {
  /**
   * The URL to the discussion where the secret was detected.
   * @format uri
   */
    discussion_title_url: string,
}

  /** Represents a 'discussion_body' secret scanning location type. This location type shows that a secret was detected in the body of a discussion. */
  export interface SecretScanningLocationDiscussionBody {
  /**
   * The URL to the discussion where the secret was detected.
   * @format uri
   */
    discussion_body_url: string,
}

  /** Represents a 'discussion_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a discussion. */
  export interface SecretScanningLocationDiscussionComment {
  /**
   * The API URL to get the discussion comment where the secret was detected.
   * @format uri
   */
    discussion_comment_url: string,
}

  /** Represents a 'pull_request_title' secret scanning location type. This location type shows that a secret was detected in the title of a pull request. */
  export interface SecretScanningLocationPullRequestTitle {
  /**
   * The API URL to get the pull request where the secret was detected.
   * @format uri
   */
    pull_request_title_url: string,
}

  /** Represents a 'pull_request_body' secret scanning location type. This location type shows that a secret was detected in the body of a pull request. */
  export interface SecretScanningLocationPullRequestBody {
  /**
   * The API URL to get the pull request where the secret was detected.
   * @format uri
   */
    pull_request_body_url: string,
}

  /** Represents a 'pull_request_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a pull request. */
  export interface SecretScanningLocationPullRequestComment {
  /**
   * The API URL to get the pull request comment where the secret was detected.
   * @format uri
   */
    pull_request_comment_url: string,
}

  /** Represents a 'pull_request_review' secret scanning location type. This location type shows that a secret was detected in a review on a pull request. */
  export interface SecretScanningLocationPullRequestReview {
  /**
   * The API URL to get the pull request review where the secret was detected.
   * @format uri
   */
    pull_request_review_url: string,
}

  /** Represents a 'pull_request_review_comment' secret scanning location type. This location type shows that a secret was detected in a review comment on a pull request. */
  export interface SecretScanningLocationPullRequestReviewComment {
  /**
   * The API URL to get the pull request review comment where the secret was detected.
   * @format uri
   */
    pull_request_review_comment_url: string,
}

    export interface SecretScanningLocation {
  /** The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found. */
    type?: "commit" | "wiki_commit" | "issue_title" | "issue_body" | "issue_comment" | "discussion_title" | "discussion_body" | "discussion_comment" | "pull_request_title" | "pull_request_body" | "pull_request_comment" | "pull_request_review" | "pull_request_review_comment",
    details?: (SecretScanningLocationCommit | SecretScanningLocationWikiCommit | SecretScanningLocationIssueTitle | SecretScanningLocationIssueBody | SecretScanningLocationIssueComment | SecretScanningLocationDiscussionTitle | SecretScanningLocationDiscussionBody | SecretScanningLocationDiscussionComment | SecretScanningLocationPullRequestTitle | SecretScanningLocationPullRequestBody | SecretScanningLocationPullRequestComment | SecretScanningLocationPullRequestReview | SecretScanningLocationPullRequestReviewComment),
}

    export interface SecretScanningPushProtectionBypass {
  /** The reason for bypassing push protection. */
    reason?: SecretScanningPushProtectionBypassReason,
  /**
   * The time that the bypass will expire in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    expire_at?: string | null,
  /** The token type this bypass is for. */
    token_type?: string,
}

  /** Information on a single scan performed by secret scanning on the repository */
  export interface SecretScanningScan {
  /** The type of scan */
    type?: string,
  /** The state of the scan. Either "completed", "running", or "pending" */
    status?: string,
  /**
   * The time that the scan was completed. Empty if the scan is running
   * @format date-time
   */
    completed_at?: string | null,
  /**
   * The time that the scan was started. Empty if the scan is pending
   * @format date-time
   */
    started_at?: string | null,
}

    export interface SecretScanningScanHistory {
    incremental_scans?: (SecretScanningScan)[],
    pattern_update_scans?: (SecretScanningScan)[],
    backfill_scans?: (SecretScanningScan)[],
    custom_pattern_backfill_scans?: ((SecretScanningScan & {
  /** Name of the custom pattern for custom pattern scans */
    pattern_name?: string,
  /** Level at which the custom pattern is defined, one of "repository", "organization", or "enterprise" */
    pattern_scope?: string,

}))[],
}

  /**
 * Stargazer
 * Stargazer
 */
  export interface Stargazer {
  /** @format date-time */
    starred_at: string,
    user: (null | SimpleUser),
}

  /**
 * Code Frequency Stat
 * Code Frequency Stat
 */
  export type CodeFrequencyStat = (number)[]

  /**
 * Commit Activity
 * Commit Activity
 */
  export interface CommitActivity {
    days: (number)[],
    total: number,
    week: number,
}

  /**
 * Contributor Activity
 * Contributor Activity
 */
  export interface ContributorActivity {
    author: (null | SimpleUser),
    total: number,
    weeks: ({
    w?: number,
    a?: number,
    d?: number,
    c?: number,

})[],
}

  /** Participation Stats */
  export interface ParticipationStats {
    all: (number)[],
    owner: (number)[],
}

  /**
 * Repository Invitation
 * Repository invitations let you manage who you collaborate with.
 */
  export interface RepositorySubscription {
  /** Determines if notifications should be received from this repository. */
    subscribed: boolean,
  /** Determines if all notifications should be blocked from this repository. */
    ignored: boolean,
    reason: string | null,
  /** @format date-time */
    created_at: string,
  /** @format uri */
    url: string,
  /** @format uri */
    repository_url: string,
}

  /**
 * Tag
 * Tag
 */
  export interface Tag {
    name: string,
    commit: {
    sha: string,
  /** @format uri */
    url: string,

},
  /** @format uri */
    zipball_url: string,
  /** @format uri */
    tarball_url: string,
    node_id: string,
}

  /**
 * Tag protection
 * Tag protection
 */
  export interface TagProtection {
    id?: number,
    created_at?: string,
    updated_at?: string,
    enabled?: boolean,
    pattern: string,
}

  /**
 * Topic
 * A topic aggregates entities that are related to a subject.
 */
  export interface Topic {
    names: (string)[],
}

    export interface GroupResponse {
  /** The URIs that are used to indicate the namespaces of the SCIM schemas. */
    schemas: ("urn:ietf:params:scim:schemas:core:2.0:Group" | "urn:ietf:params:scim:api:messages:2.0:ListResponse")[],
  /** A unique identifier for the resource as defined by the provisioning client. */
    externalId?: string | null,
  /** A human-readable name for a security group. */
    displayName?: string | null,
  /** The group members. */
    members?: ({
  /** The local unique identifier for the member */
    value: string,
    $ref: string,
  /** The display name associated with the member */
    display?: string,

})[],
}

  /** The metadata associated with the creation/updates to the user. */
  export interface Meta {
  /** A type of a resource */
    resourceType: "User" | "Group",
  /** A date and time when the user was created. */
    created?: string,
  /** A data and time when the user was last modified. */
    lastModified?: string,
  /** A URL location of an object */
    location?: string,
}

    export type ScimEnterpriseGroupResponse = (GroupResponse & {
  /** The internally generated id for the group object. */
    id?: string,
  /** The security group members. */
    members?: ({
    value?: string,
    $ref?: string,
    display?: string,

})[],
  /** The metadata associated with the creation/updates to the user. */
    meta?: Meta,

})

    export interface ScimEnterpriseGroupList {
  /** The URIs that are used to indicate the namespaces of the list SCIM schemas. */
    schemas: ("urn:ietf:params:scim:api:messages:2.0:ListResponse")[],
  /** Number of results found */
    totalResults: number,
  /** Information about each provisioned group. */
    Resources: (ScimEnterpriseGroupResponse)[],
  /** A starting index for the returned page */
    startIndex: number,
  /** Number of objects per page */
    itemsPerPage: number,
}

    export interface Group {
  /** The URIs that are used to indicate the namespaces of the SCIM schemas. */
    schemas: ("urn:ietf:params:scim:schemas:core:2.0:Group")[],
  /** A unique identifier for the resource as defined by the provisioning client. */
    externalId: string,
  /** A human-readable name for a security group. */
    displayName: string,
  /** The group members. */
    members: ({
  /** The local unique identifier for the member */
    value: string,
  /** The display name associated with the member */
    displayName: string,

})[],
}

    export interface PatchSchema {
  /** patch operations list */
    Operations: ({
    op: "add" | "replace" | "remove",
    path?: string,
  /** Corresponding 'value' of that field specified by 'path' */
    value?: string,

})[],
    schemas: ("urn:ietf:params:scim:api:messages:2.0:PatchOp")[],
}

    export interface UserNameResponse {
  /** The full name, including all middle names, titles, and suffixes as appropriate, formatted for display. */
    formatted?: string,
  /** The family name of the user. */
    familyName?: string,
  /** The given name of the user. */
    givenName?: string,
  /** The middle name(s) of the user. */
    middleName?: string,
}

  /** The emails for the user. */
  export type UserEmailsResponse = ({
  /** The email address. */
    value: string,
  /** The type of email address. */
    type?: string,
  /** Whether this email address is the primary address. */
    primary?: boolean,

})[]

  /** The roles assigned to the user. */
  export type UserRole = ({
    display?: string,
    type?: string,
  /** The role value representing a user role in GitHub. */
    value: "user" | "27d9891d-2c17-4f45-a262-781a0e55c80a" | "guest_collaborator" | "1ebc4a02-e56c-43a6-92a5-02ee09b90824" | "enterprise_owner" | "981df190-8801-4618-a08a-d91f6206c954" | "ba4987ab-a1c3-412a-b58c-360fc407cb10" | "billing_manager" | "0e338b8c-cc7f-498a-928d-ea3470d7e7e3" | "e6be2762-e4ad-4108-b72d-1bbe884a0f91",
  /** Is the role a primary role for the user. */
    primary?: boolean,

})[]

    export interface UserResponse {
  /** The URIs that are used to indicate the namespaces of the SCIM schemas. */
    schemas: ("urn:ietf:params:scim:schemas:core:2.0:User")[],
  /** A unique identifier for the resource as defined by the provisioning client. */
    externalId?: string | null,
  /** Whether the user active in the IdP. */
    active: boolean,
  /** The username for the user. */
    userName?: string,
    name?: UserNameResponse,
  /** A human-readable name for the user. */
    displayName?: string | null,
  /** The emails for the user. */
    emails: UserEmailsResponse,
  /** The roles assigned to the user. */
    roles?: UserRole,
}

    export type ScimEnterpriseUserResponse = (UserResponse & {
  /** The internally generated id for the user object. */
    id: string,
  /** Provisioned SCIM groups that the user is a member of. */
    groups?: ({
    value?: string,
    $ref?: string,
    display?: string,

})[],
  /** The metadata associated with the creation/updates to the user. */
    meta: Meta,

})

    export interface ScimEnterpriseUserList {
  /** The URIs that are used to indicate the namespaces of the list SCIM schemas. */
    schemas: ("urn:ietf:params:scim:api:messages:2.0:ListResponse")[],
  /** Number of results found */
    totalResults: number,
  /** Information about each provisioned account. */
    Resources: (ScimEnterpriseUserResponse)[],
  /** A starting index for the returned page */
    startIndex: number,
  /** Number of objects per page */
    itemsPerPage: number,
}

    export interface UserName {
  /** The full name, including all middle names, titles, and suffixes as appropriate, formatted for display. */
    formatted?: string,
  /** The family name of the user. */
    familyName: string,
  /** The given name of the user. */
    givenName: string,
  /** The middle name(s) of the user. */
    middleName?: string,
}

  /** The emails for the user. */
  export type UserEmails = ({
  /** The email address. */
    value: string,
  /** The type of email address. */
    type: string,
  /** Whether this email address is the primary address. */
    primary: boolean,

})[]

    export interface User {
  /** The URIs that are used to indicate the namespaces of the SCIM schemas. */
    schemas: ("urn:ietf:params:scim:schemas:core:2.0:User")[],
  /** A unique identifier for the resource as defined by the provisioning client. */
    externalId: string,
  /** Whether the user active in the IdP. */
    active: boolean,
  /** The username for the user. */
    userName: string,
    name?: UserName,
  /** A human-readable name for the user. */
    displayName: string,
  /** The emails for the user. */
    emails: UserEmails,
  /** The roles assigned to the user. */
    roles?: UserRole,
}

  /** Search Result Text Matches */
  export type SearchResultTextMatches = ({
    object_url?: string,
    object_type?: string | null,
    property?: string,
    fragment?: string,
    matches?: ({
    text?: string,
    indices?: (number)[],

})[],

})[]

  /**
 * Code Search Result Item
 * Code Search Result Item
 */
  export interface CodeSearchResultItem {
    name: string,
    path: string,
    sha: string,
  /** @format uri */
    url: string,
  /** @format uri */
    git_url: string,
  /** @format uri */
    html_url: string,
  /** Minimal Repository */
    repository: MinimalRepository,
    score: number,
    file_size?: number,
    language?: string | null,
  /** @format date-time */
    last_modified_at?: string,
    line_numbers?: (string)[],
    text_matches?: SearchResultTextMatches,
}

  /**
 * Commit Search Result Item
 * Commit Search Result Item
 */
  export interface CommitSearchResultItem {
  /** @format uri */
    url: string,
    sha: string,
  /** @format uri */
    html_url: string,
  /** @format uri */
    comments_url: string,
    commit: {
    author: {
    name: string,
    email: string,
  /** @format date-time */
    date: string,

},
    committer: (null | GitUser),
    comment_count: number,
    message: string,
    tree: {
    sha: string,
  /** @format uri */
    url: string,

},
  /** @format uri */
    url: string,
    verification?: Verification,

},
    author: (null | SimpleUser),
    committer: (null | GitUser),
    parents: ({
    url?: string,
    html_url?: string,
    sha?: string,

})[],
  /** Minimal Repository */
    repository: MinimalRepository,
    score: number,
    node_id: string,
    text_matches?: SearchResultTextMatches,
}

  /**
 * Issue Search Result Item
 * Issue Search Result Item
 */
  export interface IssueSearchResultItem {
  /** @format uri */
    url: string,
  /** @format uri */
    repository_url: string,
    labels_url: string,
  /** @format uri */
    comments_url: string,
  /** @format uri */
    events_url: string,
  /** @format uri */
    html_url: string,
  /** @format int64 */
    id: number,
    node_id: string,
    number: number,
    title: string,
    locked: boolean,
    active_lock_reason?: string | null,
    assignees?: (any)[] | null,
    user: (null | SimpleUser),
    labels: ({
  /** @format int64 */
    id?: number,
    node_id?: string,
    url?: string,
    name?: string,
    color?: string,
    default?: boolean,
    description?: string | null,

})[],
  /** Sub-issues Summary */
    sub_issues_summary?: {
    total: number,
    completed: number,
    percent_completed: number,

},
    state: string,
    state_reason?: string | null,
    assignee: (null | SimpleUser),
    milestone: (null | Milestone),
    comments: number,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** @format date-time */
    closed_at: string | null,
    text_matches?: SearchResultTextMatches,
    pull_request?: {
  /** @format date-time */
    merged_at?: string | null,
  /** @format uri */
    diff_url: string | null,
  /** @format uri */
    html_url: string | null,
  /** @format uri */
    patch_url: string | null,
  /** @format uri */
    url: string | null,

},
    body?: string,
    score: number,
  /** How the author is associated with the repository. */
    author_association: AuthorAssociation,
    draft?: boolean,
  /** A repository on GitHub. */
    repository?: Repository,
    body_html?: string,
    body_text?: string,
  /** @format uri */
    timeline_url?: string,
  /** The type of issue. */
    type?: IssueType,
    performed_via_github_app?: (null | Integration),
    reactions?: ReactionRollup,
}

  /**
 * Label Search Result Item
 * Label Search Result Item
 */
  export interface LabelSearchResultItem {
    id: number,
    node_id: string,
  /** @format uri */
    url: string,
    name: string,
    color: string,
    default: boolean,
    description: string | null,
    score: number,
    text_matches?: SearchResultTextMatches,
}

  /**
 * Repo Search Result Item
 * Repo Search Result Item
 */
  export interface RepoSearchResultItem {
    id: number,
    node_id: string,
    name: string,
    full_name: string,
    owner: (null | SimpleUser),
    private: boolean,
  /** @format uri */
    html_url: string,
    description: string | null,
    fork: boolean,
  /** @format uri */
    url: string,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** @format date-time */
    pushed_at: string,
  /** @format uri */
    homepage: string | null,
    size: number,
    stargazers_count: number,
    watchers_count: number,
    language: string | null,
    forks_count: number,
    open_issues_count: number,
    master_branch?: string,
    default_branch: string,
    score: number,
  /** @format uri */
    forks_url: string,
    keys_url: string,
    collaborators_url: string,
  /** @format uri */
    teams_url: string,
  /** @format uri */
    hooks_url: string,
    issue_events_url: string,
  /** @format uri */
    events_url: string,
    assignees_url: string,
    branches_url: string,
  /** @format uri */
    tags_url: string,
    blobs_url: string,
    git_tags_url: string,
    git_refs_url: string,
    trees_url: string,
    statuses_url: string,
  /** @format uri */
    languages_url: string,
  /** @format uri */
    stargazers_url: string,
  /** @format uri */
    contributors_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
    commits_url: string,
    git_commits_url: string,
    comments_url: string,
    issue_comment_url: string,
    contents_url: string,
    compare_url: string,
  /** @format uri */
    merges_url: string,
    archive_url: string,
  /** @format uri */
    downloads_url: string,
    issues_url: string,
    pulls_url: string,
    milestones_url: string,
    notifications_url: string,
    labels_url: string,
    releases_url: string,
  /** @format uri */
    deployments_url: string,
    git_url: string,
    ssh_url: string,
    clone_url: string,
  /** @format uri */
    svn_url: string,
    forks: number,
    open_issues: number,
    watchers: number,
    topics?: (string)[],
  /** @format uri */
    mirror_url: string | null,
    has_issues: boolean,
    has_projects: boolean,
    has_pages: boolean,
    has_wiki: boolean,
    has_downloads: boolean,
    has_discussions?: boolean,
    archived: boolean,
  /** Returns whether or not this repository disabled. */
    disabled: boolean,
  /** The repository visibility: public, private, or internal. */
    visibility?: string,
    license: (null | LicenseSimple),
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    push: boolean,
    triage?: boolean,
    pull: boolean,

},
    text_matches?: SearchResultTextMatches,
    temp_clone_token?: string,
    allow_merge_commit?: boolean,
    allow_squash_merge?: boolean,
    allow_rebase_merge?: boolean,
    allow_auto_merge?: boolean,
    delete_branch_on_merge?: boolean,
    allow_forking?: boolean,
    is_template?: boolean,
    web_commit_signoff_required?: boolean,
}

  /**
 * Topic Search Result Item
 * Topic Search Result Item
 */
  export interface TopicSearchResultItem {
    name: string,
    display_name: string | null,
    short_description: string | null,
    description: string | null,
    created_by: string | null,
    released: string | null,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
    featured: boolean,
    curated: boolean,
    score: number,
    repository_count?: number | null,
  /** @format uri */
    logo_url?: string | null,
    text_matches?: SearchResultTextMatches,
    related?: (any)[] | null,
    aliases?: (any)[] | null,
}

  /**
 * User Search Result Item
 * User Search Result Item
 */
  export interface UserSearchResultItem {
    login: string,
  /** @format int64 */
    id: number,
    node_id: string,
  /** @format uri */
    avatar_url: string,
    gravatar_id: string | null,
  /** @format uri */
    url: string,
  /** @format uri */
    html_url: string,
  /** @format uri */
    followers_url: string,
  /** @format uri */
    subscriptions_url: string,
  /** @format uri */
    organizations_url: string,
  /** @format uri */
    repos_url: string,
  /** @format uri */
    received_events_url: string,
    type: string,
    score: number,
    following_url: string,
    gists_url: string,
    starred_url: string,
    events_url: string,
    public_repos?: number,
    public_gists?: number,
    followers?: number,
    following?: number,
  /** @format date-time */
    created_at?: string,
  /** @format date-time */
    updated_at?: string,
    name?: string | null,
    bio?: string | null,
  /** @format email */
    email?: string | null,
    location?: string | null,
    site_admin: boolean,
    hireable?: boolean | null,
    text_matches?: SearchResultTextMatches,
    blog?: string | null,
    company?: string | null,
  /** @format date-time */
    suspended_at?: string | null,
    user_view_type?: string,
}

  /**
 * Private User
 * Private User
 */
  export interface PrivateUser {
    login: string,
  /** @format int64 */
    id: number,
    user_view_type?: string,
    node_id: string,
  /** @format uri */
    avatar_url: string,
    gravatar_id: string | null,
  /** @format uri */
    url: string,
  /** @format uri */
    html_url: string,
  /** @format uri */
    followers_url: string,
    following_url: string,
    gists_url: string,
    starred_url: string,
  /** @format uri */
    subscriptions_url: string,
  /** @format uri */
    organizations_url: string,
  /** @format uri */
    repos_url: string,
    events_url: string,
  /** @format uri */
    received_events_url: string,
    type: string,
    site_admin: boolean,
    name: string | null,
    company: string | null,
    blog: string | null,
    location: string | null,
  /** @format email */
    email: string | null,
  /** @format email */
    notification_email?: string | null,
    hireable: boolean | null,
    bio: string | null,
    twitter_username?: string | null,
    public_repos: number,
    public_gists: number,
    followers: number,
    following: number,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
    private_gists: number,
    total_private_repos: number,
    owned_private_repos: number,
    disk_usage: number,
    collaborators: number,
    two_factor_authentication: boolean,
    plan?: {
    collaborators: number,
    name: string,
    space: number,
    private_repos: number,

},
    business_plus?: boolean,
    ldap_dn?: string,
}

  /**
 * Email
 * Email
 */
  export interface Email {
  /** @format email */
    email: string,
    primary: boolean,
    verified: boolean,
    visibility: string | null,
}

  /**
 * GPG Key
 * A unique encryption key
 */
  export interface GpgKey {
  /** @format int64 */
    id: number,
    name?: string | null,
    primary_key_id: number | null,
    key_id: string,
    public_key: string,
    emails: ({
    email?: string,
    verified?: boolean,

})[],
    subkeys: ({
  /** @format int64 */
    id?: number,
    primary_key_id?: number,
    key_id?: string,
    public_key?: string,
    emails?: ({
    email?: string,
    verified?: boolean,

})[],
    subkeys?: (any)[],
    can_sign?: boolean,
    can_encrypt_comms?: boolean,
    can_encrypt_storage?: boolean,
    can_certify?: boolean,
    created_at?: string,
    expires_at?: string | null,
    raw_key?: string | null,
    revoked?: boolean,

})[],
    can_sign: boolean,
    can_encrypt_comms: boolean,
    can_encrypt_storage: boolean,
    can_certify: boolean,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    expires_at: string | null,
    revoked: boolean,
    raw_key: string | null,
}

  /**
 * Key
 * Key
 */
  export interface Key {
    key: string,
  /** @format int64 */
    id: number,
    url: string,
    title: string,
  /** @format date-time */
    created_at: string,
    verified: boolean,
    read_only: boolean,
}

  /**
 * Social account
 * Social media account
 */
  export interface SocialAccount {
    provider: string,
    url: string,
}

  /**
 * SSH Signing Key
 * A public SSH key used to sign Git commits
 */
  export interface SshSigningKey {
    key: string,
    id: number,
    title: string,
  /** @format date-time */
    created_at: string,
}

  /**
 * Starred Repository
 * Starred Repository
 */
  export interface StarredRepository {
  /** @format date-time */
    starred_at: string,
  /** A repository on GitHub. */
    repo: Repository,
}

  /**
 * Hovercard
 * Hovercard
 */
  export interface Hovercard {
    contexts: ({
    message: string,
    octicon: string,

})[],
}

  /**
 * Key Simple
 * Key Simple
 */
  export interface KeySimple {
    id: number,
    key: string,
  /** @format date-time */
    created_at?: string,
}

  /**
 * Enterprise
 * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
 * on an enterprise account or an organization that's part of an enterprise account. For more information,
 * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
 */
  export interface EnterpriseWebhooks {
  /** A short description of the enterprise. */
    description?: string | null,
  /** @format uri */
    html_url: string,
  /**
   * The enterprise's website URL.
   * @format uri
   */
    website_url?: string | null,
  /** Unique identifier of the enterprise */
    id: number,
    node_id: string,
  /** The name of the enterprise. */
    name: string,
  /** The slug url identifier for the enterprise. */
    slug: string,
  /** @format date-time */
    created_at: string | null,
  /** @format date-time */
    updated_at: string | null,
  /** @format uri */
    avatar_url: string,
}

  /**
 * Simple Installation
 * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
 * for and sent to a GitHub App. For more information,
 * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
 */
  export interface SimpleInstallation {
  /** The ID of the installation. */
    id: number,
  /** The global node ID of the installation. */
    node_id: string,
}

  /**
 * Organization Simple
 * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
 * organization, or when the event occurs from activity in a repository owned by an organization.
 */
  export interface OrganizationSimpleWebhooks {
    login: string,
    id: number,
    node_id: string,
  /** @format uri */
    url: string,
  /** @format uri */
    repos_url: string,
  /** @format uri */
    events_url: string,
    hooks_url: string,
    issues_url: string,
    members_url: string,
    public_members_url: string,
    avatar_url: string,
    description: string | null,
}

  /**
 * Repository
 * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
 * when the event occurs from activity in a repository.
 */
  export interface RepositoryWebhooks {
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    node_id: string,
  /** The name of the repository. */
    name: string,
    full_name: string,
    license: (null | LicenseSimple),
    organization?: (null | SimpleUser),
    forks: number,
    permissions?: {
    admin: boolean,
    pull: boolean,
    triage?: boolean,
    push: boolean,
    maintain?: boolean,

},
  /** A GitHub user. */
    owner: SimpleUser,
  /**
   * Whether the repository is private or public.
   * @default false
   */
    private: boolean,
  /** @format uri */
    html_url: string,
    description: string | null,
    fork: boolean,
  /** @format uri */
    url: string,
    archive_url: string,
    assignees_url: string,
    blobs_url: string,
    branches_url: string,
    collaborators_url: string,
    comments_url: string,
    commits_url: string,
    compare_url: string,
    contents_url: string,
  /** @format uri */
    contributors_url: string,
  /** @format uri */
    deployments_url: string,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
  /** @format uri */
    forks_url: string,
    git_commits_url: string,
    git_refs_url: string,
    git_tags_url: string,
    git_url: string,
    issue_comment_url: string,
    issue_events_url: string,
    issues_url: string,
    keys_url: string,
    labels_url: string,
  /** @format uri */
    languages_url: string,
  /** @format uri */
    merges_url: string,
    milestones_url: string,
    notifications_url: string,
    pulls_url: string,
    releases_url: string,
    ssh_url: string,
  /** @format uri */
    stargazers_url: string,
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    trees_url: string,
    clone_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    homepage: string | null,
    language: string | null,
    forks_count: number,
    stargazers_count: number,
    watchers_count: number,
  /** The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0. */
    size: number,
  /** The default branch of the repository. */
    default_branch: string,
    open_issues_count: number,
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @default false
   */
    is_template?: boolean,
    topics?: (string)[],
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string,any>,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
    has_pages: boolean,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions?: boolean,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** Returns whether or not this repository disabled. */
    disabled: boolean,
  /**
   * The repository visibility: public, private, or internal.
   * @default "public"
   */
    visibility?: string,
  /** @format date-time */
    pushed_at: string | null,
  /** @format date-time */
    created_at: string | null,
  /** @format date-time */
    updated_at: string | null,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
    template_repository?: {
    id?: number,
    node_id?: string,
    name?: string,
    full_name?: string,
    owner?: {
    login?: string,
    id?: number,
    node_id?: string,
    avatar_url?: string,
    gravatar_id?: string,
    url?: string,
    html_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    starred_url?: string,
    subscriptions_url?: string,
    organizations_url?: string,
    repos_url?: string,
    events_url?: string,
    received_events_url?: string,
    type?: string,
    site_admin?: boolean,

},
    private?: boolean,
    html_url?: string,
    description?: string,
    fork?: boolean,
    url?: string,
    archive_url?: string,
    assignees_url?: string,
    blobs_url?: string,
    branches_url?: string,
    collaborators_url?: string,
    comments_url?: string,
    commits_url?: string,
    compare_url?: string,
    contents_url?: string,
    contributors_url?: string,
    deployments_url?: string,
    downloads_url?: string,
    events_url?: string,
    forks_url?: string,
    git_commits_url?: string,
    git_refs_url?: string,
    git_tags_url?: string,
    git_url?: string,
    issue_comment_url?: string,
    issue_events_url?: string,
    issues_url?: string,
    keys_url?: string,
    labels_url?: string,
    languages_url?: string,
    merges_url?: string,
    milestones_url?: string,
    notifications_url?: string,
    pulls_url?: string,
    releases_url?: string,
    ssh_url?: string,
    stargazers_url?: string,
    statuses_url?: string,
    subscribers_url?: string,
    subscription_url?: string,
    tags_url?: string,
    teams_url?: string,
    trees_url?: string,
    clone_url?: string,
    mirror_url?: string,
    hooks_url?: string,
    svn_url?: string,
    homepage?: string,
    language?: string,
    forks_count?: number,
    stargazers_count?: number,
    watchers_count?: number,
    size?: number,
    default_branch?: string,
    open_issues_count?: number,
    is_template?: boolean,
    topics?: (string)[],
    has_issues?: boolean,
    has_projects?: boolean,
    has_wiki?: boolean,
    has_pages?: boolean,
    has_downloads?: boolean,
    archived?: boolean,
    disabled?: boolean,
    visibility?: string,
    pushed_at?: string,
    created_at?: string,
    updated_at?: string,
    permissions?: {
    admin?: boolean,
    maintain?: boolean,
    push?: boolean,
    triage?: boolean,
    pull?: boolean,

},
    allow_rebase_merge?: boolean,
    temp_clone_token?: string,
    allow_squash_merge?: boolean,
    allow_auto_merge?: boolean,
    delete_branch_on_merge?: boolean,
    allow_update_branch?: boolean,
    use_squash_pr_title_as_default?: boolean,
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
    allow_merge_commit?: boolean,
    subscribers_count?: number,
    network_count?: number,

},
    temp_clone_token?: string,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   * @default false
   */
    allow_update_branch?: boolean,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @deprecated
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /** Whether to allow forking this repo */
    allow_forking?: boolean,
  /**
   * Whether to require contributors to sign off on web-based commits
   * @default false
   */
    web_commit_signoff_required?: boolean,
    subscribers_count?: number,
    network_count?: number,
    open_issues: number,
    watchers: number,
    master_branch?: string,
    starred_at?: string,
  /** Whether anonymous git access is enabled for this repository */
    anonymous_access_enabled?: boolean,
}

  /**
 * branch protection rule
 * The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/enterprise-server@3.17/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
 */
  export interface WebhooksRule {
    admin_enforced: boolean,
    allow_deletions_enforcement_level: "off" | "non_admins" | "everyone",
    allow_force_pushes_enforcement_level: "off" | "non_admins" | "everyone",
    authorized_actor_names: (string)[],
    authorized_actors_only: boolean,
    authorized_dismissal_actors_only: boolean,
    create_protected?: boolean,
  /** @format date-time */
    created_at: string,
    dismiss_stale_reviews_on_push: boolean,
    id: number,
    ignore_approvals_from_contributors: boolean,
    linear_history_requirement_enforcement_level: "off" | "non_admins" | "everyone",
  /** The enforcement level of the branch lock setting. `off` means the branch is not locked, `non_admins` means the branch is read-only for non_admins, and `everyone` means the branch is read-only for everyone. */
    lock_branch_enforcement_level: "off" | "non_admins" | "everyone",
  /** Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow users to pull changes from upstream when the branch is locked. This setting is only applicable for forks. */
    lock_allows_fork_sync?: boolean,
    merge_queue_enforcement_level: "off" | "non_admins" | "everyone",
    name: string,
    pull_request_reviews_enforcement_level: "off" | "non_admins" | "everyone",
    repository_id: number,
    require_code_owner_review: boolean,
  /** Whether the most recent push must be approved by someone other than the person who pushed it */
    require_last_push_approval?: boolean,
    required_approving_review_count: number,
    required_conversation_resolution_level: "off" | "non_admins" | "everyone",
    required_deployments_enforcement_level: "off" | "non_admins" | "everyone",
    required_status_checks: (string)[],
    required_status_checks_enforcement_level: "off" | "non_admins" | "everyone",
    signature_requirement_enforcement_level: "off" | "non_admins" | "everyone",
    strict_required_status_checks_policy: boolean,
  /** @format date-time */
    updated_at: string,
}

  /**
 * Push ruleset bypass exemption request data
 * Push rules that are being requested to be bypassed.
 */
  export interface ExemptionRequestPushRulesetBypass {
  /** The type of request */
    type?: "push_ruleset_bypass",
  /** The data pertaining to the push rules that are being requested to be bypassed. */
    data?: ({
  /** The ID of the ruleset for the rules that were violated */
    ruleset_id?: number,
  /** The name of the ruleset for the rules that were violated */
    ruleset_name?: string,
  /** The number of violations */
    total_violations?: number,
  /** The type of rule that was violated */
    rule_type?: string,

})[],
}

  /**
 * Secret scanning push protection exemption request data
 * Secret scanning push protections that are being requested to be bypassed.
 */
  export interface ExemptionRequestSecretScanning {
  /** The type of request */
    type?: "secret_scanning",
  /** The data pertaining to the secret scanning push protections that are being requested to be bypassed. */
    data?: ({
  /** The type of secret that was detected */
    secret_type?: string,
  /** The location data of the secret that was detected */
    locations?: ({
  /** The commit SHA where the secret was detected */
    commit?: string,
  /** The branch where the secret was detected */
    branch?: string,
  /** The path of the file where the secret was detected */
    path?: string,

})[],

})[],
}

  /**
 * Secret scanning alert dismissal request data
 * Secret scanning alerts that have dismissal requests.
 */
  export interface DismissalRequestSecretScanning {
  /** The type of request */
    type?: "secret_scanning_closure",
  /** The data related to the secret scanning alerts that have dismissal requests. */
    data?: ({
  /** The reason for the dismissal request */
    reason?: "fixed_later" | "false_positive" | "tests" | "revoked",
  /** The type of secret that was detected */
    secret_type?: string,
  /** The number of the alert that was detected */
    alert_number?: string,

})[],
}

  /**
 * Code scanning alert dismissal request data
 * Code scanning alerts that have dismissal requests.
 */
  export interface DismissalRequestCodeScanning {
  /** The type of request */
    type?: "code_scanning_alert_dismissal",
  /** The data related to the code scanning alerts that have dismissal requests. */
    data?: ({
  /** The number of the alert to be dismissed */
    alert_number?: string,

})[],
}

  /**
 * Secret Scanning Push Protection Exemption Request Metadata
 * Metadata for a secret scanning push protection exemption request.
 */
  export interface ExemptionRequestSecretScanningMetadata {
  /** The label for the secret type */
    label?: string,
  /** The reason for the exemption request */
    reason?: "fixed_later" | "false_positive" | "tests",
}

  /**
 * Secret scanning alert dismissal request metadata
 * Metadata for a secret scanning alert dismissal request.
 */
  export interface DismissalRequestSecretScanningMetadata {
  /** The title of the secret alert */
    alert_title?: string,
  /** The reason for the dismissal request */
    reason?: "fixed_later" | "false_positive" | "tests" | "revoked",
}

  /**
 * Code scanning alert dismissal request metadata
 * Metadata for a code scanning alert dismissal request.
 */
  export interface DismissalRequestCodeScanningMetadata {
  /** The title of the code scanning alert */
    alert_title?: string,
  /** The reason for the dismissal request */
    reason?: "false positive" | "won't fix" | "used in tests",
}

  /**
 * Exemption response
 * A response to an exemption request by a delegated bypasser.
 */
  export interface ExemptionResponse {
  /** The ID of the exemption response. */
    id?: number,
  /** The ID of the user who reviewed the exemption request. */
    reviewer_id?: number,
  /** The login of the user who reviewed the exemption request. */
    reviewer_login?: string,
  /** The status of the exemption response. */
    status?: "approved" | "rejected" | "dismissed",
  /** The comment the reviewer provided when responding to the exemption request. */
    reviewer_comment?: string | null,
  /**
   * The date and time the exemption request was created.
   * @format date-time
   */
    created_at?: string,
}

  /**
 * Exemption Request
 * A request from a user to be exempted from a set of rules.
 */
  export interface ExemptionRequest {
  /** The ID of the exemption request. */
    id?: number,
  /** The number uniquely identifying the exemption request within it's repository. */
    number?: number | null,
  /** The ID of the repository the exemption request is for. */
    repository_id?: number,
  /** The ID of the user who requested the exemption. */
    requester_id?: number,
  /** The login of the user who requested the exemption. */
    requester_login?: string,
  /** The type of request. */
    request_type?: "push_ruleset_bypass" | "secret_scanning" | "secret_scanning_closure" | "code_scanning_alert_dismissal",
    exemption_request_data?: (ExemptionRequestPushRulesetBypass | ExemptionRequestSecretScanning | DismissalRequestSecretScanning | DismissalRequestCodeScanning),
  /** The unique identifier for the request type of the exemption request. For example, a commit SHA. */
    resource_identifier?: string,
  /** The status of the exemption request. */
    status?: "pending" | "rejected" | "cancelled" | "completed",
  /** The comment the requester provided when creating the exemption request. */
    requester_comment?: string | null,
  /** Metadata about the exemption request. */
    metadata?: (ExemptionRequestSecretScanningMetadata | DismissalRequestSecretScanningMetadata | DismissalRequestCodeScanningMetadata),
  /**
   * The date and time the exemption request will expire.
   * @format date-time
   */
    expires_at?: string,
  /**
   * The date and time the exemption request was created.
   * @format date-time
   */
    created_at?: string,
  /** The responses to the exemption request. */
    responses?: (any)[] | null,
  /**
   * The URL to view the exemption request in a browser.
   * @format uri
   */
    html_url?: string,
}

  /** A suite of checks performed on the code of a given code change */
  export interface SimpleCheckSuite {
    after?: string | null,
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
    app?: Integration,
    before?: string | null,
    conclusion?: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required" | "stale" | "startup_failure",
  /** @format date-time */
    created_at?: string,
    head_branch?: string | null,
  /** The SHA of the head commit that is being checked. */
    head_sha?: string,
    id?: number,
    node_id?: string,
    pull_requests?: (PullRequestMinimal)[],
  /** Minimal Repository */
    repository?: MinimalRepository,
    status?: "queued" | "in_progress" | "completed" | "pending" | "waiting",
  /** @format date-time */
    updated_at?: string,
    url?: string,
}

  /**
 * CheckRun
 * A check performed on the code of a given code change
 */
  export interface CheckRunWithSimpleCheckSuite {
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
    app: Integration,
  /** A suite of checks performed on the code of a given code change */
    check_suite: SimpleCheckSuite,
  /** @format date-time */
    completed_at: string | null,
    conclusion: "waiting" | "pending" | "startup_failure" | "stale" | "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required",
  /** A deployment created as the result of an Actions check run from a workflow that references an environment */
    deployment?: DeploymentSimple,
    details_url: string,
    external_id: string,
  /** The SHA of the commit that is being checked. */
    head_sha: string,
    html_url: string,
  /** The id of the check. */
    id: number,
  /** The name of the check. */
    name: string,
    node_id: string,
    output: {
    annotations_count: number,
  /** @format uri */
    annotations_url: string,
    summary: string | null,
    text: string | null,
    title: string | null,

},
    pull_requests: (PullRequestMinimal)[],
  /** @format date-time */
    started_at: string,
  /** The phase of the lifecycle that the check is currently in. */
    status: "queued" | "in_progress" | "completed" | "pending",
    url: string,
}

  /** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  export type WebhooksCodeScanningCommitOid = string

  /** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
  export type WebhooksCodeScanningRef = string

  /** The pusher type for the event. Can be either `user` or a deploy key. */
  export type WebhooksDeployPusherType = string

  /** The [`git ref`](https://docs.github.com/enterprise-server@3.17/rest/git/refs#get-a-reference) resource. */
  export type WebhooksRef0 = string

  /** The [`deploy key`](https://docs.github.com/enterprise-server@3.17/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource. */
  export interface WebhooksDeployKey {
    added_by?: string | null,
    created_at: string,
    id: number,
    key: string,
    last_used?: string | null,
    read_only: boolean,
    title: string,
  /** @format uri */
    url: string,
    verified: boolean,
    enabled?: boolean,
}

  /** Workflow */
  export interface WebhooksWorkflow {
  /** @format uri */
    badge_url: string,
  /** @format date-time */
    created_at: string,
  /** @format uri */
    html_url: string,
    id: number,
    name: string,
    node_id: string,
    path: string,
    state: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
}

    export interface WebhooksApprover {
    avatar_url?: string,
    events_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    html_url?: string,
    id?: number,
    login?: string,
    node_id?: string,
    organizations_url?: string,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    url?: string,
    user_view_type?: string,
}

    export type WebhooksReviewers = ({
  /** User */
    reviewer?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

},
    type?: "User",

})[]

    export interface WebhooksWorkflowJobRun {
    conclusion: null,
    created_at: string,
    environment: string,
    html_url: string,
    id: number,
    name: null,
    status: string,
    updated_at: string,
}

  /** User */
  export interface WebhooksUser {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,
}

    export interface WebhooksAnswer {
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
    body: string,
    child_comment_count: number,
  /** @format date-time */
    created_at: string,
    discussion_id: number,
    html_url: string,
    id: number,
    node_id: string,
    parent_id: null,
  /** Reactions */
    reactions?: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
    repository_url: string,
  /** @format date-time */
    updated_at: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
}

  /**
 * Discussion
 * A Discussion in a repository.
 */
  export interface Discussion {
    active_lock_reason: string | null,
    answer_chosen_at: string | null,
  /** User */
    answer_chosen_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    answer_html_url: string | null,
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
    body: string,
    category: {
  /** @format date-time */
    created_at: string,
    description: string,
    emoji: string,
    id: number,
    is_answerable: boolean,
    name: string,
    node_id?: string,
    repository_id: number,
    slug: string,
    updated_at: string,

},
    comments: number,
  /** @format date-time */
    created_at: string,
    html_url: string,
    id: number,
    locked: boolean,
    node_id: string,
    number: number,
  /** Reactions */
    reactions?: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
    repository_url: string,
  /**
   * The current state of the discussion.
   * `converting` means that the discussion is being converted from an issue.
   * `transferring` means that the discussion is being transferred from another repository.
   */
    state: "open" | "closed" | "locked" | "converting" | "transferring",
  /** The reason for the current state */
    state_reason: "resolved" | "outdated" | "duplicate" | "reopened",
    timeline_url?: string,
    title: string,
  /** @format date-time */
    updated_at: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    labels?: (Label)[],
}

    export interface WebhooksComment {
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
    body: string,
    child_comment_count: number,
    created_at: string,
    discussion_id: number,
    html_url: string,
    id: number,
    node_id: string,
    parent_id: number | null,
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
    repository_url: string,
    updated_at: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
}

  /** Label */
  export interface WebhooksLabel {
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,
}

  /** An array of repository objects that the installation can access. */
  export type WebhooksRepositories = ({
    full_name: string,
  /** Unique identifier of the repository */
    id: number,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** Whether the repository is private or public. */
    private: boolean,

})[]

  /** An array of repository objects, which were added to the installation. */
  export type WebhooksRepositoriesAdded = ({
    full_name: string,
  /** Unique identifier of the repository */
    id: number,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** Whether the repository is private or public. */
    private: boolean,

})[]

  /**
 * issue comment
 * The [comment](https://docs.github.com/enterprise-server@3.17/rest/issues/comments#get-an-issue-comment) itself.
 */
  export interface WebhooksIssueComment {
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** Contents of the issue comment */
    body: string,
  /** @format date-time */
    created_at: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the issue comment
   * @format int64
   */
    id: number,
  /** @format uri */
    issue_url: string,
    node_id: string,
  /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
    performed_via_github_app: Integration,
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the issue comment
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
}

  /** The changes to the comment. */
  export interface WebhooksChanges {
    body?: {
  /** The previous version of the body. */
    from: string,

},
}

  /**
 * Issue
 * The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself.
 */
  export interface WebhooksIssue {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** Contents of the issue */
    body: string | null,
  /** @format date-time */
    closed_at: string | null,
    comments: number,
  /** @format uri */
    comments_url: string,
  /** @format date-time */
    created_at: string,
    draft?: boolean,
  /** @format uri */
    events_url: string,
  /** @format uri */
    html_url: string,
  /** @format int64 */
    id: number,
    labels?: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
  /** @format uri-template */
    labels_url: string,
    locked?: boolean,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "reminder" | "pull_request_review_thread")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write" | "admin",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    pull_request?: {
  /** @format uri */
    diff_url?: string,
  /** @format uri */
    html_url?: string,
  /** @format date-time */
    merged_at?: string | null,
  /** @format uri */
    patch_url?: string,
  /** @format uri */
    url?: string,

},
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** @format uri */
    repository_url: string,
  /** Sub-issues Summary */
    sub_issues_summary?: {
    total: number,
    completed: number,
    percent_completed: number,

},
  /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed",
    state_reason?: string | null,
  /** @format uri */
    timeline_url?: string,
  /** Title of the issue */
    title: string,
  /** The type of issue. */
    type?: IssueType,
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the issue
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
}

  /**
 * Milestone
 * A collection of related issues and pull requests.
 */
  export interface WebhooksMilestone {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
}

  /**
 * Issue
 * The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself.
 */
  export interface WebhooksIssue2 {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** Contents of the issue */
    body: string | null,
  /** @format date-time */
    closed_at: string | null,
    comments: number,
  /** @format uri */
    comments_url: string,
  /** @format date-time */
    created_at: string,
    draft?: boolean,
  /** @format uri */
    events_url: string,
  /** @format uri */
    html_url: string,
  /** @format int64 */
    id: number,
    labels?: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
  /** @format uri-template */
    labels_url: string,
    locked?: boolean,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    pull_request?: {
  /** @format uri */
    diff_url?: string,
  /** @format uri */
    html_url?: string,
  /** @format date-time */
    merged_at?: string | null,
  /** @format uri */
    patch_url?: string,
  /** @format uri */
    url?: string,

},
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** @format uri */
    repository_url: string,
  /** Sub-issues Summary */
    sub_issues_summary?: {
    total: number,
    completed: number,
    percent_completed: number,

},
  /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed",
    state_reason?: string | null,
  /** @format uri */
    timeline_url?: string,
  /** Title of the issue */
    title: string,
  /** The type of issue. */
    type?: IssueType,
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the issue
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
}

  /** User */
  export interface WebhooksUserMannequin {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,
}

  /**
 * Team
 * Groups of organization members that gives permissions on specified repositories.
 */
  export interface WebhooksTeam {
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** Whether team members will receive notifications when their team is @mentioned */
    notification_setting: "notifications_enabled" | "notifications_disabled",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
    notification_setting?: "notifications_enabled" | "notifications_disabled",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,
}

  /**
 * Milestone
 * A collection of related issues and pull requests.
 */
  export interface WebhooksMilestone3 {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
}

  /**
 * Membership
 * The membership between the user and the organization. Not present when the action is `member_invited`.
 */
  export interface WebhooksMembership {
  /** @format uri */
    organization_url: string,
    role: string,
  /** Whether the user has direct membership in the organization. */
    direct_membership?: boolean,
  /**
   * The slugs of the enterprise teams providing the user with indirect membership in the organization.
   * A limit of 100 enterprise team slugs is returned.
   * @maxItems 100
   */
    enterprise_teams_providing_indirect_membership?: (string)[],
    state: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
}

  /**
 * Personal Access Token Request
 * Details of a Personal Access Token Request.
 */
  export interface PersonalAccessTokenRequest {
  /** Unique identifier of the request for access via fine-grained personal access token. Used as the `pat_request_id` parameter in the list and review API calls. */
    id: number,
  /** A GitHub user. */
    owner: SimpleUser,
  /** New requested permissions, categorized by type of permission. */
    permissions_added: {
    organization?: Record<string,string>,
    repository?: Record<string,string>,
    other?: Record<string,string>,

},
  /** Requested permissions that elevate access for a previously approved request for access, categorized by type of permission. */
    permissions_upgraded: {
    organization?: Record<string,string>,
    repository?: Record<string,string>,
    other?: Record<string,string>,

},
  /** Permissions requested, categorized by type of permission. This field incorporates `permissions_added` and `permissions_upgraded`. */
    permissions_result: {
    organization?: Record<string,string>,
    repository?: Record<string,string>,
    other?: Record<string,string>,

},
  /** Type of repository selection requested. */
    repository_selection: "none" | "all" | "subset",
  /** The number of repositories the token is requesting access to. This field is only populated when `repository_selection` is `subset`. */
    repository_count: number | null,
  /** An array of repository objects the token is requesting access to. This field is only populated when `repository_selection` is `subset`. */
    repositories: (any)[] | null,
  /** Date and time when the request for access was created. */
    created_at: string,
  /** Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants. */
    token_id: number,
  /** The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens. */
    token_name: string,
  /** Whether the associated fine-grained personal access token has expired. */
    token_expired: boolean,
  /** Date and time when the associated fine-grained personal access token expires. */
    token_expires_at: string | null,
  /** Date and time when the associated fine-grained personal access token was last used for authentication. */
    token_last_used_at: string | null,
}

  /** Project Card */
  export interface WebhooksProjectCard {
    after_id?: number | null,
  /** Whether or not the card is archived */
    archived: boolean,
    column_id: number,
  /** @format uri */
    column_url: string,
  /** @format uri */
    content_url?: string,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The project card's ID */
    id: number,
    node_id: string,
    note: string | null,
  /** @format uri */
    project_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
}

  /** Project */
  export interface WebhooksProject {
  /** Body of the project */
    body: string | null,
  /** @format uri */
    columns_url: string,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** @format uri */
    html_url: string,
    id: number,
  /** Name of the project */
    name: string,
    node_id: string,
    number: number,
  /** @format uri */
    owner_url: string,
  /** State of the project; either 'open' or 'closed' */
    state: "open" | "closed",
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
}

  /** Project Column */
  export interface WebhooksProjectColumn {
    after_id?: number | null,
  /** @format uri */
    cards_url: string,
  /** @format date-time */
    created_at: string,
  /** The unique identifier of the project column */
    id: number,
  /** Name of the project column */
    name: string,
    node_id: string,
  /** @format uri */
    project_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
}

  /**
 * Projects v2 Project
 * A projects v2 project
 */
  export interface ProjectsV2 {
    id: number,
    node_id: string,
  /** A GitHub user. */
    owner: SimpleUser,
  /** A GitHub user. */
    creator: SimpleUser,
    title: string,
    description: string | null,
    public: boolean,
  /** @format date-time */
    closed_at: string | null,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
    number: number,
    short_description: string | null,
  /** @format date-time */
    deleted_at: string | null,
    deleted_by: (null | SimpleUser),
}

    export interface WebhooksProjectChanges {
    archived_at?: {
  /** @format date-time */
    from?: string | null,
  /** @format date-time */
    to?: string | null,

},
}

  /**
 * Projects v2 Item
 * An item belonging to a project
 */
  export interface ProjectsV2Item {
    id: number,
    node_id?: string,
    project_node_id?: string,
    content_node_id: string,
  /** The type of content tracked in a project item */
    content_type: ProjectsV2ItemContentType,
  /** A GitHub user. */
    creator?: SimpleUser,
  /** @format date-time */
    created_at: string,
  /** @format date-time */
    updated_at: string,
  /** @format date-time */
    archived_at: string | null,
}

  /**
 * Projects v2 Single Select Option
 * An option for a single select field
 */
  export interface ProjectsV2SingleSelectOption {
    id: string,
    name: string,
    color?: string | null,
    description?: string | null,
}

  /**
 * Projects v2 Iteration Setting
 * An iteration setting for an iteration field
 */
  export interface ProjectsV2IterationSetting {
    id: string,
    title: string,
    duration?: number | null,
    start_date?: string | null,
}

  /** The pull request number. */
  export type WebhooksNumber = number

    export type PullRequestWebhook = (PullRequest & {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow updating the pull request's branch. */
    allow_update_branch?: boolean,
  /**
   * Whether to delete head branches when pull requests are merged.
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /**
   * The default value for a merge commit message.
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /**
   * The default value for a squash merge commit message:
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.**
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,

})

  /** Pull Request */
  export interface WebhooksPullRequest5 {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
    additions?: number,
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    changed_files?: number,
  /** @format date-time */
    closed_at: string | null,
    comments?: number,
  /** @format uri */
    comments_url: string,
    commits?: number,
  /** @format uri */
    commits_url: string,
  /** @format date-time */
    created_at: string,
    deletions?: number,
  /** @format uri */
    diff_url: string,
  /** Indicates whether or not the pull request is a draft. */
    draft: boolean,
    head: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
  /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean,
    merge_commit_sha: string | null,
    mergeable?: boolean | null,
    mergeable_state?: string,
    merged?: boolean | null,
  /** @format date-time */
    merged_at: string | null,
  /** User */
    merged_by?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
  /** Number uniquely identifying the pull request within its repository. */
    number: number,
  /** @format uri */
    patch_url: string,
    rebaseable?: boolean | null,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
    review_comments?: number,
  /** @format uri */
    review_comments_url: string,
  /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
  /** The title of the pull request. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
}

  /**
 * Pull Request Review Comment
 * The [comment](https://docs.github.com/enterprise-server@3.17/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
 */
  export interface WebhooksReviewComment {
    _links: {
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    pull_request: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},

},
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** The text of the comment. */
    body: string,
  /** The SHA of the commit to which the comment applies. */
    commit_id: string,
  /** @format date-time */
    created_at: string,
  /** The diff of the line that the comment refers to. */
    diff_hunk: string,
  /**
   * HTML URL for the pull request review comment.
   * @format uri
   */
    html_url: string,
  /** The ID of the pull request review comment. */
    id: number,
  /** The comment ID to reply to. */
    in_reply_to_id?: number,
  /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    line: number | null,
  /** The node ID of the pull request review comment. */
    node_id: string,
  /** The SHA of the original commit to which the comment applies. */
    original_commit_id: string,
  /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    original_line: number,
  /** The index of the original line in the diff to which the comment applies. */
    original_position: number,
  /** The first line of the range for a multi-line comment. */
    original_start_line: number | null,
  /** The relative path of the file to which the comment applies. */
    path: string,
  /** The line index in the diff to which the comment applies. */
    position: number | null,
  /** The ID of the pull request review to which the comment belongs. */
    pull_request_review_id: number | null,
  /**
   * URL for the pull request that the review comment belongs to.
   * @format uri
   */
    pull_request_url: string,
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** The side of the first line of the range for a multi-line comment. */
    side: "LEFT" | "RIGHT",
  /** The first line of the range for a multi-line comment. */
    start_line: number | null,
  /**
   * The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
    start_side: "LEFT" | "RIGHT",
  /** The level at which the comment is targeted, can be a diff line or a file. */
    subject_type?: "line" | "file",
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the pull request review comment
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
}

  /** The review that was affected. */
  export interface WebhooksReview {
    _links: {
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    pull_request: {
  /** @format uri-template */
    href: string,

},

},
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** The text of the review. */
    body: string | null,
  /** A commit SHA for the review. */
    commit_id: string,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the review */
    id: number,
    node_id: string,
  /** @format uri */
    pull_request_url: string,
    state: string,
  /** @format date-time */
    submitted_at: string | null,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
}

    export type WebhooksNullableString = string | null

  /**
 * Release
 * The [release](https://docs.github.com/enterprise-server@3.17/rest/releases/releases/#get-a-release) object.
 */
  export interface WebhooksRelease {
    assets: ({
  /** @format uri */
    browser_download_url: string,
    content_type: string,
  /** @format date-time */
    created_at: string,
    download_count: number,
    id: number,
    label: string | null,
  /** The file name of the asset. */
    name: string,
    node_id: string,
    size: number,
    digest: string | null,
  /** State of the release asset. */
    state: "uploaded",
  /** @format date-time */
    updated_at: string,
  /** User */
    uploader?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

},
  /** @format uri */
    url: string,

})[],
  /** @format uri */
    assets_url: string,
  /** User */
    author: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    body: string | null,
  /** @format date-time */
    created_at: string | null,
  /** @format uri */
    discussion_url?: string,
  /** Whether the release is a draft or published */
    draft: boolean,
  /** @format uri */
    html_url: string,
    id: number,
  /** Whether or not the release is immutable. */
    immutable: boolean,
    name: string | null,
    node_id: string,
  /** Whether the release is identified as a prerelease or a full release. */
    prerelease: boolean,
  /** @format date-time */
    published_at: string | null,
  /** Reactions */
    reactions?: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** The name of the tag. */
    tag_name: string,
  /** @format uri */
    tarball_url: string | null,
  /** Specifies the commitish value that determines where the Git tag is created from. */
    target_commitish: string,
  /** @format uri-template */
    upload_url: string,
  /** @format uri */
    url: string,
  /** @format uri */
    zipball_url: string | null,
}

  /**
 * Release
 * The [release](https://docs.github.com/enterprise-server@3.17/rest/releases/releases/#get-a-release) object.
 */
  export interface WebhooksRelease1 {
    assets: ({
  /** @format uri */
    browser_download_url: string,
    content_type: string,
  /** @format date-time */
    created_at: string,
    download_count: number,
    id: number,
    label: string | null,
  /** The file name of the asset. */
    name: string,
    node_id: string,
    size: number,
    digest: string | null,
  /** State of the release asset. */
    state: "uploaded",
  /** @format date-time */
    updated_at: string,
  /** User */
    uploader?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

},
  /** @format uri */
    url: string,

})[],
  /** @format uri */
    assets_url: string,
  /** User */
    author: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    body: string | null,
  /** @format date-time */
    created_at: string | null,
  /** @format uri */
    discussion_url?: string,
  /** Whether the release is a draft or published */
    draft: boolean,
  /** @format uri */
    html_url: string,
    id: number,
  /** Whether or not the release is immutable. */
    immutable: boolean,
    name: string | null,
    node_id: string,
  /** Whether the release is identified as a prerelease or a full release. */
    prerelease: boolean,
  /** @format date-time */
    published_at: string | null,
  /** Reactions */
    reactions?: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** The name of the tag. */
    tag_name: string,
  /** @format uri */
    tarball_url: string | null,
  /** Specifies the commitish value that determines where the Git tag is created from. */
    target_commitish: string,
  /** @format uri-template */
    upload_url: string,
  /** @format uri */
    url: string,
  /** @format uri */
    zipball_url: string | null,
}

  /**
 * Repository Vulnerability Alert Alert
 * The security alert of the vulnerable dependency.
 */
  export interface WebhooksAlert {
    affected_package_name: string,
    affected_range: string,
    created_at: string,
    dismiss_reason?: string,
    dismissed_at?: string,
  /** User */
    dismisser?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

},
    external_identifier: string,
  /** @format uri */
    external_reference: string | null,
    fix_reason?: string,
  /** @format date-time */
    fixed_at?: string,
    fixed_in?: string,
    ghsa_id: string,
    id: number,
    node_id: string,
    number: number,
    severity: string,
    state: "open",
}

    export interface SecretScanningAlertWebhook {
  /** The security alert number. */
    number?: AlertNumber,
  /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    created_at?: AlertCreatedAt,
    updated_at?: (null | AlertUpdatedAt),
  /** The REST API URL of the alert resource. */
    url?: AlertUrl,
  /** The GitHub URL of the alert resource. */
    html_url?: AlertHtmlUrl,
  /**
   * The REST API URL of the code locations for this alert.
   * @format uri
   */
    locations_url?: string,
  /** The reason for resolving the alert. */
    resolution?: SecretScanningAlertResolutionWebhook,
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    resolved_at?: string | null,
    resolved_by?: (null | SimpleUser),
  /** An optional comment to resolve an alert. */
    resolution_comment?: string | null,
  /** The type of secret that secret scanning detected. */
    secret_type?: string,
  /**
   * User-friendly name for the detected secret, matching the `secret_type`.
   * For a list of built-in patterns, see "[Supported secret scanning patterns](https://docs.github.com/enterprise-server@3.17/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)."
   */
    secret_type_display_name?: string,
  /** The token status as of the latest validity check. */
    validity?: "active" | "inactive" | "unknown",
  /** Whether push protection was bypassed for the detected secret. */
    push_protection_bypassed?: boolean | null,
    push_protection_bypassed_by?: (null | SimpleUser),
  /**
   * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    push_protection_bypassed_at?: string | null,
    push_protection_bypass_request_reviewer?: (null | SimpleUser),
  /** An optional comment when reviewing a push protection bypass. */
    push_protection_bypass_request_reviewer_comment?: string | null,
  /** An optional comment when requesting a push protection bypass. */
    push_protection_bypass_request_comment?: string | null,
  /**
   * The URL to a push protection bypass request.
   * @format uri
   */
    push_protection_bypass_request_html_url?: string | null,
  /** Whether the detected secret was found in multiple repositories in the same organization or business. */
    multi_repo?: boolean | null,
}

  /** The details of the security advisory, including summary, description, and severity. */
  export interface WebhooksSecurityAdvisory {
    cvss: {
    score: number,
    vector_string: string | null,

},
    cvss_severities?: CvssSeverities,
    cwes: ({
    cwe_id: string,
    name: string,

})[],
    description: string,
    ghsa_id: string,
    identifiers: ({
    type: string,
    value: string,

})[],
    published_at: string,
    references: ({
  /** @format uri */
    url: string,

})[],
    severity: string,
    summary: string,
    updated_at: string,
    vulnerabilities: ({
    first_patched_version: {
    identifier: string,

},
    package: {
    ecosystem: string,
    name: string,

},
    severity: string,
    vulnerable_version_range: string,

})[],
    withdrawn_at: string | null,
}

    export interface WebhooksSponsorship {
    created_at: string,
    maintainer?: {
    avatar_url?: string,
    events_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    html_url?: string,
    id?: number,
    login?: string,
    node_id?: string,
    organizations_url?: string,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    url?: string,
    user_view_type?: string,

},
    node_id: string,
    privacy_level: string,
  /** User */
    sponsor: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** User */
    sponsorable: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /**
   * Sponsorship Tier
   * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
   */
    tier: {
    created_at: string,
    description: string,
    is_custom_ammount?: boolean,
    is_custom_amount?: boolean,
    is_one_time: boolean,
    monthly_price_in_cents: number,
    monthly_price_in_dollars: number,
    name: string,
    node_id: string,

},
}

  /** The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect. */
  export type WebhooksEffectiveDate = string

    export interface WebhooksChanges8 {
    tier: {
  /**
   * Sponsorship Tier
   * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
   */
    from: {
    created_at: string,
    description: string,
    is_custom_ammount?: boolean,
    is_custom_amount?: boolean,
    is_one_time: boolean,
    monthly_price_in_cents: number,
    monthly_price_in_dollars: number,
    name: string,
    node_id: string,

},

},
}

  /**
 * Team
 * Groups of organization members that gives permissions on specified repositories.
 */
  export interface WebhooksTeam1 {
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** Whether team members will receive notifications when their team is @mentioned */
    notification_setting: "notifications_enabled" | "notifications_disabled",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** Whether team members will receive notifications when their team is @mentioned */
    notification_setting?: "notifications_enabled" | "notifications_disabled",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,
}

  /** branch protection configuration disabled event */
  export interface WebhookBranchProtectionConfigurationDisabled {
    action: "disabled",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** branch protection configuration enabled event */
  export interface WebhookBranchProtectionConfigurationEnabled {
    action: "enabled",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** branch protection rule created event */
  export interface WebhookBranchProtectionRuleCreated {
    action: "created",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/enterprise-server@3.17/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings. */
    rule: WebhooksRule,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** branch protection rule deleted event */
  export interface WebhookBranchProtectionRuleDeleted {
    action: "deleted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/enterprise-server@3.17/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings. */
    rule: WebhooksRule,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** branch protection rule edited event */
  export interface WebhookBranchProtectionRuleEdited {
    action: "edited",
  /** If the action was `edited`, the changes to the rule. */
    changes?: {
    admin_enforced?: {
    from: boolean | null,

},
    authorized_actor_names?: {
    from: (string)[],

},
    authorized_actors_only?: {
    from: boolean | null,

},
    authorized_dismissal_actors_only?: {
    from: boolean | null,

},
    linear_history_requirement_enforcement_level?: {
    from: "off" | "non_admins" | "everyone",

},
    lock_branch_enforcement_level?: {
    from: "off" | "non_admins" | "everyone",

},
    lock_allows_fork_sync?: {
    from: boolean | null,

},
    pull_request_reviews_enforcement_level?: {
    from: "off" | "non_admins" | "everyone",

},
    require_last_push_approval?: {
    from: boolean | null,

},
    required_status_checks?: {
    from: (string)[],

},
    required_status_checks_enforcement_level?: {
    from: "off" | "non_admins" | "everyone",

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/enterprise-server@3.17/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings. */
    rule: WebhooksRule,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Exemption request cancellation event */
  export interface WebhookExemptionRequestCancelled {
    action: "cancelled",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A request from a user to be exempted from a set of rules. */
    exemption_request: ExemptionRequest,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Exemption request completed event */
  export interface WebhookExemptionRequestCompleted {
    action: "completed",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A request from a user to be exempted from a set of rules. */
    exemption_request: ExemptionRequest,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Exemption request created event */
  export interface WebhookExemptionRequestCreated {
    action: "created",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A request from a user to be exempted from a set of rules. */
    exemption_request: ExemptionRequest,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Exemption response dismissed event */
  export interface WebhookExemptionRequestResponseDismissed {
    action: "response_dismissed",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A request from a user to be exempted from a set of rules. */
    exemption_request: ExemptionRequest,
  /** A response to an exemption request by a delegated bypasser. */
    exemption_response: ExemptionResponse,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Exemption response submitted event */
  export interface WebhookExemptionRequestResponseSubmitted {
    action: "response_submitted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A request from a user to be exempted from a set of rules. */
    exemption_request: ExemptionRequest,
  /** A response to an exemption request by a delegated bypasser. */
    exemption_response: ExemptionResponse,
  /** A GitHub user. */
    sender: SimpleUser,
}

    export interface WebhookCacheSync {
    after: string,
    before: string,
    cache_location: string,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    ref: string,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** Check Run Completed Event */
  export interface WebhookCheckRunCompleted {
    action?: "completed",
  /** A check performed on the code of a given code change */
    check_run: CheckRunWithSimpleCheckSuite,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /**
 * Check Run Completed Event
 * The check_run.completed webhook encoded with URL encoding
 */
  export interface WebhookCheckRunCompletedFormEncoded {
  /** A URL-encoded string of the check_run.completed JSON payload. The decoded payload is a JSON object. */
    payload: string,
}

  /** Check Run Created Event */
  export interface WebhookCheckRunCreated {
    action?: "created",
  /** A check performed on the code of a given code change */
    check_run: CheckRunWithSimpleCheckSuite,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /**
 * Check Run Created Event
 * The check_run.created webhook encoded with URL encoding
 */
  export interface WebhookCheckRunCreatedFormEncoded {
  /** A URL-encoded string of the check_run.created JSON payload. The decoded payload is a JSON object. */
    payload: string,
}

  /** Check Run Requested Action Event */
  export interface WebhookCheckRunRequestedAction {
    action: "requested_action",
  /** A check performed on the code of a given code change */
    check_run: CheckRunWithSimpleCheckSuite,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** The action requested by the user. */
    requested_action?: {
  /** The integrator reference of the action requested by the user. */
    identifier?: string,

},
  /** A GitHub user. */
    sender: SimpleUser,
}

  /**
 * Check Run Requested Action Event
 * The check_run.requested_action webhook encoded with URL encoding
 */
  export interface WebhookCheckRunRequestedActionFormEncoded {
  /** A URL-encoded string of the check_run.requested_action JSON payload. The decoded payload is a JSON object. */
    payload: string,
}

  /** Check Run Re-Requested Event */
  export interface WebhookCheckRunRerequested {
    action?: "rerequested",
  /** A check performed on the code of a given code change */
    check_run: CheckRunWithSimpleCheckSuite,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /**
 * Check Run Re-Requested Event
 * The check_run.rerequested webhook encoded with URL encoding
 */
  export interface WebhookCheckRunRerequestedFormEncoded {
  /** A URL-encoded string of the check_run.rerequested JSON payload. The decoded payload is a JSON object. */
    payload: string,
}

  /** check_suite completed event */
  export interface WebhookCheckSuiteCompleted {
    action: "completed",
  /** The [check_suite](https://docs.github.com/enterprise-server@3.17/rest/checks/suites#get-a-check-suite). */
    check_suite: {
    after: string | null,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    app: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "merge_group" | "pull_request_review_thread" | "workflow_job" | "merge_queue_entry" | "security_and_analysis" | "projects_v2_item" | "secret_scanning_alert_location")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The client ID of the GitHub app */
    client_id?: string | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write" | "admin",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write" | "admin",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    before: string | null,
  /** @format uri */
    check_runs_url: string,
  /** The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has `completed`. */
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | "skipped" | "startup_failure",
  /** @format date-time */
    created_at: string,
  /** The head branch name the changes are on. */
    head_branch: string | null,
  /** SimpleCommit */
    head_commit: {
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
    author: {
  /** @format date-time */
    date?: string,
  /** @format email */
    email: string | null,
  /** The git author's name. */
    name: string,
    username?: string,

},
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
    committer: {
  /** @format date-time */
    date?: string,
  /** @format email */
    email: string | null,
  /** The git author's name. */
    name: string,
    username?: string,

},
    id: string,
    message: string,
    timestamp: string,
    tree_id: string,

},
  /** The SHA of the head commit that is being checked. */
    head_sha: string,
    id: number,
    latest_check_runs_count: number,
    node_id: string,
  /** An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty. */
    pull_requests: ({
    base: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    head: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    id: number,
    number: number,
  /** @format uri */
    url: string,

})[],
    rerequestable?: boolean,
    runs_rerequestable?: boolean,
  /** The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`. */
    status: "requested" | "in_progress" | "completed" | "queued" | "pending",
  /** @format date-time */
    updated_at: string,
  /**
   * URL that points to the check suite API resource.
   * @format uri
   */
    url: string,

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** check_suite requested event */
  export interface WebhookCheckSuiteRequested {
    action: "requested",
  /** The [check_suite](https://docs.github.com/enterprise-server@3.17/rest/checks/suites#get-a-check-suite). */
    check_suite: {
    after: string | null,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    app: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "pull_request_review_thread" | "workflow_job" | "merge_queue_entry" | "security_and_analysis" | "secret_scanning_alert_location" | "projects_v2_item" | "merge_group" | "repository_import")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** Client ID of the GitHub app */
    client_id?: string | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write" | "admin",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write" | "admin",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    before: string | null,
  /** @format uri */
    check_runs_url: string,
  /** The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed. */
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | "skipped",
  /** @format date-time */
    created_at: string,
  /** The head branch name the changes are on. */
    head_branch: string | null,
  /** SimpleCommit */
    head_commit: {
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
    author: {
  /** @format date-time */
    date?: string,
  /** @format email */
    email: string | null,
  /** The git author's name. */
    name: string,
    username?: string,

},
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
    committer: {
  /** @format date-time */
    date?: string,
  /** @format email */
    email: string | null,
  /** The git author's name. */
    name: string,
    username?: string,

},
    id: string,
    message: string,
    timestamp: string,
    tree_id: string,

},
  /** The SHA of the head commit that is being checked. */
    head_sha: string,
    id: number,
    latest_check_runs_count: number,
    node_id: string,
  /** An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty. */
    pull_requests: ({
    base: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    head: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    id: number,
    number: number,
  /** @format uri */
    url: string,

})[],
    rerequestable?: boolean,
    runs_rerequestable?: boolean,
  /** The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`. */
    status: "requested" | "in_progress" | "completed" | "queued",
  /** @format date-time */
    updated_at: string,
  /**
   * URL that points to the check suite API resource.
   * @format uri
   */
    url: string,

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** check_suite rerequested event */
  export interface WebhookCheckSuiteRerequested {
    action: "rerequested",
  /** The [check_suite](https://docs.github.com/enterprise-server@3.17/rest/checks/suites#get-a-check-suite). */
    check_suite: {
    after: string | null,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    app: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "pull_request_review_thread" | "merge_queue_entry" | "workflow_job")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The Client ID for the GitHub app */
    client_id?: string | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write" | "admin",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write" | "admin",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    before: string | null,
  /** @format uri */
    check_runs_url: string,
  /** The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed. */
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale",
  /** @format date-time */
    created_at: string,
  /** The head branch name the changes are on. */
    head_branch: string | null,
  /** SimpleCommit */
    head_commit: {
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
    author: {
  /** @format date-time */
    date?: string,
  /** @format email */
    email: string | null,
  /** The git author's name. */
    name: string,
    username?: string,

},
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
    committer: {
  /** @format date-time */
    date?: string,
  /** @format email */
    email: string | null,
  /** The git author's name. */
    name: string,
    username?: string,

},
    id: string,
    message: string,
    timestamp: string,
    tree_id: string,

},
  /** The SHA of the head commit that is being checked. */
    head_sha: string,
    id: number,
    latest_check_runs_count: number,
    node_id: string,
  /** An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty. */
    pull_requests: ({
    base: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    head: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    id: number,
    number: number,
  /** @format uri */
    url: string,

})[],
    rerequestable?: boolean,
    runs_rerequestable?: boolean,
  /** The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`. */
    status: "requested" | "in_progress" | "completed" | "queued",
  /** @format date-time */
    updated_at: string,
  /**
   * URL that points to the check suite API resource.
   * @format uri
   */
    url: string,

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** code_scanning_alert appeared_in_branch event */
  export interface WebhookCodeScanningAlertAppearedInBranch {
    action: "appeared_in_branch",
  /** The code scanning alert involved in the event. */
    alert: {
  /**
   * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
   * @format date-time
   */
    created_at: string,
  /**
   * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    dismissed_at: string | null,
  /** User */
    dismissed_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment,
  /** The reason for dismissing or closing the alert. */
    dismissed_reason: "false positive" | "won't fix" | "used in tests",
  /** The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: null,
  /**
   * The GitHub URL of the alert resource.
   * @format uri
   */
    html_url: string,
  /** Alert Instance */
    most_recent_instance?: {
  /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
    analysis_key: string,
  /** Identifies the configuration under which the analysis was executed. */
    category?: string,
    classifications?: (string)[],
    commit_sha?: string,
  /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
    environment: string,
    location?: {
    end_column?: number,
    end_line?: number,
    path?: string,
    start_column?: number,
    start_line?: number,

},
    message?: {
    text?: string,

},
  /** The full Git reference, formatted as `refs/heads/<branch name>`. */
    ref: string,
  /** State of a code scanning alert. */
    state: "open" | "dismissed" | "fixed",

},
  /** The code scanning alert number. */
    number: number,
    rule: {
  /** A short description of the rule used to detect the alert. */
    description: string,
  /** A unique identifier for the rule used to detect the alert. */
    id: string,
  /** The severity of the alert. */
    severity: "none" | "note" | "warning" | "error",

},
  /** State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed. */
    state: "open" | "dismissed" | "fixed",
    tool: {
  /** The name of the tool used to generate the code scanning analysis alert. */
    name: string,
  /** The version of the tool used to detect the alert. */
    version: string | null,

},
  /** @format uri */
    url: string,

},
  /** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
    commit_oid: WebhooksCodeScanningCommitOid,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
    ref: WebhooksCodeScanningRef,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** code_scanning_alert closed_by_user event */
  export interface WebhookCodeScanningAlertClosedByUser {
    action: "closed_by_user",
  /** The code scanning alert involved in the event. */
    alert: {
  /**
   * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
   * @format date-time
   */
    created_at: string,
  /**
   * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    dismissed_at: string,
  /** User */
    dismissed_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment,
  /** The reason for dismissing or closing the alert. */
    dismissed_reason: "false positive" | "won't fix" | "used in tests",
  /** The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: null,
  /**
   * The GitHub URL of the alert resource.
   * @format uri
   */
    html_url: string,
  /** Alert Instance */
    most_recent_instance?: {
  /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
    analysis_key: string,
  /** Identifies the configuration under which the analysis was executed. */
    category?: string,
    classifications?: (string)[],
    commit_sha?: string,
  /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
    environment: string,
    location?: {
    end_column?: number,
    end_line?: number,
    path?: string,
    start_column?: number,
    start_line?: number,

},
    message?: {
    text?: string,

},
  /** The full Git reference, formatted as `refs/heads/<branch name>`. */
    ref: string,
  /** State of a code scanning alert. */
    state: "open" | "dismissed" | "fixed",

},
  /** The code scanning alert number. */
    number: number,
    rule: {
  /** A short description of the rule used to detect the alert. */
    description: string,
    full_description?: string,
    help?: string | null,
  /** A link to the documentation for the rule used to detect the alert. */
    help_uri?: string | null,
  /** A unique identifier for the rule used to detect the alert. */
    id: string,
    name?: string,
  /** The severity of the alert. */
    severity: "none" | "note" | "warning" | "error",
    tags?: (any)[] | null,

},
  /** State of a code scanning alert. */
    state: "dismissed" | "fixed",
    tool: {
    guid?: string | null,
  /** The name of the tool used to generate the code scanning analysis alert. */
    name: string,
  /** The version of the tool used to detect the alert. */
    version: string | null,

},
  /** @format uri */
    url: string,
  /** User */
    dismissal_approved_by?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
    commit_oid: WebhooksCodeScanningCommitOid,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
    ref: WebhooksCodeScanningRef,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** code_scanning_alert created event */
  export interface WebhookCodeScanningAlertCreated {
    action: "created",
  /** The code scanning alert involved in the event. */
    alert: {
  /**
   * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
   * @format date-time
   */
    created_at: string | null,
  /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    dismissed_at: null,
    dismissed_by: null,
  /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment,
  /** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */
    dismissed_reason: null,
  /** The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: null,
  /**
   * The GitHub URL of the alert resource.
   * @format uri
   */
    html_url: string,
    instances_url?: string,
  /** Alert Instance */
    most_recent_instance?: {
  /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
    analysis_key: string,
  /** Identifies the configuration under which the analysis was executed. */
    category?: string,
    classifications?: (string)[],
    commit_sha?: string,
  /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
    environment: string,
    location?: {
    end_column?: number,
    end_line?: number,
    path?: string,
    start_column?: number,
    start_line?: number,

},
    message?: {
    text?: string,

},
  /** The full Git reference, formatted as `refs/heads/<branch name>`. */
    ref: string,
  /** State of a code scanning alert. */
    state: "open" | "dismissed" | "fixed",

},
  /** The code scanning alert number. */
    number: number,
    rule: {
  /** A short description of the rule used to detect the alert. */
    description: string,
    full_description?: string,
    help?: string | null,
  /** A link to the documentation for the rule used to detect the alert. */
    help_uri?: string | null,
  /** A unique identifier for the rule used to detect the alert. */
    id: string,
    name?: string,
  /** The severity of the alert. */
    severity: "none" | "note" | "warning" | "error",
    tags?: (any)[] | null,

},
  /** State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed. */
    state: "open" | "dismissed",
    tool: {
    guid?: string | null,
  /** The name of the tool used to generate the code scanning analysis alert. */
    name: string,
  /** The version of the tool used to detect the alert. */
    version: string | null,

},
    updated_at?: string | null,
  /** @format uri */
    url: string,
    dismissal_approved_by?: null,

},
  /** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
    commit_oid: WebhooksCodeScanningCommitOid,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
    ref: WebhooksCodeScanningRef,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** code_scanning_alert fixed event */
  export interface WebhookCodeScanningAlertFixed {
    action: "fixed",
  /** The code scanning alert involved in the event. */
    alert: {
  /**
   * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
   * @format date-time
   */
    created_at: string,
  /**
   * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    dismissed_at: string | null,
  /** User */
    dismissed_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment,
  /** The reason for dismissing or closing the alert. */
    dismissed_reason: "false positive" | "won't fix" | "used in tests",
  /** The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: null,
  /**
   * The GitHub URL of the alert resource.
   * @format uri
   */
    html_url: string,
  /** @format uri */
    instances_url?: string,
  /** Alert Instance */
    most_recent_instance?: {
  /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
    analysis_key: string,
  /** Identifies the configuration under which the analysis was executed. */
    category?: string,
    classifications?: (string)[],
    commit_sha?: string,
  /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
    environment: string,
    location?: {
    end_column?: number,
    end_line?: number,
    path?: string,
    start_column?: number,
    start_line?: number,

},
    message?: {
    text?: string,

},
  /** The full Git reference, formatted as `refs/heads/<branch name>`. */
    ref: string,
  /** State of a code scanning alert. */
    state: "open" | "dismissed" | "fixed",

},
  /** The code scanning alert number. */
    number: number,
    rule: {
  /** A short description of the rule used to detect the alert. */
    description: string,
    full_description?: string,
    help?: string | null,
  /** A link to the documentation for the rule used to detect the alert. */
    help_uri?: string | null,
  /** A unique identifier for the rule used to detect the alert. */
    id: string,
    name?: string,
  /** The severity of the alert. */
    severity: "none" | "note" | "warning" | "error",
    tags?: (any)[] | null,

},
  /** State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed. */
    state: "fixed",
    tool: {
    guid?: string | null,
  /** The name of the tool used to generate the code scanning analysis alert. */
    name: string,
  /** The version of the tool used to detect the alert. */
    version: string | null,

},
  /** @format uri */
    url: string,

},
  /** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
    commit_oid: WebhooksCodeScanningCommitOid,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
    ref: WebhooksCodeScanningRef,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** code_scanning_alert reopened event */
  export interface WebhookCodeScanningAlertReopened {
    action: "reopened",
  /** The code scanning alert involved in the event. */
    alert: {
  /**
   * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
   * @format date-time
   */
    created_at: string,
  /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    dismissed_at: string | null,
    dismissed_by: object | null,
  /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment,
  /** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */
    dismissed_reason: string | null,
  /** The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: null,
  /**
   * The GitHub URL of the alert resource.
   * @format uri
   */
    html_url: string,
  /** Alert Instance */
    most_recent_instance?: {
  /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
    analysis_key: string,
  /** Identifies the configuration under which the analysis was executed. */
    category?: string,
    classifications?: (string)[],
    commit_sha?: string,
  /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
    environment: string,
    location?: {
    end_column?: number,
    end_line?: number,
    path?: string,
    start_column?: number,
    start_line?: number,

},
    message?: {
    text?: string,

},
  /** The full Git reference, formatted as `refs/heads/<branch name>`. */
    ref: string,
  /** State of a code scanning alert. */
    state: "open" | "dismissed" | "fixed",

},
  /** The code scanning alert number. */
    number: number,
    rule: {
  /** A short description of the rule used to detect the alert. */
    description: string,
    full_description?: string,
    help?: string | null,
  /** A link to the documentation for the rule used to detect the alert. */
    help_uri?: string | null,
  /** A unique identifier for the rule used to detect the alert. */
    id: string,
    name?: string,
  /** The severity of the alert. */
    severity: "none" | "note" | "warning" | "error",
    tags?: (any)[] | null,

},
  /** State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed. */
    state: "open" | "dismissed" | "fixed",
    tool: {
    guid?: string | null,
  /** The name of the tool used to generate the code scanning analysis alert. */
    name: string,
  /** The version of the tool used to detect the alert. */
    version: string | null,

},
  /** @format uri */
    url: string,

},
  /** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
    commit_oid: string | null,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
    ref: string | null,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** code_scanning_alert reopened_by_user event */
  export interface WebhookCodeScanningAlertReopenedByUser {
    action: "reopened_by_user",
  /** The code scanning alert involved in the event. */
    alert: {
  /**
   * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
   * @format date-time
   */
    created_at: string,
  /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    dismissed_at: null,
    dismissed_by: null,
  /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment,
  /** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */
    dismissed_reason: null,
  /** The time that the alert was fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    fixed_at?: null,
  /**
   * The GitHub URL of the alert resource.
   * @format uri
   */
    html_url: string,
  /** Alert Instance */
    most_recent_instance?: {
  /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
    analysis_key: string,
  /** Identifies the configuration under which the analysis was executed. */
    category?: string,
    classifications?: (string)[],
    commit_sha?: string,
  /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
    environment: string,
    location?: {
    end_column?: number,
    end_line?: number,
    path?: string,
    start_column?: number,
    start_line?: number,

},
    message?: {
    text?: string,

},
  /** The full Git reference, formatted as `refs/heads/<branch name>`. */
    ref: string,
  /** State of a code scanning alert. */
    state: "open" | "dismissed" | "fixed",

},
  /** The code scanning alert number. */
    number: number,
    rule: {
  /** A short description of the rule used to detect the alert. */
    description: string,
  /** A unique identifier for the rule used to detect the alert. */
    id: string,
  /** The severity of the alert. */
    severity: "none" | "note" | "warning" | "error",

},
  /** State of a code scanning alert. Events for alerts found outside the default branch will return a `null` value until they are dismissed or fixed. */
    state: "open" | "fixed",
    tool: {
  /** The name of the tool used to generate the code scanning analysis alert. */
    name: string,
  /** The version of the tool used to detect the alert. */
    version: string | null,

},
  /** @format uri */
    url: string,

},
  /** The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
    commit_oid: WebhooksCodeScanningCommitOid,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty. */
    ref: WebhooksCodeScanningRef,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** commit_comment created event */
  export interface WebhookCommitCommentCreated {
  /** The action performed. Can be `created`. */
    action: "created",
  /** The [commit comment](${externalDocsUpapp/api/description/components/schemas/webhooks/issue-comment-created.yamlrl}/rest/commits/comments#get-a-commit-comment) resource. */
    comment: {
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** The text of the comment. */
    body: string,
  /** The SHA of the commit to which the comment applies. */
    commit_id: string,
    created_at: string,
  /** @format uri */
    html_url: string,
  /** The ID of the commit comment. */
    id: number,
  /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    line: number | null,
  /** The node ID of the commit comment. */
    node_id: string,
  /** The relative path of the file to which the comment applies. */
    path: string | null,
  /** The line index in the diff to which the comment applies. */
    position: number | null,
  /** Reactions */
    reactions?: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** create event */
  export interface WebhookCreate {
  /** The repository's current description. */
    description: string | null,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The name of the repository's default branch (usually `main`). */
    master_branch: string,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** The pusher type for the event. Can be either `user` or a deploy key. */
    pusher_type: WebhooksDeployPusherType,
  /** The [`git ref`](https://docs.github.com/enterprise-server@3.17/rest/git/refs#get-a-reference) resource. */
    ref: WebhooksRef0,
  /** The type of Git ref object created in the repository. */
    ref_type: "tag" | "branch",
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** delete event */
  export interface WebhookDelete {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** The pusher type for the event. Can be either `user` or a deploy key. */
    pusher_type: WebhooksDeployPusherType,
  /** The [`git ref`](https://docs.github.com/enterprise-server@3.17/rest/git/refs#get-a-reference) resource. */
    ref: WebhooksRef0,
  /** The type of Git ref object deleted in the repository. */
    ref_type: "tag" | "branch",
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Dependabot alert auto-dismissed event */
  export interface WebhookDependabotAlertAutoDismissed {
    action: "auto_dismissed",
  /** A Dependabot alert. */
    alert: DependabotAlert,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Dependabot alert auto-reopened event */
  export interface WebhookDependabotAlertAutoReopened {
    action: "auto_reopened",
  /** A Dependabot alert. */
    alert: DependabotAlert,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Dependabot alert created event */
  export interface WebhookDependabotAlertCreated {
    action: "created",
  /** A Dependabot alert. */
    alert: DependabotAlert,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Dependabot alert dismissed event */
  export interface WebhookDependabotAlertDismissed {
    action: "dismissed",
  /** A Dependabot alert. */
    alert: DependabotAlert,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Dependabot alert fixed event */
  export interface WebhookDependabotAlertFixed {
    action: "fixed",
  /** A Dependabot alert. */
    alert: DependabotAlert,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Dependabot alert reintroduced event */
  export interface WebhookDependabotAlertReintroduced {
    action: "reintroduced",
  /** A Dependabot alert. */
    alert: DependabotAlert,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Dependabot alert reopened event */
  export interface WebhookDependabotAlertReopened {
    action: "reopened",
  /** A Dependabot alert. */
    alert: DependabotAlert,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** deploy_key created event */
  export interface WebhookDeployKeyCreated {
    action: "created",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The [`deploy key`](https://docs.github.com/enterprise-server@3.17/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource. */
    key: WebhooksDeployKey,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** deploy_key deleted event */
  export interface WebhookDeployKeyDeleted {
    action: "deleted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The [`deploy key`](https://docs.github.com/enterprise-server@3.17/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource. */
    key: WebhooksDeployKey,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** deployment created event */
  export interface WebhookDeploymentCreated {
    action: "created",
  /**
   * Deployment
   * The [deployment](https://docs.github.com/enterprise-server@3.17/rest/deployments/deployments#list-deployments).
   */
    deployment: {
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
    environment: string,
    id: number,
    node_id: string,
    original_environment: string,
    payload: (object | string),
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "workflow_job" | "pull_request_review_thread" | "merge_queue_entry" | "secret_scanning_alert_location" | "merge_group")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    production_environment?: boolean,
    ref: string,
  /** @format uri */
    repository_url: string,
    sha: string,
  /** @format uri */
    statuses_url: string,
    task: string,
    transient_environment?: boolean,
    updated_at: string,
  /** @format uri */
    url: string,

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
    workflow: WebhooksWorkflow,
  /** Deployment Workflow Run */
    workflow_run: {
  /** User */
    actor: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    artifacts_url?: string,
    cancel_url?: string,
    check_suite_id: number,
    check_suite_node_id: string,
    check_suite_url?: string,
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale",
  /** @format date-time */
    created_at: string,
    display_title: string,
    event: string,
    head_branch: string,
    head_commit?: null,
    head_repository?: {
    archive_url?: string,
    assignees_url?: string,
    blobs_url?: string,
    branches_url?: string,
    collaborators_url?: string,
    comments_url?: string,
    commits_url?: string,
    compare_url?: string,
    contents_url?: string,
    contributors_url?: string,
    deployments_url?: string,
    description?: null,
    downloads_url?: string,
    events_url?: string,
    fork?: boolean,
    forks_url?: string,
    full_name?: string,
    git_commits_url?: string,
    git_refs_url?: string,
    git_tags_url?: string,
    hooks_url?: string,
    html_url?: string,
    id?: number,
    issue_comment_url?: string,
    issue_events_url?: string,
    issues_url?: string,
    keys_url?: string,
    labels_url?: string,
    languages_url?: string,
    merges_url?: string,
    milestones_url?: string,
    name?: string,
    node_id?: string,
    notifications_url?: string,
    owner?: {
    avatar_url?: string,
    events_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    html_url?: string,
    id?: number,
    login?: string,
    node_id?: string,
    organizations_url?: string,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    url?: string,

},
    private?: boolean,
    pulls_url?: string,
    releases_url?: string,
    stargazers_url?: string,
    statuses_url?: string,
    subscribers_url?: string,
    subscription_url?: string,
    tags_url?: string,
    teams_url?: string,
    trees_url?: string,
    url?: string,

},
    head_sha: string,
  /** @format uri */
    html_url: string,
    id: number,
    jobs_url?: string,
    logs_url?: string,
    name: string,
    node_id: string,
    path: string,
    previous_attempt_url?: null,
    pull_requests: ({
    base: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    head: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    id: number,
    number: number,
  /** @format uri */
    url: string,

})[],
    referenced_workflows?: (any)[] | null,
    repository?: {
    archive_url?: string,
    assignees_url?: string,
    blobs_url?: string,
    branches_url?: string,
    collaborators_url?: string,
    comments_url?: string,
    commits_url?: string,
    compare_url?: string,
    contents_url?: string,
    contributors_url?: string,
    deployments_url?: string,
    description?: null,
    downloads_url?: string,
    events_url?: string,
    fork?: boolean,
    forks_url?: string,
    full_name?: string,
    git_commits_url?: string,
    git_refs_url?: string,
    git_tags_url?: string,
    hooks_url?: string,
    html_url?: string,
    id?: number,
    issue_comment_url?: string,
    issue_events_url?: string,
    issues_url?: string,
    keys_url?: string,
    labels_url?: string,
    languages_url?: string,
    merges_url?: string,
    milestones_url?: string,
    name?: string,
    node_id?: string,
    notifications_url?: string,
    owner?: {
    avatar_url?: string,
    events_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    html_url?: string,
    id?: number,
    login?: string,
    node_id?: string,
    organizations_url?: string,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    url?: string,

},
    private?: boolean,
    pulls_url?: string,
    releases_url?: string,
    stargazers_url?: string,
    statuses_url?: string,
    subscribers_url?: string,
    subscription_url?: string,
    tags_url?: string,
    teams_url?: string,
    trees_url?: string,
    url?: string,

},
    rerun_url?: string,
    run_attempt: number,
    run_number: number,
  /** @format date-time */
    run_started_at: string,
    status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending",
  /** User */
    triggering_actor?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    workflow_id: number,
    workflow_url?: string,

},
}

  /** deployment protection rule requested event */
  export interface WebhookDeploymentProtectionRuleRequested {
    action?: "requested",
  /** The name of the environment that has the deployment protection rule. */
    environment?: string,
  /** The event that triggered the deployment protection rule. */
    event?: string,
  /**
   * The URL to review the deployment protection rule.
   * @format uri
   */
    deployment_callback_url?: string,
  /** A request for a specific ref(branch,sha,tag) to be deployed */
    deployment?: Deployment,
    pull_requests?: (PullRequest)[],
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** A GitHub user. */
    sender?: SimpleUser,
}

    export interface WebhookDeploymentReviewApproved {
    action: "approved",
    approver?: WebhooksApprover,
    comment?: string,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
    reviewers?: WebhooksReviewers,
  /** A GitHub user. */
    sender: SimpleUser,
    since: string,
    workflow_job_run?: WebhooksWorkflowJobRun,
    workflow_job_runs?: ({
    conclusion?: null,
    created_at?: string,
    environment?: string,
    html_url?: string,
    id?: number,
    name?: string | null,
    status?: string,
    updated_at?: string,

})[],
  /** Deployment Workflow Run */
    workflow_run: {
  /** User */
    actor: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    artifacts_url?: string,
    cancel_url?: string,
    check_suite_id: number,
    check_suite_node_id: string,
    check_suite_url?: string,
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale",
  /** @format date-time */
    created_at: string,
    display_title: string,
    event: string,
    head_branch: string,
    head_commit?: object | null,
    head_repository?: {
    archive_url?: string,
    assignees_url?: string,
    blobs_url?: string,
    branches_url?: string,
    collaborators_url?: string,
    comments_url?: string,
    commits_url?: string,
    compare_url?: string,
    contents_url?: string,
    contributors_url?: string,
    deployments_url?: string,
    description?: string | null,
    downloads_url?: string,
    events_url?: string,
    fork?: boolean,
    forks_url?: string,
    full_name?: string,
    git_commits_url?: string,
    git_refs_url?: string,
    git_tags_url?: string,
    hooks_url?: string,
    html_url?: string,
    id?: number,
    issue_comment_url?: string,
    issue_events_url?: string,
    issues_url?: string,
    keys_url?: string,
    labels_url?: string,
    languages_url?: string,
    merges_url?: string,
    milestones_url?: string,
    name?: string,
    node_id?: string,
    notifications_url?: string,
    owner?: {
    avatar_url?: string,
    events_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    html_url?: string,
    id?: number,
    login?: string,
    node_id?: string,
    organizations_url?: string,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    url?: string,
    user_view_type?: string,

},
    private?: boolean,
    pulls_url?: string,
    releases_url?: string,
    stargazers_url?: string,
    statuses_url?: string,
    subscribers_url?: string,
    subscription_url?: string,
    tags_url?: string,
    teams_url?: string,
    trees_url?: string,
    url?: string,

},
    head_sha: string,
  /** @format uri */
    html_url: string,
    id: number,
    jobs_url?: string,
    logs_url?: string,
    name: string,
    node_id: string,
    path: string,
    previous_attempt_url?: string | null,
    pull_requests: ({
    base: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    head: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    id: number,
    number: number,
  /** @format uri */
    url: string,

})[],
    referenced_workflows?: (any)[] | null,
    repository?: {
    archive_url?: string,
    assignees_url?: string,
    blobs_url?: string,
    branches_url?: string,
    collaborators_url?: string,
    comments_url?: string,
    commits_url?: string,
    compare_url?: string,
    contents_url?: string,
    contributors_url?: string,
    deployments_url?: string,
    description?: string | null,
    downloads_url?: string,
    events_url?: string,
    fork?: boolean,
    forks_url?: string,
    full_name?: string,
    git_commits_url?: string,
    git_refs_url?: string,
    git_tags_url?: string,
    hooks_url?: string,
    html_url?: string,
    id?: number,
    issue_comment_url?: string,
    issue_events_url?: string,
    issues_url?: string,
    keys_url?: string,
    labels_url?: string,
    languages_url?: string,
    merges_url?: string,
    milestones_url?: string,
    name?: string,
    node_id?: string,
    notifications_url?: string,
    owner?: {
    avatar_url?: string,
    events_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    html_url?: string,
    id?: number,
    login?: string,
    node_id?: string,
    organizations_url?: string,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    url?: string,
    user_view_type?: string,

},
    private?: boolean,
    pulls_url?: string,
    releases_url?: string,
    stargazers_url?: string,
    statuses_url?: string,
    subscribers_url?: string,
    subscription_url?: string,
    tags_url?: string,
    teams_url?: string,
    trees_url?: string,
    url?: string,

},
    rerun_url?: string,
    run_attempt: number,
    run_number: number,
  /** @format date-time */
    run_started_at: string,
    status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending",
  /** User */
    triggering_actor: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    workflow_id: number,
    workflow_url?: string,

},
}

    export interface WebhookDeploymentReviewRejected {
    action: "rejected",
    approver?: WebhooksApprover,
    comment?: string,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
    reviewers?: WebhooksReviewers,
  /** A GitHub user. */
    sender: SimpleUser,
    since: string,
    workflow_job_run?: WebhooksWorkflowJobRun,
    workflow_job_runs?: ({
    conclusion?: string | null,
    created_at?: string,
    environment?: string,
    html_url?: string,
    id?: number,
    name?: string | null,
    status?: string,
    updated_at?: string,

})[],
  /** Deployment Workflow Run */
    workflow_run: {
  /** User */
    actor: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    artifacts_url?: string,
    cancel_url?: string,
    check_suite_id: number,
    check_suite_node_id: string,
    check_suite_url?: string,
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale",
  /** @format date-time */
    created_at: string,
    event: string,
    head_branch: string,
    head_commit?: object | null,
    head_repository?: {
    archive_url?: string,
    assignees_url?: string,
    blobs_url?: string,
    branches_url?: string,
    collaborators_url?: string,
    comments_url?: string,
    commits_url?: string,
    compare_url?: string,
    contents_url?: string,
    contributors_url?: string,
    deployments_url?: string,
    description?: string | null,
    downloads_url?: string,
    events_url?: string,
    fork?: boolean,
    forks_url?: string,
    full_name?: string,
    git_commits_url?: string,
    git_refs_url?: string,
    git_tags_url?: string,
    hooks_url?: string,
    html_url?: string,
    id?: number,
    issue_comment_url?: string,
    issue_events_url?: string,
    issues_url?: string,
    keys_url?: string,
    labels_url?: string,
    languages_url?: string,
    merges_url?: string,
    milestones_url?: string,
    name?: string,
    node_id?: string,
    notifications_url?: string,
    owner?: {
    avatar_url?: string,
    events_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    html_url?: string,
    id?: number,
    login?: string,
    node_id?: string,
    organizations_url?: string,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    url?: string,
    user_view_type?: string,

},
    private?: boolean,
    pulls_url?: string,
    releases_url?: string,
    stargazers_url?: string,
    statuses_url?: string,
    subscribers_url?: string,
    subscription_url?: string,
    tags_url?: string,
    teams_url?: string,
    trees_url?: string,
    url?: string,

},
    head_sha: string,
  /** @format uri */
    html_url: string,
    id: number,
    jobs_url?: string,
    logs_url?: string,
    name: string,
    node_id: string,
    path: string,
    previous_attempt_url?: string | null,
    pull_requests: ({
    base: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    head: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    id: number,
    number: number,
  /** @format uri */
    url: string,

})[],
    referenced_workflows?: (any)[] | null,
    repository?: {
    archive_url?: string,
    assignees_url?: string,
    blobs_url?: string,
    branches_url?: string,
    collaborators_url?: string,
    comments_url?: string,
    commits_url?: string,
    compare_url?: string,
    contents_url?: string,
    contributors_url?: string,
    deployments_url?: string,
    description?: string | null,
    downloads_url?: string,
    events_url?: string,
    fork?: boolean,
    forks_url?: string,
    full_name?: string,
    git_commits_url?: string,
    git_refs_url?: string,
    git_tags_url?: string,
    hooks_url?: string,
    html_url?: string,
    id?: number,
    issue_comment_url?: string,
    issue_events_url?: string,
    issues_url?: string,
    keys_url?: string,
    labels_url?: string,
    languages_url?: string,
    merges_url?: string,
    milestones_url?: string,
    name?: string,
    node_id?: string,
    notifications_url?: string,
    owner?: {
    avatar_url?: string,
    events_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    html_url?: string,
    id?: number,
    login?: string,
    node_id?: string,
    organizations_url?: string,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    url?: string,
    user_view_type?: string,

},
    private?: boolean,
    pulls_url?: string,
    releases_url?: string,
    stargazers_url?: string,
    statuses_url?: string,
    subscribers_url?: string,
    subscription_url?: string,
    tags_url?: string,
    teams_url?: string,
    trees_url?: string,
    url?: string,

},
    rerun_url?: string,
    run_attempt: number,
    run_number: number,
  /** @format date-time */
    run_started_at: string,
    status: "requested" | "in_progress" | "completed" | "queued" | "waiting",
  /** User */
    triggering_actor: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    workflow_id: number,
    workflow_url?: string,
    display_title: string,

},
}

    export interface WebhookDeploymentReviewRequested {
    action: "requested",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
    environment: string,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
    requestor: WebhooksUser,
    reviewers: ({
  /** User */
    reviewer?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login?: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    type?: "User" | "Team",

})[],
  /** A GitHub user. */
    sender: SimpleUser,
    since: string,
    workflow_job_run: {
    conclusion: null,
    created_at: string,
    environment: string,
    html_url: string,
    id: number,
    name: string | null,
    status: string,
    updated_at: string,

},
  /** Deployment Workflow Run */
    workflow_run: {
  /** User */
    actor: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    artifacts_url?: string,
    cancel_url?: string,
    check_suite_id: number,
    check_suite_node_id: string,
    check_suite_url?: string,
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale",
  /** @format date-time */
    created_at: string,
    event: string,
    head_branch: string,
    head_commit?: object | null,
    head_repository?: {
    archive_url?: string,
    assignees_url?: string,
    blobs_url?: string,
    branches_url?: string,
    collaborators_url?: string,
    comments_url?: string,
    commits_url?: string,
    compare_url?: string,
    contents_url?: string,
    contributors_url?: string,
    deployments_url?: string,
    description?: string | null,
    downloads_url?: string,
    events_url?: string,
    fork?: boolean,
    forks_url?: string,
    full_name?: string,
    git_commits_url?: string,
    git_refs_url?: string,
    git_tags_url?: string,
    hooks_url?: string,
    html_url?: string,
    id?: number,
    issue_comment_url?: string,
    issue_events_url?: string,
    issues_url?: string,
    keys_url?: string,
    labels_url?: string,
    languages_url?: string,
    merges_url?: string,
    milestones_url?: string,
    name?: string,
    node_id?: string,
    notifications_url?: string,
    owner?: {
    avatar_url?: string,
    events_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    html_url?: string,
    id?: number,
    login?: string,
    node_id?: string,
    organizations_url?: string,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    url?: string,
    user_view_type?: string,

},
    private?: boolean,
    pulls_url?: string,
    releases_url?: string,
    stargazers_url?: string,
    statuses_url?: string,
    subscribers_url?: string,
    subscription_url?: string,
    tags_url?: string,
    teams_url?: string,
    trees_url?: string,
    url?: string,

},
    head_sha: string,
  /** @format uri */
    html_url: string,
    id: number,
    jobs_url?: string,
    logs_url?: string,
    name: string,
    node_id: string,
    path: string,
    previous_attempt_url?: string | null,
    pull_requests: ({
    base: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    head: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    id: number,
    number: number,
  /** @format uri */
    url: string,

})[],
    referenced_workflows?: (any)[] | null,
    repository?: {
    archive_url?: string,
    assignees_url?: string,
    blobs_url?: string,
    branches_url?: string,
    collaborators_url?: string,
    comments_url?: string,
    commits_url?: string,
    compare_url?: string,
    contents_url?: string,
    contributors_url?: string,
    deployments_url?: string,
    description?: string | null,
    downloads_url?: string,
    events_url?: string,
    fork?: boolean,
    forks_url?: string,
    full_name?: string,
    git_commits_url?: string,
    git_refs_url?: string,
    git_tags_url?: string,
    hooks_url?: string,
    html_url?: string,
    id?: number,
    issue_comment_url?: string,
    issue_events_url?: string,
    issues_url?: string,
    keys_url?: string,
    labels_url?: string,
    languages_url?: string,
    merges_url?: string,
    milestones_url?: string,
    name?: string,
    node_id?: string,
    notifications_url?: string,
    owner?: {
    avatar_url?: string,
    events_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    html_url?: string,
    id?: number,
    login?: string,
    node_id?: string,
    organizations_url?: string,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    url?: string,
    user_view_type?: string,

},
    private?: boolean,
    pulls_url?: string,
    releases_url?: string,
    stargazers_url?: string,
    statuses_url?: string,
    subscribers_url?: string,
    subscription_url?: string,
    tags_url?: string,
    teams_url?: string,
    trees_url?: string,
    url?: string,

},
    rerun_url?: string,
    run_attempt: number,
    run_number: number,
  /** @format date-time */
    run_started_at: string,
    status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending",
  /** User */
    triggering_actor: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    workflow_id: number,
    workflow_url?: string,
    display_title: string,

},
}

  /** deployment_status created event */
  export interface WebhookDeploymentStatusCreated {
    action: "created",
    check_run?: {
  /** @format date-time */
    completed_at: string | null,
  /** The result of the completed check run. This value will be `null` until the check run has completed. */
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | "skipped",
  /** @format uri */
    details_url: string,
    external_id: string,
  /** The SHA of the commit that is being checked. */
    head_sha: string,
  /** @format uri */
    html_url: string,
  /** The id of the check. */
    id: number,
  /** The name of the check run. */
    name: string,
    node_id: string,
  /** @format date-time */
    started_at: string,
  /** The current status of the check run. Can be `queued`, `in_progress`, or `completed`. */
    status: "queued" | "in_progress" | "completed" | "waiting" | "pending",
  /** @format uri */
    url: string,

},
  /**
   * Deployment
   * The [deployment](https://docs.github.com/enterprise-server@3.17/rest/deployments/deployments#list-deployments).
   */
    deployment: {
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
    environment: string,
    id: number,
    node_id: string,
    original_environment: string,
    payload: (string | object),
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "merge_queue_entry" | "workflow_job" | "pull_request_review_thread" | "secret_scanning_alert_location" | "merge_group")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    production_environment?: boolean,
    ref: string,
  /** @format uri */
    repository_url: string,
    sha: string,
  /** @format uri */
    statuses_url: string,
    task: string,
    transient_environment?: boolean,
    updated_at: string,
  /** @format uri */
    url: string,

},
  /** The [deployment status](https://docs.github.com/enterprise-server@3.17/rest/deployments/statuses#list-deployment-statuses). */
    deployment_status: {
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** @format uri */
    deployment_url: string,
  /** The optional human-readable description added to the status. */
    description: string,
    environment: string,
  /** @format uri */
    environment_url?: string,
    id: number,
  /** @format uri */
    log_url?: string,
    node_id: string,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "pull_request_review_thread" | "merge_queue_entry" | "workflow_job" | "merge_group" | "secret_scanning_alert_location")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
  /** @format uri */
    repository_url: string,
  /** The new state. Can be `pending`, `success`, `failure`, or `error`. */
    state: string,
  /** The optional link added to the status. */
    target_url: string,
    updated_at: string,
  /** @format uri */
    url: string,

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
    workflow?: WebhooksWorkflow,
  /** Deployment Workflow Run */
    workflow_run?: {
  /** User */
    actor: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    artifacts_url?: string,
    cancel_url?: string,
    check_suite_id: number,
    check_suite_node_id: string,
    check_suite_url?: string,
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | "startup_failure",
  /** @format date-time */
    created_at: string,
    display_title: string,
    event: string,
    head_branch: string,
    head_commit?: null,
    head_repository?: {
    archive_url?: string,
    assignees_url?: string,
    blobs_url?: string,
    branches_url?: string,
    collaborators_url?: string,
    comments_url?: string,
    commits_url?: string,
    compare_url?: string,
    contents_url?: string,
    contributors_url?: string,
    deployments_url?: string,
    description?: null,
    downloads_url?: string,
    events_url?: string,
    fork?: boolean,
    forks_url?: string,
    full_name?: string,
    git_commits_url?: string,
    git_refs_url?: string,
    git_tags_url?: string,
    hooks_url?: string,
    html_url?: string,
    id?: number,
    issue_comment_url?: string,
    issue_events_url?: string,
    issues_url?: string,
    keys_url?: string,
    labels_url?: string,
    languages_url?: string,
    merges_url?: string,
    milestones_url?: string,
    name?: string,
    node_id?: string,
    notifications_url?: string,
    owner?: {
    avatar_url?: string,
    events_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    html_url?: string,
    id?: number,
    login?: string,
    node_id?: string,
    organizations_url?: string,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    url?: string,

},
    private?: boolean,
    pulls_url?: string,
    releases_url?: string,
    stargazers_url?: string,
    statuses_url?: string,
    subscribers_url?: string,
    subscription_url?: string,
    tags_url?: string,
    teams_url?: string,
    trees_url?: string,
    url?: string,

},
    head_sha: string,
  /** @format uri */
    html_url: string,
    id: number,
    jobs_url?: string,
    logs_url?: string,
    name: string,
    node_id: string,
    path: string,
    previous_attempt_url?: null,
    pull_requests: ({
    base: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    head: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    id: number,
    number: number,
  /** @format uri */
    url: string,

})[],
    referenced_workflows?: (any)[] | null,
    repository?: {
    archive_url?: string,
    assignees_url?: string,
    blobs_url?: string,
    branches_url?: string,
    collaborators_url?: string,
    comments_url?: string,
    commits_url?: string,
    compare_url?: string,
    contents_url?: string,
    contributors_url?: string,
    deployments_url?: string,
    description?: null,
    downloads_url?: string,
    events_url?: string,
    fork?: boolean,
    forks_url?: string,
    full_name?: string,
    git_commits_url?: string,
    git_refs_url?: string,
    git_tags_url?: string,
    hooks_url?: string,
    html_url?: string,
    id?: number,
    issue_comment_url?: string,
    issue_events_url?: string,
    issues_url?: string,
    keys_url?: string,
    labels_url?: string,
    languages_url?: string,
    merges_url?: string,
    milestones_url?: string,
    name?: string,
    node_id?: string,
    notifications_url?: string,
    owner?: {
    avatar_url?: string,
    events_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    html_url?: string,
    id?: number,
    login?: string,
    node_id?: string,
    organizations_url?: string,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    url?: string,

},
    private?: boolean,
    pulls_url?: string,
    releases_url?: string,
    stargazers_url?: string,
    statuses_url?: string,
    subscribers_url?: string,
    subscription_url?: string,
    tags_url?: string,
    teams_url?: string,
    trees_url?: string,
    url?: string,

},
    rerun_url?: string,
    run_attempt: number,
    run_number: number,
  /** @format date-time */
    run_started_at: string,
    status: "requested" | "in_progress" | "completed" | "queued" | "waiting" | "pending",
  /** User */
    triggering_actor: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    workflow_id: number,
    workflow_url?: string,

},
}

  /** discussion answered event */
  export interface WebhookDiscussionAnswered {
    action: "answered",
    answer: WebhooksAnswer,
  /** A Discussion in a repository. */
    discussion: Discussion,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** discussion category changed event */
  export interface WebhookDiscussionCategoryChanged {
    action: "category_changed",
    changes: {
    category: {
    from: {
  /** @format date-time */
    created_at: string,
    description: string,
    emoji: string,
    id: number,
    is_answerable: boolean,
    name: string,
    node_id?: string,
    repository_id: number,
    slug: string,
    updated_at: string,

},

},

},
  /** A Discussion in a repository. */
    discussion: Discussion,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** discussion closed event */
  export interface WebhookDiscussionClosed {
    action: "closed",
  /** A Discussion in a repository. */
    discussion: Discussion,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** discussion_comment created event */
  export interface WebhookDiscussionCommentCreated {
    action: "created",
    comment: WebhooksComment,
  /** A Discussion in a repository. */
    discussion: Discussion,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** discussion_comment deleted event */
  export interface WebhookDiscussionCommentDeleted {
    action: "deleted",
    comment: WebhooksComment,
  /** A Discussion in a repository. */
    discussion: Discussion,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** discussion_comment edited event */
  export interface WebhookDiscussionCommentEdited {
    action: "edited",
    changes: {
    body: {
    from: string,

},

},
    comment: WebhooksComment,
  /** A Discussion in a repository. */
    discussion: Discussion,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** discussion created event */
  export interface WebhookDiscussionCreated {
    action: "created",
  /** A Discussion in a repository. */
    discussion: Discussion,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** discussion deleted event */
  export interface WebhookDiscussionDeleted {
    action: "deleted",
  /** A Discussion in a repository. */
    discussion: Discussion,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** discussion edited event */
  export interface WebhookDiscussionEdited {
    action: "edited",
    changes?: {
    body?: {
    from: string,

},
    title?: {
    from: string,

},

},
  /** A Discussion in a repository. */
    discussion: Discussion,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** discussion labeled event */
  export interface WebhookDiscussionLabeled {
    action: "labeled",
  /** A Discussion in a repository. */
    discussion: Discussion,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
    label: WebhooksLabel,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** discussion locked event */
  export interface WebhookDiscussionLocked {
    action: "locked",
  /** A Discussion in a repository. */
    discussion: Discussion,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** discussion pinned event */
  export interface WebhookDiscussionPinned {
    action: "pinned",
  /** A Discussion in a repository. */
    discussion: Discussion,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** discussion reopened event */
  export interface WebhookDiscussionReopened {
    action: "reopened",
  /** A Discussion in a repository. */
    discussion: Discussion,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** discussion transferred event */
  export interface WebhookDiscussionTransferred {
    action: "transferred",
    changes: {
  /** A Discussion in a repository. */
    new_discussion: Discussion,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    new_repository: RepositoryWebhooks,

},
  /** A Discussion in a repository. */
    discussion: Discussion,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** discussion unanswered event */
  export interface WebhookDiscussionUnanswered {
    action: "unanswered",
  /** A Discussion in a repository. */
    discussion: Discussion,
    old_answer: WebhooksAnswer,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** discussion unlabeled event */
  export interface WebhookDiscussionUnlabeled {
    action: "unlabeled",
  /** A Discussion in a repository. */
    discussion: Discussion,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
    label: WebhooksLabel,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** discussion unlocked event */
  export interface WebhookDiscussionUnlocked {
    action: "unlocked",
  /** A Discussion in a repository. */
    discussion: Discussion,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** discussion unpinned event */
  export interface WebhookDiscussionUnpinned {
    action: "unpinned",
  /** A Discussion in a repository. */
    discussion: Discussion,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

    export interface WebhookEnterpriseAnonymousAccessDisabled {
    action: "anonymous_access_disabled",
  /** A GitHub user. */
    sender?: SimpleUser,
}

    export interface WebhookEnterpriseAnonymousAccessEnabled {
    action: "anonymous_access_enabled",
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /**
 * fork event
 * A user forks a repository.
 */
  export interface WebhookFork {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /** The created [`repository`](https://docs.github.com/enterprise-server@3.17/rest/repos/repos#get-a-repository) resource. */
    forkee: ({
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

} & {
    allow_forking?: boolean,
    archive_url?: string,
    archived?: boolean,
    assignees_url?: string,
    blobs_url?: string,
    branches_url?: string,
    clone_url?: string,
    collaborators_url?: string,
    comments_url?: string,
    commits_url?: string,
    compare_url?: string,
    contents_url?: string,
    contributors_url?: string,
    created_at?: string,
    default_branch?: string,
    deployments_url?: string,
    description?: string | null,
    disabled?: boolean,
    downloads_url?: string,
    events_url?: string,
    fork?: true,
    forks?: number,
    forks_count?: number,
    forks_url?: string,
    full_name?: string,
    git_commits_url?: string,
    git_refs_url?: string,
    git_tags_url?: string,
    git_url?: string,
    has_downloads?: boolean,
    has_issues?: boolean,
    has_pages?: boolean,
    has_projects?: boolean,
    has_wiki?: boolean,
    homepage?: string | null,
    hooks_url?: string,
    html_url?: string,
    id?: number,
    is_template?: boolean,
    issue_comment_url?: string,
    issue_events_url?: string,
    issues_url?: string,
    keys_url?: string,
    labels_url?: string,
    language?: null,
    languages_url?: string,
    license?: object | null,
    merges_url?: string,
    milestones_url?: string,
    mirror_url?: null,
    name?: string,
    node_id?: string,
    notifications_url?: string,
    open_issues?: number,
    open_issues_count?: number,
    owner?: {
    avatar_url?: string,
    events_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    html_url?: string,
    id?: number,
    login?: string,
    node_id?: string,
    organizations_url?: string,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    url?: string,

},
    private?: boolean,
    public?: boolean,
    pulls_url?: string,
    pushed_at?: string,
    releases_url?: string,
    size?: number,
    ssh_url?: string,
    stargazers_count?: number,
    stargazers_url?: string,
    statuses_url?: string,
    subscribers_url?: string,
    subscription_url?: string,
    svn_url?: string,
    tags_url?: string,
    teams_url?: string,
    topics?: (null)[],
    trees_url?: string,
    updated_at?: string,
    url?: string,
    visibility?: string,
    watchers?: number,
    watchers_count?: number,

}),
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** github_app_authorization revoked event */
  export interface WebhookGithubAppAuthorizationRevoked {
    action: "revoked",
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** gollum event */
  export interface WebhookGollum {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** The pages that were updated. */
    pages: ({
  /** The action that was performed on the page. Can be `created` or `edited`. */
    action: "created" | "edited",
  /**
   * Points to the HTML wiki page.
   * @format uri
   */
    html_url: string,
  /** The name of the page. */
    page_name: string,
  /** The latest commit SHA of the page. */
    sha: string,
    summary: string | null,
  /** The current page title. */
    title: string,

})[],
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** installation created event */
  export interface WebhookInstallationCreated {
    action: "created",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /** Installation */
    installation: Installation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** An array of repository objects that the installation can access. */
    repositories?: WebhooksRepositories,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
    requester?: WebhooksUser,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** installation deleted event */
  export interface WebhookInstallationDeleted {
    action: "deleted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /** Installation */
    installation: Installation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** An array of repository objects that the installation can access. */
    repositories?: WebhooksRepositories,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
    requester?: null,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** installation new_permissions_accepted event */
  export interface WebhookInstallationNewPermissionsAccepted {
    action: "new_permissions_accepted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /** Installation */
    installation: Installation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** An array of repository objects that the installation can access. */
    repositories?: WebhooksRepositories,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
    requester?: null,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** installation_repositories added event */
  export interface WebhookInstallationRepositoriesAdded {
    action: "added",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /** Installation */
    installation: Installation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** An array of repository objects, which were added to the installation. */
    repositories_added: WebhooksRepositoriesAdded,
  /** An array of repository objects, which were removed from the installation. */
    repositories_removed: ({
    full_name?: string,
  /** Unique identifier of the repository */
    id?: number,
  /** The name of the repository. */
    name?: string,
    node_id?: string,
  /** Whether the repository is private or public. */
    private?: boolean,

})[],
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** Describe whether all repositories have been selected or there's a selection involved */
    repository_selection: WebhooksRepositorySelection,
    requester: WebhooksUser,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** installation_repositories removed event */
  export interface WebhookInstallationRepositoriesRemoved {
    action: "removed",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /** Installation */
    installation: Installation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** An array of repository objects, which were added to the installation. */
    repositories_added: WebhooksRepositoriesAdded,
  /** An array of repository objects, which were removed from the installation. */
    repositories_removed: ({
    full_name: string,
  /** Unique identifier of the repository */
    id: number,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** Whether the repository is private or public. */
    private: boolean,

})[],
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** Describe whether all repositories have been selected or there's a selection involved */
    repository_selection: WebhooksRepositorySelection,
    requester: WebhooksUser,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** installation suspend event */
  export interface WebhookInstallationSuspend {
    action: "suspend",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /** Installation */
    installation: Installation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** An array of repository objects that the installation can access. */
    repositories?: WebhooksRepositories,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
    requester?: null,
  /** A GitHub user. */
    sender: SimpleUser,
}

    export interface WebhookInstallationTargetRenamed {
    account: {
    archived_at?: string | null,
    avatar_url: string,
    created_at?: string,
    description?: null,
    events_url?: string,
    followers?: number,
    followers_url?: string,
    following?: number,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    has_organization_projects?: boolean,
    has_repository_projects?: boolean,
    hooks_url?: string,
    html_url: string,
    id: number,
    is_verified?: boolean,
    issues_url?: string,
    login?: string,
    members_url?: string,
    name?: string,
    node_id: string,
    organizations_url?: string,
    public_gists?: number,
    public_members_url?: string,
    public_repos?: number,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    slug?: string,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    updated_at?: string,
    url?: string,
    website_url?: null,
    user_view_type?: string,

},
    action: "renamed",
    changes: {
    login?: {
    from: string,

},
    slug?: {
    from: string,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
    target_type: string,
}

  /** installation unsuspend event */
  export interface WebhookInstallationUnsuspend {
    action: "unsuspend",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /** Installation */
    installation: Installation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** An array of repository objects that the installation can access. */
    repositories?: WebhooksRepositories,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
    requester?: null,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** issue_comment created event */
  export interface WebhookIssueCommentCreated {
    action: "created",
  /**
   * issue comment
   * The [comment](https://docs.github.com/enterprise-server@3.17/rest/issues/comments#get-an-issue-comment) itself.
   */
    comment: {
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** Contents of the issue comment */
    body: string,
  /** @format date-time */
    created_at: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the issue comment
   * @format int64
   */
    id: number,
  /** @format uri */
    issue_url: string,
    node_id: string,
    performed_via_github_app: (null | Integration),
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the issue comment
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) the comment belongs to. */
    issue: ({
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** Contents of the issue */
    body: string | null,
  /** @format date-time */
    closed_at: string | null,
    comments: number,
  /** @format uri */
    comments_url: string,
  /** @format date-time */
    created_at: string,
    draft?: boolean,
  /** @format uri */
    events_url: string,
  /** @format uri */
    html_url: string,
  /** @format int64 */
    id: number,
    labels?: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
  /** @format uri-template */
    labels_url: string,
    locked?: boolean,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "reminder" | "pull_request_review_thread")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write" | "admin",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write" | "admin",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    pull_request?: {
  /** @format uri */
    diff_url?: string,
  /** @format uri */
    html_url?: string,
  /** @format date-time */
    merged_at?: string | null,
  /** @format uri */
    patch_url?: string,
  /** @format uri */
    url?: string,

},
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** @format uri */
    repository_url: string,
  /** Sub-issues Summary */
    sub_issues_summary?: {
    total: number,
    completed: number,
    percent_completed: number,

},
  /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed",
    state_reason?: string | null,
  /** @format uri */
    timeline_url?: string,
  /** Title of the issue */
    title: string,
  /** The type of issue. */
    type?: IssueType,
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the issue
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

} & {
    active_lock_reason?: string | null,
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees?: (object | null)[],
    author_association?: string,
    body?: string | null,
    closed_at?: string | null,
    comments?: number,
    comments_url?: string,
    created_at?: string,
    events_url?: string,
    html_url?: string,
    id?: number,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    labels_url?: string,
    locked: boolean,
    milestone?: object | null,
    node_id?: string,
    number?: number,
    performed_via_github_app?: object | null,
    reactions?: {
    "+1"?: number,
    "-1"?: number,
    confused?: number,
    eyes?: number,
    heart?: number,
    hooray?: number,
    laugh?: number,
    rocket?: number,
    total_count?: number,
    url?: string,

},
    repository_url?: string,
  /** State of the issue; either 'open' or 'closed' */
    state: "open" | "closed",
    timeline_url?: string,
    title?: string,
    updated_at?: string,
    url?: string,
    user?: {
    avatar_url?: string,
    events_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    html_url?: string,
  /** @format int64 */
    id?: number,
    login?: string,
    node_id?: string,
    organizations_url?: string,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    url?: string,

},

}),
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** issue_comment deleted event */
  export interface WebhookIssueCommentDeleted {
    action: "deleted",
  /** The [comment](https://docs.github.com/enterprise-server@3.17/rest/issues/comments#get-an-issue-comment) itself. */
    comment: WebhooksIssueComment,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) the comment belongs to. */
    issue: ({
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** Contents of the issue */
    body: string | null,
  /** @format date-time */
    closed_at: string | null,
    comments: number,
  /** @format uri */
    comments_url: string,
  /** @format date-time */
    created_at: string,
    draft?: boolean,
  /** @format uri */
    events_url: string,
  /** @format uri */
    html_url: string,
  /** @format int64 */
    id: number,
    labels?: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
  /** @format uri-template */
    labels_url: string,
    locked?: boolean,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    pull_request?: {
  /** @format uri */
    diff_url?: string,
  /** @format uri */
    html_url?: string,
  /** @format date-time */
    merged_at?: string | null,
  /** @format uri */
    patch_url?: string,
  /** @format uri */
    url?: string,

},
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** @format uri */
    repository_url: string,
  /** Sub-issues Summary */
    sub_issues_summary?: {
    total: number,
    completed: number,
    percent_completed: number,

},
  /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed",
    state_reason?: string | null,
  /** @format uri */
    timeline_url?: string,
  /** Title of the issue */
    title: string,
  /** The type of issue. */
    type?: IssueType,
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the issue
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

} & {
    active_lock_reason?: string | null,
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees?: (object | null)[],
    author_association?: string,
    body?: string | null,
    closed_at?: string | null,
    comments?: number,
    comments_url?: string,
    created_at?: string,
    events_url?: string,
    html_url?: string,
    id?: number,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    labels_url?: string,
    locked: boolean,
    milestone?: object | null,
    node_id?: string,
    number?: number,
    performed_via_github_app?: object | null,
    reactions?: {
    "+1"?: number,
    "-1"?: number,
    confused?: number,
    eyes?: number,
    heart?: number,
    hooray?: number,
    laugh?: number,
    rocket?: number,
    total_count?: number,
    url?: string,

},
    repository_url?: string,
  /** State of the issue; either 'open' or 'closed' */
    state: "open" | "closed",
    timeline_url?: string,
    title?: string,
    updated_at?: string,
    url?: string,
    user?: {
    avatar_url?: string,
    events_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    html_url?: string,
  /** @format int64 */
    id?: number,
    login?: string,
    node_id?: string,
    organizations_url?: string,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    url?: string,
    user_view_type?: string,

},

}),
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** issue_comment edited event */
  export interface WebhookIssueCommentEdited {
    action: "edited",
  /** The changes to the comment. */
    changes: WebhooksChanges,
  /** The [comment](https://docs.github.com/enterprise-server@3.17/rest/issues/comments#get-an-issue-comment) itself. */
    comment: WebhooksIssueComment,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) the comment belongs to. */
    issue: ({
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** Contents of the issue */
    body: string | null,
  /** @format date-time */
    closed_at: string | null,
    comments: number,
  /** @format uri */
    comments_url: string,
  /** @format date-time */
    created_at: string,
    draft?: boolean,
  /** @format uri */
    events_url: string,
  /** @format uri */
    html_url: string,
  /** @format int64 */
    id: number,
    labels?: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
  /** @format uri-template */
    labels_url: string,
    locked?: boolean,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "reminder" | "pull_request_review_thread")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write" | "admin",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    pull_request?: {
  /** @format uri */
    diff_url?: string,
  /** @format uri */
    html_url?: string,
  /** @format date-time */
    merged_at?: string | null,
  /** @format uri */
    patch_url?: string,
  /** @format uri */
    url?: string,

},
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** @format uri */
    repository_url: string,
  /** Sub-issues Summary */
    sub_issues_summary?: {
    total: number,
    completed: number,
    percent_completed: number,

},
  /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed",
    state_reason?: string | null,
  /** @format uri */
    timeline_url?: string,
  /** Title of the issue */
    title: string,
  /** The type of issue. */
    type?: IssueType,
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the issue
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

} & {
    active_lock_reason?: string | null,
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees?: (object | null)[],
    author_association?: string,
    body?: string | null,
    closed_at?: string | null,
    comments?: number,
    comments_url?: string,
    created_at?: string,
    events_url?: string,
    html_url?: string,
    id?: number,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    labels_url?: string,
    locked: boolean,
    milestone?: object | null,
    node_id?: string,
    number?: number,
    performed_via_github_app?: object | null,
    reactions?: {
    "+1"?: number,
    "-1"?: number,
    confused?: number,
    eyes?: number,
    heart?: number,
    hooray?: number,
    laugh?: number,
    rocket?: number,
    total_count?: number,
    url?: string,

},
    repository_url?: string,
  /** State of the issue; either 'open' or 'closed' */
    state: "open" | "closed",
    timeline_url?: string,
    title?: string,
    updated_at?: string,
    url?: string,
    user?: {
    avatar_url?: string,
    events_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    html_url?: string,
  /** @format int64 */
    id?: number,
    login?: string,
    node_id?: string,
    organizations_url?: string,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    url?: string,

},

}),
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** issues assigned event */
  export interface WebhookIssuesAssigned {
  /** The action that was performed. */
    action: "assigned",
    assignee?: WebhooksUser,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself. */
    issue: WebhooksIssue,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** issues closed event */
  export interface WebhookIssuesClosed {
  /** The action that was performed. */
    action: "closed",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself. */
    issue: ({
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** Contents of the issue */
    body: string | null,
  /** @format date-time */
    closed_at: string | null,
    comments: number,
  /** @format uri */
    comments_url: string,
  /** @format date-time */
    created_at: string,
    draft?: boolean,
  /** @format uri */
    events_url: string,
  /** @format uri */
    html_url: string,
  /** @format int64 */
    id: number,
    labels?: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
  /** @format uri-template */
    labels_url: string,
    locked?: boolean,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "security_and_analysis" | "reminder" | "pull_request_review_thread")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write" | "admin",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    pull_request?: {
  /** @format uri */
    diff_url?: string,
  /** @format uri */
    html_url?: string,
  /** @format date-time */
    merged_at?: string | null,
  /** @format uri */
    patch_url?: string,
  /** @format uri */
    url?: string,

},
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** @format uri */
    repository_url: string,
  /** Sub-issues Summary */
    sub_issues_summary?: {
    total: number,
    completed: number,
    percent_completed: number,

},
  /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed",
    state_reason?: string | null,
  /** @format uri */
    timeline_url?: string,
  /** Title of the issue */
    title: string,
  /** The type of issue. */
    type?: IssueType,
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the issue
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

} & {
    active_lock_reason?: string | null,
    assignee?: object | null,
    assignees?: (object | null)[],
    author_association?: string,
    body?: string | null,
    closed_at: string | null,
    comments?: number,
    comments_url?: string,
    created_at?: string,
    events_url?: string,
    html_url?: string,
    id?: number,
    labels?: (object | null)[],
    labels_url?: string,
    locked?: boolean,
    milestone?: object | null,
    node_id?: string,
    number?: number,
    performed_via_github_app?: object | null,
    reactions?: {
    "+1"?: number,
    "-1"?: number,
    confused?: number,
    eyes?: number,
    heart?: number,
    hooray?: number,
    laugh?: number,
    rocket?: number,
    total_count?: number,
    url?: string,

},
    repository_url?: string,
    state: "closed" | "open",
    timeline_url?: string,
    title?: string,
    updated_at?: string,
    url?: string,
    user?: {
    avatar_url?: string,
    events_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    html_url?: string,
  /** @format int64 */
    id?: number,
    login?: string,
    node_id?: string,
    organizations_url?: string,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    url?: string,
    user_view_type?: string,

},

}),
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** issues deleted event */
  export interface WebhookIssuesDeleted {
    action: "deleted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * Issue
   * The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself.
   */
    issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** Contents of the issue */
    body: string | null,
  /** @format date-time */
    closed_at: string | null,
    comments: number,
  /** @format uri */
    comments_url: string,
  /** @format date-time */
    created_at: string,
    draft?: boolean,
  /** @format uri */
    events_url: string,
  /** @format uri */
    html_url: string,
  /** @format int64 */
    id: number,
    labels?: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
  /** @format uri-template */
    labels_url: string,
    locked?: boolean,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "reminder")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    pull_request?: {
  /** @format uri */
    diff_url?: string,
  /** @format uri */
    html_url?: string,
  /** @format date-time */
    merged_at?: string | null,
  /** @format uri */
    patch_url?: string,
  /** @format uri */
    url?: string,

},
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** @format uri */
    repository_url: string,
  /** Sub-issues Summary */
    sub_issues_summary?: {
    total: number,
    completed: number,
    percent_completed: number,

},
  /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed",
    state_reason?: string | null,
  /** @format uri */
    timeline_url?: string,
  /** Title of the issue */
    title: string,
  /** The type of issue. */
    type?: IssueType,
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the issue
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** issues demilestoned event */
  export interface WebhookIssuesDemilestoned {
    action: "demilestoned",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * Issue
   * The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself.
   */
    issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** Contents of the issue */
    body: string | null,
  /** @format date-time */
    closed_at: string | null,
    comments: number,
  /** @format uri */
    comments_url: string,
  /** @format date-time */
    created_at: string,
    draft?: boolean,
  /** @format uri */
    events_url: string,
  /** @format uri */
    html_url: string,
  /** @format int64 */
    id: number,
    labels?: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
  /** @format uri-template */
    labels_url: string,
    locked?: boolean,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write" | "admin",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    pull_request?: {
  /** @format uri */
    diff_url?: string,
  /** @format uri */
    html_url?: string,
  /** @format date-time */
    merged_at?: string | null,
  /** @format uri */
    patch_url?: string,
  /** @format uri */
    url?: string,

},
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** @format uri */
    repository_url: string,
  /** Sub-issues Summary */
    sub_issues_summary?: {
    total: number,
    completed: number,
    percent_completed: number,

},
  /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed",
    state_reason?: string | null,
  /** @format uri */
    timeline_url?: string,
  /** Title of the issue */
    title: string,
  /** The type of issue. */
    type?: IssueType,
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the issue
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** A collection of related issues and pull requests. */
    milestone?: WebhooksMilestone,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** issues edited event */
  export interface WebhookIssuesEdited {
    action: "edited",
  /** The changes to the issue. */
    changes: {
    body?: {
  /** The previous version of the body. */
    from: string,

},
    title?: {
  /** The previous version of the title. */
    from: string,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * Issue
   * The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself.
   */
    issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** Contents of the issue */
    body: string | null,
  /** @format date-time */
    closed_at: string | null,
    comments: number,
  /** @format uri */
    comments_url: string,
  /** @format date-time */
    created_at: string,
    draft?: boolean,
  /** @format uri */
    events_url: string,
  /** @format uri */
    html_url: string,
  /** @format int64 */
    id: number,
    labels?: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
  /** @format uri-template */
    labels_url: string,
    locked?: boolean,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "security_and_analysis" | "pull_request_review_thread" | "reminder")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write" | "admin",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    pull_request?: {
  /** @format uri */
    diff_url?: string,
  /** @format uri */
    html_url?: string,
  /** @format date-time */
    merged_at?: string | null,
  /** @format uri */
    patch_url?: string,
  /** @format uri */
    url?: string,

},
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** @format uri */
    repository_url: string,
  /** Sub-issues Summary */
    sub_issues_summary?: {
    total: number,
    completed: number,
    percent_completed: number,

},
  /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed",
    state_reason?: string | null,
  /** @format uri */
    timeline_url?: string,
  /** The type of issue. */
    type?: IssueType,
  /** Title of the issue */
    title: string,
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the issue
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    label?: WebhooksLabel,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** issues labeled event */
  export interface WebhookIssuesLabeled {
    action: "labeled",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * Issue
   * The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself.
   */
    issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** Contents of the issue */
    body: string | null,
  /** @format date-time */
    closed_at: string | null,
    comments: number,
  /** @format uri */
    comments_url: string,
  /** @format date-time */
    created_at: string,
    draft?: boolean,
  /** @format uri */
    events_url: string,
  /** @format uri */
    html_url: string,
  /** @format int64 */
    id: number,
    labels?: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
  /** @format uri-template */
    labels_url: string,
    locked?: boolean,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "pull_request_review_thread" | "reminder")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write" | "admin",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    pull_request?: {
  /** @format uri */
    diff_url?: string,
  /** @format uri */
    html_url?: string,
  /** @format date-time */
    merged_at?: string | null,
  /** @format uri */
    patch_url?: string,
  /** @format uri */
    url?: string,

},
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** @format uri */
    repository_url: string,
  /** Sub-issues Summary */
    sub_issues_summary?: {
    total: number,
    completed: number,
    percent_completed: number,

},
  /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed",
    state_reason?: string | null,
  /** @format uri */
    timeline_url?: string,
  /** The type of issue. */
    type?: IssueType,
  /** Title of the issue */
    title: string,
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the issue
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    label?: WebhooksLabel,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** issues locked event */
  export interface WebhookIssuesLocked {
    action: "locked",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * Issue
   * The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself.
   */
    issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** Contents of the issue */
    body: string | null,
  /** @format date-time */
    closed_at: string | null,
    comments: number,
  /** @format uri */
    comments_url: string,
  /** @format date-time */
    created_at: string,
    draft?: boolean,
  /** @format uri */
    events_url: string,
  /** @format uri */
    html_url: string,
  /** @format int64 */
    id: number,
    labels?: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
  /** @format uri-template */
    labels_url: string,
    locked: true,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "reminder" | "security_and_analysis")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    pull_request?: {
  /** @format uri */
    diff_url?: string,
  /** @format uri */
    html_url?: string,
  /** @format date-time */
    merged_at?: string | null,
  /** @format uri */
    patch_url?: string,
  /** @format uri */
    url?: string,

},
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** @format uri */
    repository_url: string,
  /** Sub-issues Summary */
    sub_issues_summary?: {
    total: number,
    completed: number,
    percent_completed: number,

},
  /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed",
    state_reason?: string | null,
  /** @format uri */
    timeline_url?: string,
  /** The type of issue. */
    type?: IssueType,
  /** Title of the issue */
    title: string,
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the issue
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** issues milestoned event */
  export interface WebhookIssuesMilestoned {
    action: "milestoned",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * Issue
   * The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself.
   */
    issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** Contents of the issue */
    body: string | null,
  /** @format date-time */
    closed_at: string | null,
    comments: number,
  /** @format uri */
    comments_url: string,
  /** @format date-time */
    created_at: string,
    draft?: boolean,
  /** @format uri */
    events_url: string,
  /** @format uri */
    html_url: string,
  /** @format int64 */
    id: number,
    labels?: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
  /** @format uri-template */
    labels_url: string,
    locked?: boolean,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "reminder")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write" | "admin",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    pull_request?: {
  /** @format uri */
    diff_url?: string,
  /** @format uri */
    html_url?: string,
  /** @format date-time */
    merged_at?: string | null,
  /** @format uri */
    patch_url?: string,
  /** @format uri */
    url?: string,

},
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** @format uri */
    repository_url: string,
  /** Sub-issues Summary */
    sub_issues_summary?: {
    total: number,
    completed: number,
    percent_completed: number,

},
  /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed",
    state_reason?: string | null,
  /** @format uri */
    timeline_url?: string,
  /** Title of the issue */
    title: string,
  /** The type of issue. */
    type?: IssueType,
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the issue
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** A collection of related issues and pull requests. */
    milestone: WebhooksMilestone,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** issues opened event */
  export interface WebhookIssuesOpened {
    action: "opened",
    changes?: {
  /**
   * Issue
   * The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself.
   */
    old_issue: {
    active_lock_reason?: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees?: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association?: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** Contents of the issue */
    body?: string | null,
  /** @format date-time */
    closed_at?: string | null,
    comments?: number,
  /** @format uri */
    comments_url?: string,
  /** @format date-time */
    created_at?: string,
    draft?: boolean,
  /** @format uri */
    events_url?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    labels?: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
  /** @format uri-template */
    labels_url?: string,
    locked?: boolean,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone?: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id?: string,
    number: number,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    pull_request?: {
  /** @format uri */
    diff_url?: string,
  /** @format uri */
    html_url?: string,
  /** @format date-time */
    merged_at?: string | null,
  /** @format uri */
    patch_url?: string,
  /** @format uri */
    url?: string,

},
  /** Reactions */
    reactions?: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** @format uri */
    repository_url?: string,
  /** Sub-issues Summary */
    sub_issues_summary?: {
    total: number,
    completed: number,
    percent_completed: number,

},
  /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed",
    state_reason?: string | null,
  /** @format uri */
    timeline_url?: string,
  /** Title of the issue */
    title?: string,
  /** @format date-time */
    updated_at?: string,
  /**
   * URL for the issue
   * @format uri
   */
    url?: string,
  /** User */
    user?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The type of issue. */
    type?: IssueType,

},
  /**
   * Repository
   * A git repository
   */
    old_repository: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string,any>,
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /** Whether the repository has discussions enabled. */
    has_discussions?: boolean,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require commit signoff. */
    web_commit_signoff_required?: boolean,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * Issue
   * The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself.
   */
    issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** Contents of the issue */
    body: string | null,
  /** @format date-time */
    closed_at: string | null,
    comments: number,
  /** @format uri */
    comments_url: string,
  /** @format date-time */
    created_at: string,
    draft?: boolean,
  /** @format uri */
    events_url: string,
  /** @format uri */
    html_url: string,
  /** @format int64 */
    id: number,
    labels?: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
  /** @format uri-template */
    labels_url: string,
    locked?: boolean,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "security_and_analysis" | "pull_request_review_thread" | "reminder")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write" | "admin",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    pull_request?: {
  /** @format uri */
    diff_url?: string,
  /** @format uri */
    html_url?: string,
  /** @format date-time */
    merged_at?: string | null,
  /** @format uri */
    patch_url?: string,
  /** @format uri */
    url?: string,

},
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** @format uri */
    repository_url: string,
  /** Sub-issues Summary */
    sub_issues_summary?: {
    total: number,
    completed: number,
    percent_completed: number,

},
  /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed",
    state_reason?: string | null,
  /** @format uri */
    timeline_url?: string,
  /** Title of the issue */
    title: string,
  /** The type of issue. */
    type?: IssueType,
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the issue
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** issues pinned event */
  export interface WebhookIssuesPinned {
    action: "pinned",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself. */
    issue: WebhooksIssue2,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** issues reopened event */
  export interface WebhookIssuesReopened {
    action: "reopened",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * Issue
   * The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself.
   */
    issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** Contents of the issue */
    body: string | null,
  /** @format date-time */
    closed_at: string | null,
    comments: number,
  /** @format uri */
    comments_url: string,
  /** @format date-time */
    created_at: string,
    draft?: boolean,
  /** @format uri */
    events_url: string,
  /** @format uri */
    html_url: string,
  /** @format int64 */
    id: number,
    labels?: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
  /** @format uri-template */
    labels_url: string,
    locked?: boolean,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run" | "pull_request_review_thread" | "reminder")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write" | "admin",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write" | "admin",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    pull_request?: {
  /** @format uri */
    diff_url?: string,
  /** @format uri */
    html_url?: string,
  /** @format date-time */
    merged_at?: string | null,
  /** @format uri */
    patch_url?: string,
  /** @format uri */
    url?: string,

},
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** @format uri */
    repository_url: string,
  /** Sub-issues Summary */
    sub_issues_summary?: {
    total: number,
    completed: number,
    percent_completed: number,

},
  /** State of the issue; either 'open' or 'closed' */
    state: "open" | "closed",
    state_reason?: string | null,
  /** @format uri */
    timeline_url?: string,
  /** Title of the issue */
    title: string,
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the issue
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The type of issue. */
    type?: IssueType,

},
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** issues transferred event */
  export interface WebhookIssuesTransferred {
    action: "transferred",
    changes: {
  /**
   * Issue
   * The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself.
   */
    new_issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** Contents of the issue */
    body: string | null,
  /** @format date-time */
    closed_at: string | null,
    comments: number,
  /** @format uri */
    comments_url: string,
  /** @format date-time */
    created_at: string,
    draft?: boolean,
  /** @format uri */
    events_url: string,
  /** @format uri */
    html_url: string,
  /** @format int64 */
    id: number,
    labels?: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
  /** @format uri-template */
    labels_url: string,
    locked?: boolean,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    pull_request?: {
  /** @format uri */
    diff_url?: string,
  /** @format uri */
    html_url?: string,
  /** @format date-time */
    merged_at?: string | null,
  /** @format uri */
    patch_url?: string,
  /** @format uri */
    url?: string,

},
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** @format uri */
    repository_url: string,
  /** Sub-issues Summary */
    sub_issues_summary?: {
    total: number,
    completed: number,
    percent_completed: number,

},
  /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed",
    state_reason?: string | null,
  /** @format uri */
    timeline_url?: string,
  /** Title of the issue */
    title: string,
  /** The type of issue. */
    type?: IssueType,
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the issue
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * Repository
   * A git repository
   */
    new_repository: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string,any>,
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself. */
    issue: WebhooksIssue2,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** issues unassigned event */
  export interface WebhookIssuesUnassigned {
  /** The action that was performed. */
    action: "unassigned",
    assignee?: WebhooksUserMannequin,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself. */
    issue: WebhooksIssue,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** issues unlabeled event */
  export interface WebhookIssuesUnlabeled {
    action: "unlabeled",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself. */
    issue: WebhooksIssue,
    label?: WebhooksLabel,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** issues unlocked event */
  export interface WebhookIssuesUnlocked {
    action: "unlocked",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * Issue
   * The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself.
   */
    issue: {
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** Contents of the issue */
    body: string | null,
  /** @format date-time */
    closed_at: string | null,
    comments: number,
  /** @format uri */
    comments_url: string,
  /** @format date-time */
    created_at: string,
    draft?: boolean,
  /** @format uri */
    events_url: string,
  /** @format uri */
    html_url: string,
  /** @format int64 */
    id: number,
    labels?: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
  /** @format uri-template */
    labels_url: string,
    locked: false,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /**
   * App
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
    performed_via_github_app?: {
  /** @format date-time */
    created_at: string | null,
    description: string | null,
  /** The list of events for the GitHub app */
    events?: ("branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "content_reference" | "create" | "delete" | "deployment" | "deployment_review" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "repository" | "repository_dispatch" | "secret_scanning_alert" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_dispatch" | "workflow_run")[],
  /** @format uri */
    external_url: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the GitHub app */
    id: number | null,
  /** The name of the GitHub app */
    name: string,
    node_id: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The set of permissions for the GitHub app */
    permissions?: {
    actions?: "read" | "write",
    administration?: "read" | "write",
    checks?: "read" | "write",
    content_references?: "read" | "write",
    contents?: "read" | "write",
    deployments?: "read" | "write",
    discussions?: "read" | "write",
    emails?: "read" | "write",
    environments?: "read" | "write",
    issues?: "read" | "write",
    keys?: "read" | "write",
    members?: "read" | "write",
    metadata?: "read" | "write",
    organization_administration?: "read" | "write",
    organization_hooks?: "read" | "write",
    organization_packages?: "read" | "write",
    organization_plan?: "read" | "write",
    organization_projects?: "read" | "write",
    organization_secrets?: "read" | "write",
    organization_self_hosted_runners?: "read" | "write",
    organization_user_blocking?: "read" | "write",
    packages?: "read" | "write",
    pages?: "read" | "write",
    pull_requests?: "read" | "write",
    repository_hooks?: "read" | "write",
    repository_projects?: "read" | "write",
    secret_scanning_alerts?: "read" | "write",
    secrets?: "read" | "write",
    security_events?: "read" | "write",
    security_scanning_alert?: "read" | "write",
    single_file?: "read" | "write",
    statuses?: "read" | "write",
    team_discussions?: "read" | "write",
    vulnerability_alerts?: "read" | "write",
    workflows?: "read" | "write",

},
  /** The slug name of the GitHub app */
    slug?: string,
  /** @format date-time */
    updated_at: string | null,

},
    pull_request?: {
  /** @format uri */
    diff_url?: string,
  /** @format uri */
    html_url?: string,
  /** @format date-time */
    merged_at?: string | null,
  /** @format uri */
    patch_url?: string,
  /** @format uri */
    url?: string,

},
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** @format uri */
    repository_url: string,
  /** Sub-issues Summary */
    sub_issues_summary?: {
    total: number,
    completed: number,
    percent_completed: number,

},
  /** State of the issue; either 'open' or 'closed' */
    state?: "open" | "closed",
    state_reason?: string | null,
  /** @format uri */
    timeline_url?: string,
  /** Title of the issue */
    title: string,
  /** The type of issue. */
    type?: IssueType,
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the issue
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** issues unpinned event */
  export interface WebhookIssuesUnpinned {
    action: "unpinned",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The [issue](https://docs.github.com/enterprise-server@3.17/rest/issues/issues#get-an-issue) itself. */
    issue: WebhooksIssue2,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** label created event */
  export interface WebhookLabelCreated {
    action: "created",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
    label: WebhooksLabel,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** label deleted event */
  export interface WebhookLabelDeleted {
    action: "deleted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
    label: WebhooksLabel,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** label edited event */
  export interface WebhookLabelEdited {
    action: "edited",
  /** The changes to the label if the action was `edited`. */
    changes?: {
    color?: {
  /** The previous version of the color if the action was `edited`. */
    from: string,

},
    description?: {
  /** The previous version of the description if the action was `edited`. */
    from: string,

},
    name?: {
  /** The previous version of the name if the action was `edited`. */
    from: string,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
    label: WebhooksLabel,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** member added event */
  export interface WebhookMemberAdded {
    action: "added",
    changes?: {
  /**
   * This field is included for legacy purposes; use the `role_name` field instead. The `maintain`
   * role is mapped to `write` and the `triage` role is mapped to `read`. To determine the role
   * assigned to the collaborator, use the `role_name` field instead, which will provide the full
   * role name, including custom roles.
   */
    permission?: {
    to: "write" | "admin" | "read",

},
  /** The role assigned to the collaborator. */
    role_name?: {
    to: string,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
    member: WebhooksUser,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** member edited event */
  export interface WebhookMemberEdited {
    action: "edited",
  /** The changes to the collaborator permissions */
    changes: {
    old_permission?: {
  /** The previous permissions of the collaborator if the action was edited. */
    from: string,

},
    permission?: {
    from?: string | null,
    to?: string | null,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
    member: WebhooksUser,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** member removed event */
  export interface WebhookMemberRemoved {
    action: "removed",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
    member: WebhooksUser,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** membership added event */
  export interface WebhookMembershipAdded {
    action: "added",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
    member: WebhooksUser,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** The scope of the membership. Currently, can only be `team`. */
    scope: "team",
  /** User */
    sender: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** Groups of organization members that gives permissions on specified repositories. */
    team: WebhooksTeam,
}

  /** membership removed event */
  export interface WebhookMembershipRemoved {
    action: "removed",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
    member: WebhooksUser,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** The scope of the membership. Currently, can only be `team`. */
    scope: "team" | "organization",
  /** User */
    sender: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** Groups of organization members that gives permissions on specified repositories. */
    team: WebhooksTeam,
}

  /** meta deleted event */
  export interface WebhookMetaDeleted {
    action: "deleted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /** The deleted webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace. */
    hook: {
    active: boolean,
    config: {
    content_type: "json" | "form",
    insecure_ssl: string,
    secret?: string,
  /** @format uri */
    url: string,

},
    created_at: string,
    events: ("*" | "branch_protection_rule" | "check_run" | "check_suite" | "code_scanning_alert" | "commit_comment" | "create" | "delete" | "deployment" | "deployment_status" | "deploy_key" | "discussion" | "discussion_comment" | "fork" | "gollum" | "issues" | "issue_comment" | "label" | "member" | "membership" | "meta" | "milestone" | "organization" | "org_block" | "package" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "pull_request_review_thread" | "push" | "registry_package" | "release" | "repository" | "repository_import" | "repository_vulnerability_alert" | "secret_scanning_alert" | "secret_scanning_alert_location" | "security_and_analysis" | "star" | "status" | "team" | "team_add" | "watch" | "workflow_job" | "workflow_run" | "repository_dispatch" | "projects_v2_item")[],
    id: number,
    name: string,
    type: string,
    updated_at: string,

},
  /** The id of the modified webhook. */
    hook_id: number,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    repository?: (null | RepositoryWebhooks),
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** milestone closed event */
  export interface WebhookMilestoneClosed {
    action: "closed",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** A collection of related issues and pull requests. */
    milestone: WebhooksMilestone,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** milestone created event */
  export interface WebhookMilestoneCreated {
    action: "created",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** A collection of related issues and pull requests. */
    milestone: WebhooksMilestone3,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** milestone deleted event */
  export interface WebhookMilestoneDeleted {
    action: "deleted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** A collection of related issues and pull requests. */
    milestone: WebhooksMilestone,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** milestone edited event */
  export interface WebhookMilestoneEdited {
    action: "edited",
  /** The changes to the milestone if the action was `edited`. */
    changes: {
    description?: {
  /** The previous version of the description if the action was `edited`. */
    from: string,

},
    due_on?: {
  /** The previous version of the due date if the action was `edited`. */
    from: string,

},
    title?: {
  /** The previous version of the title if the action was `edited`. */
    from: string,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** A collection of related issues and pull requests. */
    milestone: WebhooksMilestone,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** milestone opened event */
  export interface WebhookMilestoneOpened {
    action: "opened",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** A collection of related issues and pull requests. */
    milestone: WebhooksMilestone3,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** organization deleted event */
  export interface WebhookOrganizationDeleted {
    action: "deleted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The membership between the user and the organization. Not present when the action is `member_invited`. */
    membership?: WebhooksMembership,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** organization member_added event */
  export interface WebhookOrganizationMemberAdded {
    action: "member_added",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The membership between the user and the organization. Not present when the action is `member_invited`. */
    membership: WebhooksMembership,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** organization member_invited event */
  export interface WebhookOrganizationMemberInvited {
    action: "member_invited",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The invitation for the user or email if the action is `member_invited`. */
    invitation: {
  /** @format date-time */
    created_at: string,
    email: string | null,
  /** @format date-time */
    failed_at: string | null,
    failed_reason: string | null,
    id: number,
  /** @format uri */
    invitation_teams_url: string,
  /** User */
    inviter: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    login: string | null,
    node_id: string,
    role: string,
    team_count: number,
    invitation_source?: string,

},
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
    user?: WebhooksUser,
}

  /** organization member_removed event */
  export interface WebhookOrganizationMemberRemoved {
    action: "member_removed",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The membership between the user and the organization. Not present when the action is `member_invited`. */
    membership: WebhooksMembership,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** organization renamed event */
  export interface WebhookOrganizationRenamed {
    action: "renamed",
    changes?: {
    login?: {
    from?: string,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The membership between the user and the organization. Not present when the action is `member_invited`. */
    membership?: WebhooksMembership,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Ruby Gems metadata */
  export interface WebhookRubygemsMetadata {
    name?: string,
    description?: string,
    readme?: string,
    homepage?: string,
    version_info?: {
    version?: string,

},
    platform?: string,
    metadata?: Record<string,string>,
    repo?: string,
    dependencies?: (Record<string,string>)[],
    commit_oid?: string,
}

  /** package published event */
  export interface WebhookPackagePublished {
    action: "published",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Information about the package. */
    package: {
    created_at: string | null,
    description: string | null,
    ecosystem: string,
  /** @format uri */
    html_url: string,
    id: number,
    name: string,
    namespace: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    package_type: string,
    package_version: {
  /** User */
    author?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    body?: (string | object),
    body_html?: string,
    container_metadata?: {
    labels?: object | null,
    manifest?: object | null,
    tag?: {
    digest?: string,
    name?: string,

},

},
    created_at?: string,
    description: string,
    docker_metadata?: ({
    tags?: (string)[],

})[],
    draft?: boolean,
  /** @format uri */
    html_url: string,
    id: number,
    installation_command: string,
    manifest?: string,
    metadata: (Record<string,any>)[],
    name: string,
    npm_metadata?: {
    name?: string,
    version?: string,
    npm_user?: string,
    author?: object | null,
    bugs?: object | null,
    dependencies?: object,
    dev_dependencies?: object,
    peer_dependencies?: object,
    optional_dependencies?: object,
    description?: string,
    dist?: object | null,
    git_head?: string,
    homepage?: string,
    license?: string,
    main?: string,
    repository?: object | null,
    scripts?: object,
    id?: string,
    node_version?: string,
    npm_version?: string,
    has_shrinkwrap?: boolean,
    maintainers?: (object)[],
    contributors?: (object)[],
    engines?: object,
    keywords?: (string)[],
    files?: (string)[],
    bin?: object,
    man?: object,
    directories?: object | null,
    os?: (string)[],
    cpu?: (string)[],
    readme?: string,
    installation_command?: string,
    release_id?: number,
    commit_oid?: string,
    published_via_actions?: boolean,
    deleted_by_id?: number,

},
    nuget_metadata?: (any)[] | null,
    package_files: ({
    content_type: string,
    created_at: string,
  /** @format uri */
    download_url: string,
    id: number,
    "md5": string | null,
    name: string,
    "sha1": string | null,
    "sha256": string | null,
    size: number,
    state: string | null,
    updated_at: string,

})[],
    package_url?: string,
    prerelease?: boolean,
    release?: {
  /** User */
    author: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    created_at: string,
    draft: boolean,
  /** @format uri */
    html_url: string,
    id: number,
    name: string | null,
    prerelease: boolean,
    published_at: string,
    tag_name: string,
    target_commitish: string,
  /** @format uri */
    url: string,

},
    rubygems_metadata?: (WebhookRubygemsMetadata)[],
    source_url?: string,
    summary: string,
    tag_name?: string,
    target_commitish?: string,
    target_oid?: string,
    updated_at?: string,
    version: string,

},
    registry: {
  /** @format uri */
    about_url: string,
    name: string,
    type: string,
  /** @format uri */
    url: string,
    vendor: string,

},
    updated_at: string | null,

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** package updated event */
  export interface WebhookPackageUpdated {
    action: "updated",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Information about the package. */
    package: {
    created_at: string,
    description: string | null,
    ecosystem: string,
  /** @format uri */
    html_url: string,
    id: number,
    name: string,
    namespace: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    package_type: string,
    package_version: {
  /** User */
    author: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    body: string,
    body_html: string,
    created_at: string,
    description: string,
    docker_metadata?: ({
    tags?: (string)[],

})[],
    draft?: boolean,
  /** @format uri */
    html_url: string,
    id: number,
    installation_command: string,
    manifest?: string,
    metadata: (Record<string,any>)[],
    name: string,
    package_files: ({
    content_type: string,
    created_at: string,
  /** @format uri */
    download_url: string,
    id: number,
    "md5": string | null,
    name: string,
    "sha1": string | null,
    "sha256": string,
    size: number,
    state: string,
    updated_at: string,

})[],
    package_url?: string,
    prerelease?: boolean,
    release?: {
  /** User */
    author: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    created_at: string,
    draft: boolean,
  /** @format uri */
    html_url: string,
    id: number,
    name: string,
    prerelease: boolean,
    published_at: string,
    tag_name: string,
    target_commitish: string,
  /** @format uri */
    url: string,

},
    rubygems_metadata?: (WebhookRubygemsMetadata)[],
  /** @format uri */
    source_url?: string,
    summary: string,
    tag_name?: string,
    target_commitish: string,
    target_oid: string,
    updated_at: string,
    version: string,

},
    registry: {
  /** @format uri */
    about_url: string,
    name: string,
    type: string,
  /** @format uri */
    url: string,
    vendor: string,

},
    updated_at: string,

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** page_build event */
  export interface WebhookPageBuild {
  /** The [List GitHub Pages builds](https://docs.github.com/enterprise-server@3.17/rest/pages/pages#list-github-pages-builds) itself. */
    build: {
    commit: string | null,
    created_at: string,
    duration: number,
    error: {
    message: string | null,

},
  /** User */
    pusher: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    status: string,
    updated_at: string,
  /** @format uri */
    url: string,

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
    id: number,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** personal_access_token_request approved event */
  export interface WebhookPersonalAccessTokenRequestApproved {
    action: "approved",
  /** Details of a Personal Access Token Request. */
    personal_access_token_request: PersonalAccessTokenRequest,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation: SimpleInstallation,
}

  /** personal_access_token_request cancelled event */
  export interface WebhookPersonalAccessTokenRequestCancelled {
    action: "cancelled",
  /** Details of a Personal Access Token Request. */
    personal_access_token_request: PersonalAccessTokenRequest,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation: SimpleInstallation,
}

  /** personal_access_token_request created event */
  export interface WebhookPersonalAccessTokenRequestCreated {
    action: "created",
  /** Details of a Personal Access Token Request. */
    personal_access_token_request: PersonalAccessTokenRequest,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
}

  /** personal_access_token_request denied event */
  export interface WebhookPersonalAccessTokenRequestDenied {
    action: "denied",
  /** Details of a Personal Access Token Request. */
    personal_access_token_request: PersonalAccessTokenRequest,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation: SimpleInstallation,
}

    export interface WebhookPing {
  /**
   * Webhook
   * The webhook that is being pinged
   */
    hook?: {
  /** Determines whether the hook is actually triggered for the events it subscribes to. */
    active: boolean,
  /** Only included for GitHub Apps. When you register a new GitHub App, GitHub sends a ping event to the webhook URL you specified during registration. The GitHub App ID sent in this field is required for authenticating an app. */
    app_id?: number,
    config: {
  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
    content_type?: WebhookConfigContentType,
  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
    insecure_ssl?: WebhookConfigInsecureSsl,
  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.17/webhooks/event-payloads/#delivery-headers). */
    secret?: WebhookConfigSecret,
  /** The URL to which the payloads will be delivered. */
    url?: WebhookConfigUrl,

},
  /** @format date-time */
    created_at: string,
  /** @format uri */
    deliveries_url?: string,
  /** Determines what events the hook is triggered for. Default: ['push']. */
    events: (string)[],
  /** Unique identifier of the webhook. */
    id: number,
    last_response?: HookResponse,
  /** The type of webhook. The only valid value is 'web'. */
    name: "web",
  /** @format uri */
    ping_url?: string,
  /** @format uri */
    test_url?: string,
    type: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url?: string,

},
  /** The ID of the webhook that triggered the ping. */
    hook_id?: number,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
  /** Random string of GitHub zen. */
    zen?: string,
}

  /** The webhooks ping payload encoded with URL encoding. */
  export interface WebhookPingFormEncoded {
  /** A URL-encoded string of the ping JSON payload. The decoded payload is a JSON object. */
    payload: string,
}

  /** project_card converted event */
  export interface WebhookProjectCardConverted {
    action: "converted",
    changes: {
    note: {
    from: string,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    project_card: WebhooksProjectCard,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** project_card created event */
  export interface WebhookProjectCardCreated {
    action: "created",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    project_card: WebhooksProjectCard,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** project_card deleted event */
  export interface WebhookProjectCardDeleted {
    action: "deleted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Project Card */
    project_card: {
    after_id?: number | null,
  /** Whether or not the card is archived */
    archived: boolean,
    column_id: number | null,
  /** @format uri */
    column_url: string,
  /** @format uri */
    content_url?: string,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The project card's ID */
    id: number,
    node_id: string,
    note: string | null,
  /** @format uri */
    project_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    repository?: (null | RepositoryWebhooks),
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** project_card edited event */
  export interface WebhookProjectCardEdited {
    action: "edited",
    changes: {
    note: {
    from: string | null,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    project_card: WebhooksProjectCard,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** project_card moved event */
  export interface WebhookProjectCardMoved {
    action: "moved",
    changes?: {
    column_id: {
    from: number,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    project_card: ({
    after_id?: number | null,
  /** Whether or not the card is archived */
    archived: boolean,
    column_id: number,
  /** @format uri */
    column_url: string,
  /** @format uri */
    content_url?: string,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The project card's ID */
    id: number,
    node_id: string,
    note: string | null,
  /** @format uri */
    project_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

} & {
    after_id: number | null,
    archived?: boolean,
    column_id?: number,
    column_url?: string,
    created_at?: string,
    creator?: {
    avatar_url?: string,
    events_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    html_url?: string,
    id?: number,
    login?: string,
    node_id?: string,
    organizations_url?: string,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    url?: string,

},
    id?: number,
    node_id?: string,
    note?: string | null,
    project_url?: string,
    updated_at?: string,
    url?: string,

}),
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** project closed event */
  export interface WebhookProjectClosed {
    action: "closed",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    project: WebhooksProject,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** project_column created event */
  export interface WebhookProjectColumnCreated {
    action: "created",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    project_column: WebhooksProjectColumn,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** project_column deleted event */
  export interface WebhookProjectColumnDeleted {
    action: "deleted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    project_column: WebhooksProjectColumn,
    repository?: (null | RepositoryWebhooks),
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** project_column edited event */
  export interface WebhookProjectColumnEdited {
    action: "edited",
    changes: {
    name?: {
    from: string,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    project_column: WebhooksProjectColumn,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** project_column moved event */
  export interface WebhookProjectColumnMoved {
    action: "moved",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    project_column: WebhooksProjectColumn,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** project created event */
  export interface WebhookProjectCreated {
    action: "created",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    project: WebhooksProject,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** project deleted event */
  export interface WebhookProjectDeleted {
    action: "deleted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    project: WebhooksProject,
    repository?: (null | RepositoryWebhooks),
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** project edited event */
  export interface WebhookProjectEdited {
    action: "edited",
  /** The changes to the project if the action was `edited`. */
    changes?: {
    body?: {
  /** The previous version of the body if the action was `edited`. */
    from: string,

},
    name?: {
  /** The changes to the project if the action was `edited`. */
    from: string,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    project: WebhooksProject,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** project reopened event */
  export interface WebhookProjectReopened {
    action: "reopened",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    project: WebhooksProject,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Projects v2 Project Closed Event */
  export interface WebhookProjectsV2ProjectClosed {
    action: "closed",
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /** A projects v2 project */
    "projects_v2": ProjectsV2,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** A project was created */
  export interface WebhookProjectsV2ProjectCreated {
    action: "created",
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /** A projects v2 project */
    "projects_v2": ProjectsV2,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Projects v2 Project Deleted Event */
  export interface WebhookProjectsV2ProjectDeleted {
    action: "deleted",
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /** A projects v2 project */
    "projects_v2": ProjectsV2,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Projects v2 Project Edited Event */
  export interface WebhookProjectsV2ProjectEdited {
    action: "edited",
    changes: {
    description?: {
    from?: string | null,
    to?: string | null,

},
    public?: {
    from?: boolean,
    to?: boolean,

},
    short_description?: {
    from?: string | null,
    to?: string | null,

},
    title?: {
    from?: string,
    to?: string,

},

},
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /** A projects v2 project */
    "projects_v2": ProjectsV2,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Projects v2 Item Archived Event */
  export interface WebhookProjectsV2ItemArchived {
    action: "archived",
    changes: WebhooksProjectChanges,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /** An item belonging to a project */
    "projects_v2_item": ProjectsV2Item,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Projects v2 Item Converted Event */
  export interface WebhookProjectsV2ItemConverted {
    action: "converted",
    changes: {
    content_type?: {
    from?: string | null,
    to?: string,

},

},
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /** An item belonging to a project */
    "projects_v2_item": ProjectsV2Item,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Projects v2 Item Created Event */
  export interface WebhookProjectsV2ItemCreated {
    action: "created",
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /** An item belonging to a project */
    "projects_v2_item": ProjectsV2Item,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Projects v2 Item Deleted Event */
  export interface WebhookProjectsV2ItemDeleted {
    action: "deleted",
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /** An item belonging to a project */
    "projects_v2_item": ProjectsV2Item,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Projects v2 Item Edited Event */
  export interface WebhookProjectsV2ItemEdited {
    action: "edited",
  /**
   * The changes made to the item may involve modifications in the item's fields and draft issue body.
   * It includes altered values for text, number, date, single select, and iteration fields, along with the GraphQL node ID of the changed field.
   */
    changes?: ({
    field_value: {
    field_node_id?: string,
    field_type?: string,
    field_name?: string,
    project_number?: number,
    from?: (string | number | ProjectsV2SingleSelectOption | ProjectsV2IterationSetting),
    to?: (string | number | ProjectsV2SingleSelectOption | ProjectsV2IterationSetting),

},

} | {
    body: {
    from?: string | null,
    to?: string | null,

},

}),
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /** An item belonging to a project */
    "projects_v2_item": ProjectsV2Item,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Projects v2 Item Reordered Event */
  export interface WebhookProjectsV2ItemReordered {
    action: "reordered",
    changes: {
    "previous_projects_v2_item_node_id"?: {
    from?: string | null,
    to?: string | null,

},

},
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /** An item belonging to a project */
    "projects_v2_item": ProjectsV2Item,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Projects v2 Item Restored Event */
  export interface WebhookProjectsV2ItemRestored {
    action: "restored",
    changes: WebhooksProjectChanges,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /** An item belonging to a project */
    "projects_v2_item": ProjectsV2Item,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Projects v2 Project Reopened Event */
  export interface WebhookProjectsV2ProjectReopened {
    action: "reopened",
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /** A projects v2 project */
    "projects_v2": ProjectsV2,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** public event */
  export interface WebhookPublic {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** pull_request assigned event */
  export interface WebhookPullRequestAssigned {
    action: "assigned",
    assignee: WebhooksUser,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The pull request number. */
    number: WebhooksNumber,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Pull Request */
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
    additions?: number,
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    changed_files?: number,
  /** @format date-time */
    closed_at: string | null,
    comments?: number,
  /** @format uri */
    comments_url: string,
    commits?: number,
  /** @format uri */
    commits_url: string,
  /** @format date-time */
    created_at: string,
    deletions?: number,
  /** @format uri */
    diff_url: string,
  /** Indicates whether or not the pull request is a draft. */
    draft: boolean,
    head: {
    label: string | null,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
  /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean,
    merge_commit_sha: string | null,
    mergeable?: boolean | null,
    mergeable_state?: string,
    merged?: boolean | null,
  /** @format date-time */
    merged_at: string | null,
  /** User */
    merged_by?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
  /** Number uniquely identifying the pull request within its repository. */
    number: number,
  /** @format uri */
    patch_url: string,
    rebaseable?: boolean | null,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
    review_comments?: number,
  /** @format uri */
    review_comments_url: string,
  /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
  /** The title of the pull request. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** pull_request auto_merge_disabled event */
  export interface WebhookPullRequestAutoMergeDisabled {
    action: "auto_merge_disabled",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
    number: number,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Pull Request */
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
    additions?: number,
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    changed_files?: number,
  /** @format date-time */
    closed_at: string | null,
    comments?: number,
  /** @format uri */
    comments_url: string,
    commits?: number,
  /** @format uri */
    commits_url: string,
  /** @format date-time */
    created_at: string,
    deletions?: number,
  /** @format uri */
    diff_url: string,
  /** Indicates whether or not the pull request is a draft. */
    draft: boolean,
    head: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
  /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean,
    merge_commit_sha: string | null,
    mergeable?: boolean | null,
    mergeable_state?: string,
    merged?: boolean | null,
  /** @format date-time */
    merged_at: string | null,
  /** User */
    merged_by?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
  /** Number uniquely identifying the pull request within its repository. */
    number: number,
  /** @format uri */
    patch_url: string,
    rebaseable?: boolean | null,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
    review_comments?: number,
  /** @format uri */
    review_comments_url: string,
  /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
  /** The title of the pull request. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    reason: string,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** pull_request auto_merge_enabled event */
  export interface WebhookPullRequestAutoMergeEnabled {
    action: "auto_merge_enabled",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
    number: number,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Pull Request */
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
    additions?: number,
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    changed_files?: number,
  /** @format date-time */
    closed_at: string | null,
    comments?: number,
  /** @format uri */
    comments_url: string,
    commits?: number,
  /** @format uri */
    commits_url: string,
  /** @format date-time */
    created_at: string,
    deletions?: number,
  /** @format uri */
    diff_url: string,
  /** Indicates whether or not the pull request is a draft. */
    draft: boolean,
    head: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the repository */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
  /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean,
    merge_commit_sha: string | null,
    mergeable?: boolean | null,
    mergeable_state?: string,
    merged?: boolean | null,
  /** @format date-time */
    merged_at: string | null,
  /** User */
    merged_by?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
  /** Number uniquely identifying the pull request within its repository. */
    number: number,
  /** @format uri */
    patch_url: string,
    rebaseable?: boolean | null,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
    review_comments?: number,
  /** @format uri */
    review_comments_url: string,
  /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
  /** The title of the pull request. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    reason?: string,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** pull_request closed event */
  export interface WebhookPullRequestClosed {
    action: "closed",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The pull request number. */
    number: WebhooksNumber,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    pull_request: PullRequestWebhook,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** pull_request converted_to_draft event */
  export interface WebhookPullRequestConvertedToDraft {
    action: "converted_to_draft",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The pull request number. */
    number: WebhooksNumber,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    pull_request: PullRequestWebhook,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** pull_request demilestoned event */
  export interface WebhookPullRequestDemilestoned {
    action: "demilestoned",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /** A collection of related issues and pull requests. */
    milestone?: Milestone,
  /** The pull request number. */
    number: WebhooksNumber,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    pull_request: WebhooksPullRequest5,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** pull_request edited event */
  export interface WebhookPullRequestEdited {
    action: "edited",
  /** The changes to the comment if the action was `edited`. */
    changes: {
    base?: {
    ref: {
    from: string,

},
    sha: {
    from: string,

},

},
    body?: {
  /** The previous version of the body if the action was `edited`. */
    from: string,

},
    title?: {
  /** The previous version of the title if the action was `edited`. */
    from: string,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The pull request number. */
    number: WebhooksNumber,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    pull_request: PullRequestWebhook,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** pull_request labeled event */
  export interface WebhookPullRequestLabeled {
    action: "labeled",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
    label?: WebhooksLabel,
  /** The pull request number. */
    number: WebhooksNumber,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Pull Request */
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
    additions?: number,
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    changed_files?: number,
  /** @format date-time */
    closed_at: string | null,
    comments?: number,
  /** @format uri */
    comments_url: string,
    commits?: number,
  /** @format uri */
    commits_url: string,
  /** @format date-time */
    created_at: string,
    deletions?: number,
  /** @format uri */
    diff_url: string,
  /** Indicates whether or not the pull request is a draft. */
    draft: boolean,
    head: {
    label: string | null,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
  /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean,
    merge_commit_sha: string | null,
    mergeable?: boolean | null,
    mergeable_state?: string,
    merged?: boolean | null,
  /** @format date-time */
    merged_at: string | null,
  /** User */
    merged_by?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
  /** Number uniquely identifying the pull request within its repository. */
    number: number,
  /** @format uri */
    patch_url: string,
    rebaseable?: boolean | null,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
    review_comments?: number,
  /** @format uri */
    review_comments_url: string,
  /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
  /** The title of the pull request. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** pull_request locked event */
  export interface WebhookPullRequestLocked {
    action: "locked",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The pull request number. */
    number: WebhooksNumber,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Pull Request */
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
    additions?: number,
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    changed_files?: number,
  /** @format date-time */
    closed_at: string | null,
    comments?: number,
  /** @format uri */
    comments_url: string,
    commits?: number,
  /** @format uri */
    commits_url: string,
  /** @format date-time */
    created_at: string,
    deletions?: number,
  /** @format uri */
    diff_url: string,
  /** Indicates whether or not the pull request is a draft. */
    draft: boolean,
    head: {
    label: string | null,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
  /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean,
    merge_commit_sha: string | null,
    mergeable?: boolean | null,
    mergeable_state?: string,
    merged?: boolean | null,
  /** @format date-time */
    merged_at: string | null,
  /** User */
    merged_by?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
  /** Number uniquely identifying the pull request within its repository. */
    number: number,
  /** @format uri */
    patch_url: string,
    rebaseable?: boolean | null,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
    review_comments?: number,
  /** @format uri */
    review_comments_url: string,
  /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
  /** The title of the pull request. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** pull_request milestoned event */
  export interface WebhookPullRequestMilestoned {
    action: "milestoned",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /** A collection of related issues and pull requests. */
    milestone?: Milestone,
  /** The pull request number. */
    number: WebhooksNumber,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    pull_request: WebhooksPullRequest5,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** pull_request opened event */
  export interface WebhookPullRequestOpened {
    action: "opened",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The pull request number. */
    number: WebhooksNumber,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    pull_request: PullRequestWebhook,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** pull_request ready_for_review event */
  export interface WebhookPullRequestReadyForReview {
    action: "ready_for_review",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The pull request number. */
    number: WebhooksNumber,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    pull_request: PullRequestWebhook,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** pull_request reopened event */
  export interface WebhookPullRequestReopened {
    action: "reopened",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The pull request number. */
    number: WebhooksNumber,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    pull_request: PullRequestWebhook,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** pull_request_review_comment created event */
  export interface WebhookPullRequestReviewCommentCreated {
    action: "created",
  /**
   * Pull Request Review Comment
   * The [comment](https://docs.github.com/enterprise-server@3.17/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
   */
    comment: {
    _links: {
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    pull_request: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},

},
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** The text of the comment. */
    body: string,
  /** The SHA of the commit to which the comment applies. */
    commit_id: string,
  /** @format date-time */
    created_at: string,
  /** The diff of the line that the comment refers to. */
    diff_hunk: string,
  /**
   * HTML URL for the pull request review comment.
   * @format uri
   */
    html_url: string,
  /** The ID of the pull request review comment. */
    id: number,
  /** The comment ID to reply to. */
    in_reply_to_id?: number,
  /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    line: number | null,
  /** The node ID of the pull request review comment. */
    node_id: string,
  /** The SHA of the original commit to which the comment applies. */
    original_commit_id: string,
  /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    original_line: number | null,
  /** The index of the original line in the diff to which the comment applies. */
    original_position: number,
  /** The first line of the range for a multi-line comment. */
    original_start_line: number | null,
  /** The relative path of the file to which the comment applies. */
    path: string,
  /** The line index in the diff to which the comment applies. */
    position: number | null,
  /** The ID of the pull request review to which the comment belongs. */
    pull_request_review_id: number | null,
  /**
   * URL for the pull request that the review comment belongs to.
   * @format uri
   */
    pull_request_url: string,
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** The side of the first line of the range for a multi-line comment. */
    side: "LEFT" | "RIGHT",
  /** The first line of the range for a multi-line comment. */
    start_line: number | null,
  /**
   * The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
    start_side: "LEFT" | "RIGHT",
  /** The level at which the comment is targeted, can be a diff line or a file. */
    subject_type?: "line" | "file",
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the pull request review comment
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge?: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    closed_at: string | null,
  /** @format uri */
    comments_url: string,
  /** @format uri */
    commits_url: string,
    created_at: string,
  /** @format uri */
    diff_url: string,
    draft?: boolean,
    head: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions?: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
    merge_commit_sha: string | null,
    merged_at: string | null,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /** @format uri */
    patch_url: string,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
  /** @format uri */
    review_comments_url: string,
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
    title: string,
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** pull_request_review_comment deleted event */
  export interface WebhookPullRequestReviewCommentDeleted {
    action: "deleted",
  /** The [comment](https://docs.github.com/enterprise-server@3.17/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself. */
    comment: WebhooksReviewComment,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge?: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    closed_at: string | null,
  /** @format uri */
    comments_url: string,
  /** @format uri */
    commits_url: string,
    created_at: string,
  /** @format uri */
    diff_url: string,
    draft?: boolean,
    head: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
    merge_commit_sha: string | null,
    merged_at: string | null,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /** @format uri */
    patch_url: string,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
  /** @format uri */
    review_comments_url: string,
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
    title: string,
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** pull_request_review_comment edited event */
  export interface WebhookPullRequestReviewCommentEdited {
    action: "edited",
  /** The changes to the comment. */
    changes: WebhooksChanges,
  /** The [comment](https://docs.github.com/enterprise-server@3.17/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself. */
    comment: WebhooksReviewComment,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge?: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    closed_at: string | null,
  /** @format uri */
    comments_url: string,
  /** @format uri */
    commits_url: string,
    created_at: string,
  /** @format uri */
    diff_url: string,
    draft?: boolean,
    head: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
    merge_commit_sha: string | null,
    merged_at: string | null,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /** @format uri */
    patch_url: string,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
  /** @format uri */
    review_comments_url: string,
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
    title: string,
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
    user_view_type?: string,
  /** @format uri */
    url?: string,

},

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** pull_request_review dismissed event */
  export interface WebhookPullRequestReviewDismissed {
    action: "dismissed",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Simple Pull Request */
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    closed_at: string | null,
  /** @format uri */
    comments_url: string,
  /** @format uri */
    commits_url: string,
    created_at: string,
  /** @format uri */
    diff_url: string,
    draft: boolean,
    head: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
    merge_commit_sha: string | null,
    merged_at: string | null,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /** @format uri */
    patch_url: string,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
  /** @format uri */
    review_comments_url: string,
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
    title: string,
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** The review that was affected. */
    review: {
    _links: {
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    pull_request: {
  /** @format uri-template */
    href: string,

},

},
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** The text of the review. */
    body: string | null,
  /** A commit SHA for the review. */
    commit_id: string,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the review */
    id: number,
    node_id: string,
  /** @format uri */
    pull_request_url: string,
    state: "dismissed" | "approved" | "changes_requested",
  /** @format date-time */
    submitted_at: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** pull_request_review edited event */
  export interface WebhookPullRequestReviewEdited {
    action: "edited",
    changes: {
    body?: {
  /** The previous version of the body if the action was `edited`. */
    from: string,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Simple Pull Request */
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    closed_at: string | null,
  /** @format uri */
    comments_url: string,
  /** @format uri */
    commits_url: string,
    created_at: string,
  /** @format uri */
    diff_url: string,
    draft: boolean,
    head: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
    merge_commit_sha: string | null,
    merged_at: string | null,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /** @format uri */
    patch_url: string,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
  /** @format uri */
    review_comments_url: string,
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
    title: string,
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** The review that was affected. */
    review: WebhooksReview,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** pull_request review_request_removed event */
  export type WebhookPullRequestReviewRequestRemoved = ({
    action: "review_request_removed",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The pull request number. */
    number: number,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Pull Request */
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
    additions?: number,
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /** The default value for a squash merge commit message. */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /** The default value for a squash merge commit title. */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    changed_files?: number,
  /** @format date-time */
    closed_at: string | null,
    comments?: number,
  /** @format uri */
    comments_url: string,
    commits?: number,
  /** @format uri */
    commits_url: string,
  /** @format date-time */
    created_at: string,
    deletions?: number,
  /** @format uri */
    diff_url: string,
  /** Indicates whether or not the pull request is a draft. */
    draft: boolean,
    head: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
  /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean,
    merge_commit_sha: string | null,
    mergeable?: boolean | null,
    mergeable_state?: string,
    merged?: boolean | null,
  /** @format date-time */
    merged_at: string | null,
  /** User */
    merged_by?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
  /** Number uniquely identifying the pull request within its repository. */
    number: number,
  /** @format uri */
    patch_url: string,
    rebaseable?: boolean | null,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
    review_comments?: number,
  /** @format uri */
    review_comments_url: string,
  /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
  /** The title of the pull request. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** User */
    requested_reviewer: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** A GitHub user. */
    sender: SimpleUser,

} | {
    action: "review_request_removed",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The pull request number. */
    number: number,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Pull Request */
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
    additions?: number,
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    changed_files?: number,
  /** @format date-time */
    closed_at: string | null,
    comments?: number,
  /** @format uri */
    comments_url: string,
    commits?: number,
  /** @format uri */
    commits_url: string,
  /** @format date-time */
    created_at: string,
    deletions?: number,
  /** @format uri */
    diff_url: string,
  /** Indicates whether or not the pull request is a draft. */
    draft: boolean,
    head: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
  /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean,
    merge_commit_sha: string | null,
    mergeable?: boolean | null,
    mergeable_state?: string,
    merged?: boolean | null,
  /** @format date-time */
    merged_at: string | null,
  /** User */
    merged_by?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
  /** Number uniquely identifying the pull request within its repository. */
    number: number,
  /** @format uri */
    patch_url: string,
    rebaseable?: boolean | null,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
    review_comments?: number,
  /** @format uri */
    review_comments_url: string,
  /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
  /** The title of the pull request. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /**
   * Team
   * Groups of organization members that gives permissions on specified repositories.
   */
    requested_team: {
    deleted?: boolean,
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** A GitHub user. */
    sender: SimpleUser,

})

  /** pull_request review_requested event */
  export type WebhookPullRequestReviewRequested = ({
    action: "review_requested",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The pull request number. */
    number: number,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Pull Request */
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
    additions?: number,
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    changed_files?: number,
  /** @format date-time */
    closed_at: string | null,
    comments?: number,
  /** @format uri */
    comments_url: string,
    commits?: number,
  /** @format uri */
    commits_url: string,
  /** @format date-time */
    created_at: string,
    deletions?: number,
  /** @format uri */
    diff_url: string,
  /** Indicates whether or not the pull request is a draft. */
    draft: boolean,
    head: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
  /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean,
    merge_commit_sha: string | null,
    mergeable?: boolean | null,
    mergeable_state?: string,
    merged?: boolean | null,
  /** @format date-time */
    merged_at: string | null,
  /** User */
    merged_by?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
  /** Number uniquely identifying the pull request within its repository. */
    number: number,
  /** @format uri */
    patch_url: string,
    rebaseable?: boolean | null,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
    review_comments?: number,
  /** @format uri */
    review_comments_url: string,
  /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
  /** The title of the pull request. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** User */
    requested_reviewer: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** A GitHub user. */
    sender: SimpleUser,

} | {
    action: "review_requested",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The pull request number. */
    number: number,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Pull Request */
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
    additions?: number,
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    changed_files?: number,
  /** @format date-time */
    closed_at: string | null,
    comments?: number,
  /** @format uri */
    comments_url: string,
    commits?: number,
  /** @format uri */
    commits_url: string,
  /** @format date-time */
    created_at: string,
    deletions?: number,
  /** @format uri */
    diff_url: string,
  /** Indicates whether or not the pull request is a draft. */
    draft: boolean,
    head: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
  /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean,
    merge_commit_sha: string | null,
    mergeable?: boolean | null,
    mergeable_state?: string,
    merged?: boolean | null,
  /** @format date-time */
    merged_at: string | null,
  /** User */
    merged_by?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
  /** Number uniquely identifying the pull request within its repository. */
    number: number,
  /** @format uri */
    patch_url: string,
    rebaseable?: boolean | null,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
    review_comments?: number,
  /** @format uri */
    review_comments_url: string,
  /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
  /** The title of the pull request. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /**
   * Team
   * Groups of organization members that gives permissions on specified repositories.
   */
    requested_team: {
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

},
  /** A GitHub user. */
    sender: SimpleUser,

})

  /** pull_request_review submitted event */
  export interface WebhookPullRequestReviewSubmitted {
    action: "submitted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Simple Pull Request */
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    closed_at: string | null,
  /** @format uri */
    comments_url: string,
  /** @format uri */
    commits_url: string,
    created_at: string,
  /** @format uri */
    diff_url: string,
    draft: boolean,
    head: {
    label: string | null,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
    merge_commit_sha: string | null,
    merged_at: string | null,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /** @format uri */
    patch_url: string,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
  /** @format uri */
    review_comments_url: string,
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
    title: string,
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** The review that was affected. */
    review: WebhooksReview,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** pull_request_review_thread resolved event */
  export interface WebhookPullRequestReviewThreadResolved {
    action: "resolved",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Simple Pull Request */
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    closed_at: string | null,
  /** @format uri */
    comments_url: string,
  /** @format uri */
    commits_url: string,
    created_at: string,
  /** @format uri */
    diff_url: string,
    draft: boolean,
    head: {
    label: string | null,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
    merge_commit_sha: string | null,
    merged_at: string | null,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /** @format uri */
    patch_url: string,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
  /** @format uri */
    review_comments_url: string,
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
    title: string,
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
    thread: {
    comments: ({
    _links: {
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    pull_request: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},

},
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** The text of the comment. */
    body: string,
  /** The SHA of the commit to which the comment applies. */
    commit_id: string,
  /** @format date-time */
    created_at: string,
  /** The diff of the line that the comment refers to. */
    diff_hunk: string,
  /**
   * HTML URL for the pull request review comment.
   * @format uri
   */
    html_url: string,
  /** The ID of the pull request review comment. */
    id: number,
  /** The comment ID to reply to. */
    in_reply_to_id?: number,
  /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    line: number | null,
  /** The node ID of the pull request review comment. */
    node_id: string,
  /** The SHA of the original commit to which the comment applies. */
    original_commit_id: string,
  /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    original_line: number | null,
  /** The index of the original line in the diff to which the comment applies. */
    original_position: number,
  /** The first line of the range for a multi-line comment. */
    original_start_line: number | null,
  /** The relative path of the file to which the comment applies. */
    path: string,
  /** The line index in the diff to which the comment applies. */
    position: number | null,
  /** The ID of the pull request review to which the comment belongs. */
    pull_request_review_id: number | null,
  /**
   * URL for the pull request that the review comment belongs to.
   * @format uri
   */
    pull_request_url: string,
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** The side of the first line of the range for a multi-line comment. */
    side: "LEFT" | "RIGHT",
  /** The first line of the range for a multi-line comment. */
    start_line: number | null,
  /**
   * The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
    start_side: "LEFT" | "RIGHT",
  /** The level at which the comment is targeted, can be a diff line or a file. */
    subject_type?: "line" | "file",
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the pull request review comment
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

})[],
    node_id: string,

},
}

  /** pull_request_review_thread unresolved event */
  export interface WebhookPullRequestReviewThreadUnresolved {
    action: "unresolved",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Simple Pull Request */
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    closed_at: string | null,
  /** @format uri */
    comments_url: string,
  /** @format uri */
    commits_url: string,
    created_at: string,
  /** @format uri */
    diff_url: string,
    draft: boolean,
    head: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
    merge_commit_sha: string | null,
    merged_at: string | null,
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
    number: number,
  /** @format uri */
    patch_url: string,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
  /** @format uri */
    review_comments_url: string,
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
    title: string,
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
    thread: {
    comments: ({
    _links: {
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    pull_request: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},

},
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /** The text of the comment. */
    body: string,
  /** The SHA of the commit to which the comment applies. */
    commit_id: string,
  /** @format date-time */
    created_at: string,
  /** The diff of the line that the comment refers to. */
    diff_hunk: string,
  /**
   * HTML URL for the pull request review comment.
   * @format uri
   */
    html_url: string,
  /** The ID of the pull request review comment. */
    id: number,
  /** The comment ID to reply to. */
    in_reply_to_id?: number,
  /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    line: number | null,
  /** The node ID of the pull request review comment. */
    node_id: string,
  /** The SHA of the original commit to which the comment applies. */
    original_commit_id: string,
  /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    original_line: number,
  /** The index of the original line in the diff to which the comment applies. */
    original_position: number,
  /** The first line of the range for a multi-line comment. */
    original_start_line: number | null,
  /** The relative path of the file to which the comment applies. */
    path: string,
  /** The line index in the diff to which the comment applies. */
    position: number | null,
  /** The ID of the pull request review to which the comment belongs. */
    pull_request_review_id: number | null,
  /**
   * URL for the pull request that the review comment belongs to.
   * @format uri
   */
    pull_request_url: string,
  /** Reactions */
    reactions: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** The side of the first line of the range for a multi-line comment. */
    side: "LEFT" | "RIGHT",
  /** The first line of the range for a multi-line comment. */
    start_line: number | null,
  /**
   * The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
    start_side: "LEFT" | "RIGHT",
  /** The level at which the comment is targeted, can be a diff line or a file. */
    subject_type?: "line" | "file",
  /** @format date-time */
    updated_at: string,
  /**
   * URL for the pull request review comment
   * @format uri
   */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

})[],
    node_id: string,

},
}

  /** pull_request synchronize event */
  export interface WebhookPullRequestSynchronize {
    action: "synchronize",
    after: string,
    before: string,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The pull request number. */
    number: WebhooksNumber,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Pull Request */
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
    additions?: number,
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    changed_files?: number,
  /** @format date-time */
    closed_at: string | null,
    comments?: number,
  /** @format uri */
    comments_url: string,
    commits?: number,
  /** @format uri */
    commits_url: string,
  /** @format date-time */
    created_at: string,
    deletions?: number,
  /** @format uri */
    diff_url: string,
  /** Indicates whether or not the pull request is a draft. */
    draft: boolean,
    head: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /** The default value for a merge commit message. */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /** The default value for a merge commit message title. */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
  /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean,
    merge_commit_sha: string | null,
    mergeable?: boolean | null,
    mergeable_state?: string,
    merged?: boolean | null,
  /** @format date-time */
    merged_at: string | null,
  /** User */
    merged_by?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
  /** Number uniquely identifying the pull request within its repository. */
    number: number,
  /** @format uri */
    patch_url: string,
    rebaseable?: boolean | null,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
    review_comments?: number,
  /** @format uri */
    review_comments_url: string,
  /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
  /** The title of the pull request. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** pull_request unassigned event */
  export interface WebhookPullRequestUnassigned {
    action: "unassigned",
    assignee?: WebhooksUserMannequin,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The pull request number. */
    number: WebhooksNumber,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Pull Request */
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
    additions?: number,
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string | null,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    changed_files?: number,
  /** @format date-time */
    closed_at: string | null,
    comments?: number,
  /** @format uri */
    comments_url: string,
    commits?: number,
  /** @format uri */
    commits_url: string,
  /** @format date-time */
    created_at: string,
    deletions?: number,
  /** @format uri */
    diff_url: string,
  /** Indicates whether or not the pull request is a draft. */
    draft: boolean,
    head: {
    label: string | null,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
  /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean,
    merge_commit_sha: string | null,
    mergeable?: boolean | null,
    mergeable_state?: string,
    merged?: boolean | null,
  /** @format date-time */
    merged_at: string | null,
  /** User */
    merged_by?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
  /** Number uniquely identifying the pull request within its repository. */
    number: number,
  /** @format uri */
    patch_url: string,
    rebaseable?: boolean | null,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
    review_comments?: number,
  /** @format uri */
    review_comments_url: string,
  /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
  /** The title of the pull request. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** pull_request unlabeled event */
  export interface WebhookPullRequestUnlabeled {
    action: "unlabeled",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
    label?: WebhooksLabel,
  /** The pull request number. */
    number: WebhooksNumber,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Pull Request */
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
    additions?: number,
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string | null,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    changed_files?: number,
  /** @format date-time */
    closed_at: string | null,
    comments?: number,
  /** @format uri */
    comments_url: string,
    commits?: number,
  /** @format uri */
    commits_url: string,
  /** @format date-time */
    created_at: string,
    deletions?: number,
  /** @format uri */
    diff_url: string,
  /** Indicates whether or not the pull request is a draft. */
    draft: boolean,
    head: {
    label: string | null,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /** The default value for a merge commit message. */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /** The default value for a merge commit message title. */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
  /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean,
    merge_commit_sha: string | null,
    mergeable?: boolean | null,
    mergeable_state?: string,
    merged?: boolean | null,
  /** @format date-time */
    merged_at: string | null,
  /** User */
    merged_by?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
  /** Number uniquely identifying the pull request within its repository. */
    number: number,
  /** @format uri */
    patch_url: string,
    rebaseable?: boolean | null,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
    review_comments?: number,
  /** @format uri */
    review_comments_url: string,
  /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
  /** The title of the pull request. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization" | "Mannequin",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** pull_request unlocked event */
  export interface WebhookPullRequestUnlocked {
    action: "unlocked",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /** The pull request number. */
    number: WebhooksNumber,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Pull Request */
    pull_request: {
    _links: {
  /** Link */
    comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    commits: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    html: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    issue: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comment: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    review_comments: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    self: {
  /** @format uri-template */
    href: string,

},
  /** Link */
    statuses: {
  /** @format uri-template */
    href: string,

},

},
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam",
    additions?: number,
  /** User */
    assignee: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    assignees: ({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

})[],
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
    author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER",
  /**
   * PullRequestAutoMerge
   * The status of auto merging a pull request.
   */
    auto_merge: {
  /** Commit message for the merge commit. */
    commit_message: string | null,
  /** Title for the merge commit message. */
    commit_title: string,
  /** User */
    enabled_by: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** The merge method to use. */
    merge_method: "merge" | "squash" | "rebase",

},
    base: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
    body: string | null,
    changed_files?: number,
  /** @format date-time */
    closed_at: string | null,
    comments?: number,
  /** @format uri */
    comments_url: string,
    commits?: number,
  /** @format uri */
    commits_url: string,
  /** @format date-time */
    created_at: string,
    deletions?: number,
  /** @format uri */
    diff_url: string,
  /** Indicates whether or not the pull request is a draft. */
    draft: boolean,
    head: {
    label: string,
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repo: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
    sha: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    issue_url: string,
    labels: ({
  /** 6-character hex code, without the leading #, identifying the color */
    color: string,
    default: boolean,
    description: string | null,
    id: number,
  /** The name of the label. */
    name: string,
    node_id: string,
  /**
   * URL for the label
   * @format uri
   */
    url: string,

})[],
    locked: boolean,
  /** Indicates whether maintainers can modify the pull request. */
    maintainer_can_modify?: boolean,
    merge_commit_sha: string | null,
    mergeable?: boolean | null,
    mergeable_state?: string,
    merged?: boolean | null,
  /** @format date-time */
    merged_at: string | null,
  /** User */
    merged_by?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
    milestone: {
  /** @format date-time */
    closed_at: string | null,
    closed_issues: number,
  /** @format date-time */
    created_at: string,
  /** User */
    creator: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    description: string | null,
  /** @format date-time */
    due_on: string | null,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    labels_url: string,
    node_id: string,
  /** The number of the milestone. */
    number: number,
    open_issues: number,
  /** The state of the milestone. */
    state: "open" | "closed",
  /** The title of the milestone. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,

},
    node_id: string,
  /** Number uniquely identifying the pull request within its repository. */
    number: number,
  /** @format uri */
    patch_url: string,
    rebaseable?: boolean | null,
    requested_reviewers: (({
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

} | {
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

}))[],
    requested_teams: ({
    deleted?: boolean,
  /** Description of the team */
    description?: string | null,
  /** @format uri */
    html_url?: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url?: string,
  /** Name of the team */
    name: string,
    node_id?: string,
    parent?: {
  /** Description of the team */
    description: string | null,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the team */
    id: number,
  /** @format uri-template */
    members_url: string,
  /** Name of the team */
    name: string,
    node_id: string,
  /** Permission that the team will have for its repositories */
    permission: string,
    privacy: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url: string,
    slug: string,
  /**
   * URL for the team
   * @format uri
   */
    url: string,

},
  /** Permission that the team will have for its repositories */
    permission?: string,
    privacy?: "open" | "closed" | "secret",
  /** @format uri */
    repositories_url?: string,
    slug?: string,
  /**
   * URL for the team
   * @format uri
   */
    url?: string,

})[],
  /** @format uri-template */
    review_comment_url: string,
    review_comments?: number,
  /** @format uri */
    review_comments_url: string,
  /** State of this Pull Request. Either `open` or `closed`. */
    state: "open" | "closed",
  /** @format uri */
    statuses_url: string,
  /** The title of the pull request. */
    title: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
  /** User */
    user: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** push event */
  export interface WebhookPush {
  /** The SHA of the most recent commit on `ref` after the push. */
    after: string,
    base_ref: WebhooksNullableString,
  /** The SHA of the most recent commit on `ref` before the push. */
    before: string,
  /** An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 2048 commits. If necessary, you can use the [Commits API](https://docs.github.com/enterprise-server@3.17/rest/commits) to fetch additional commits. */
    commits: ({
  /** An array of files added in the commit. A maximum of 3000 changed files will be reported per commit. */
    added?: (string)[],
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
    author: {
  /** @format date-time */
    date?: string,
  /** @format email */
    email: string | null,
  /** The git author's name. */
    name: string,
    username?: string,

},
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
    committer: {
  /** @format date-time */
    date?: string,
  /** @format email */
    email: string | null,
  /** The git author's name. */
    name: string,
    username?: string,

},
  /** Whether this commit is distinct from any that have been pushed before. */
    distinct: boolean,
    id: string,
  /** The commit message. */
    message: string,
  /** An array of files modified by the commit. A maximum of 3000 changed files will be reported per commit. */
    modified?: (string)[],
  /** An array of files removed in the commit. A maximum of 3000 changed files will be reported per commit. */
    removed?: (string)[],
  /**
   * The ISO 8601 timestamp of the commit.
   * @format date-time
   */
    timestamp: string,
    tree_id: string,
  /**
   * URL that points to the commit API resource.
   * @format uri
   */
    url: string,

})[],
  /** URL that shows the changes in this `ref` update, from the `before` commit to the `after` commit. For a newly created `ref` that is directly based on the default branch, this is the comparison between the head of the default branch and the `after` commit. Otherwise, this shows all commits until the `after` commit. */
    compare: string,
  /** Whether this push created the `ref`. */
    created: boolean,
  /** Whether this push deleted the `ref`. */
    deleted: boolean,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /** Whether this push was a force push of the `ref`. */
    forced: boolean,
  /** Commit */
    head_commit: {
  /** An array of files added in the commit. */
    added?: (string)[],
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
    author: {
  /** @format date-time */
    date?: string,
  /** @format email */
    email: string | null,
  /** The git author's name. */
    name: string,
    username?: string,

},
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
    committer: {
  /** @format date-time */
    date?: string,
  /** @format email */
    email: string | null,
  /** The git author's name. */
    name: string,
    username?: string,

},
  /** Whether this commit is distinct from any that have been pushed before. */
    distinct: boolean,
    id: string,
  /** The commit message. */
    message: string,
  /** An array of files modified by the commit. */
    modified?: (string)[],
  /** An array of files removed in the commit. */
    removed?: (string)[],
  /**
   * The ISO 8601 timestamp of the commit.
   * @format date-time
   */
    timestamp: string,
    tree_id: string,
  /**
   * URL that points to the commit API resource.
   * @format uri
   */
    url: string,

},
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
    pusher: {
  /** @format date-time */
    date?: string,
  /** @format email */
    email?: string | null,
  /** The git author's name. */
    name: string,
    username?: string,

},
  /** The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`. */
    ref: string,
  /**
   * Repository
   * A git repository
   */
    repository: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string,any>,
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,
  /** Whether to require contributors to sign off on web-based commits */
    web_commit_signoff_required?: boolean,

},
  /** A GitHub user. */
    sender?: SimpleUser,
}

    export interface WebhookRegistryPackagePublished {
    action: "published",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    registry_package: {
    created_at: string | null,
    description: string | null,
    ecosystem: string,
    html_url: string,
    id: number,
    name: string,
    namespace: string,
    owner: {
    avatar_url: string,
    events_url: string,
    followers_url: string,
    following_url: string,
    gists_url: string,
    gravatar_id: string,
    html_url: string,
    id: number,
    login: string,
    node_id: string,
    organizations_url: string,
    received_events_url: string,
    repos_url: string,
    site_admin: boolean,
    starred_url: string,
    subscriptions_url: string,
    type: string,
    url: string,
    user_view_type?: string,

},
    package_type: string,
    package_version: {
    author?: {
    avatar_url: string,
    events_url: string,
    followers_url: string,
    following_url: string,
    gists_url: string,
    gravatar_id: string,
    html_url: string,
    id: number,
    login: string,
    node_id: string,
    organizations_url: string,
    received_events_url: string,
    repos_url: string,
    site_admin: boolean,
    starred_url: string,
    subscriptions_url: string,
    type: string,
    url: string,
    user_view_type?: string,

},
    body?: (string | object),
    body_html?: string,
    container_metadata?: {
    labels?: object | null,
    manifest?: object | null,
    tag?: {
    digest?: string,
    name?: string,

},

},
    created_at?: string,
    description: string,
    docker_metadata?: ({
    tags?: (string)[],

})[],
    draft?: boolean,
    html_url: string,
    id: number,
    installation_command: string,
    manifest?: string,
    metadata: (Record<string,any>)[],
    name: string,
    npm_metadata?: {
    name?: string,
    version?: string,
    npm_user?: string,
    author?: (string | object),
    bugs?: (string | object),
    dependencies?: object,
    dev_dependencies?: object,
    peer_dependencies?: object,
    optional_dependencies?: object,
    description?: string,
    dist?: (string | object),
    git_head?: string,
    homepage?: string,
    license?: string,
    main?: string,
    repository?: (string | object),
    scripts?: object,
    id?: string,
    node_version?: string,
    npm_version?: string,
    has_shrinkwrap?: boolean,
    maintainers?: (string)[],
    contributors?: (string)[],
    engines?: object,
    keywords?: (string)[],
    files?: (string)[],
    bin?: object,
    man?: object,
    directories?: (string | object),
    os?: (string)[],
    cpu?: (string)[],
    readme?: string,
    installation_command?: string,
    release_id?: number,
    commit_oid?: string,
    published_via_actions?: boolean,
    deleted_by_id?: number,

},
    nuget_metadata?: (any)[] | null,
    package_files: ({
    content_type: string,
    created_at: string,
    download_url: string,
    id: number,
    "md5": string | null,
    name: string,
    "sha1": string | null,
    "sha256": string | null,
    size: number,
    state: string | null,
    updated_at: string,

})[],
    package_url: string,
    prerelease?: boolean,
    release?: {
    author?: {
    avatar_url?: string,
    events_url?: string,
    followers_url?: string,
    following_url?: string,
    gists_url?: string,
    gravatar_id?: string,
    html_url?: string,
    id?: number,
    login?: string,
    node_id?: string,
    organizations_url?: string,
    received_events_url?: string,
    repos_url?: string,
    site_admin?: boolean,
    starred_url?: string,
    subscriptions_url?: string,
    type?: string,
    url?: string,
    user_view_type?: string,

},
    created_at?: string,
    draft?: boolean,
    html_url?: string,
    id?: number,
    name?: string | null,
    prerelease?: boolean,
    published_at?: string,
    tag_name?: string,
    target_commitish?: string,
    url?: string,

},
    rubygems_metadata?: (WebhookRubygemsMetadata)[],
    summary: string,
    tag_name?: string,
    target_commitish?: string,
    target_oid?: string,
    updated_at?: string,
    version: string,

},
    registry: {
    about_url?: string,
    name?: string,
    type?: string,
    url?: string,
    vendor?: string,

},
    updated_at: string | null,

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

    export interface WebhookRegistryPackageUpdated {
    action: "updated",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    registry_package: {
    created_at: string,
    description: null,
    ecosystem: string,
    html_url: string,
    id: number,
    name: string,
    namespace: string,
    owner: {
    avatar_url: string,
    events_url: string,
    followers_url: string,
    following_url: string,
    gists_url: string,
    gravatar_id: string,
    html_url: string,
    id: number,
    login: string,
    node_id: string,
    organizations_url: string,
    received_events_url: string,
    repos_url: string,
    site_admin: boolean,
    starred_url: string,
    subscriptions_url: string,
    type: string,
    url: string,
    user_view_type?: string,

},
    package_type: string,
    package_version: {
    author: {
    avatar_url: string,
    events_url: string,
    followers_url: string,
    following_url: string,
    gists_url: string,
    gravatar_id: string,
    html_url: string,
    id: number,
    login: string,
    node_id: string,
    organizations_url: string,
    received_events_url: string,
    repos_url: string,
    site_admin: boolean,
    starred_url: string,
    subscriptions_url: string,
    type: string,
    url: string,
    user_view_type?: string,

},
    body: string,
    body_html: string,
    created_at: string,
    description: string,
    docker_metadata?: ({
    tags?: (string)[],

})[],
    draft?: boolean,
    html_url: string,
    id: number,
    installation_command: string,
    manifest?: string,
    metadata: (Record<string,any>)[],
    name: string,
    package_files: ({
    content_type?: string,
    created_at?: string,
    download_url?: string,
    id?: number,
    "md5"?: string | null,
    name?: string,
    "sha1"?: string | null,
    "sha256"?: string,
    size?: number,
    state?: string,
    updated_at?: string,

})[],
    package_url: string,
    prerelease?: boolean,
    release?: {
    author: {
    avatar_url: string,
    events_url: string,
    followers_url: string,
    following_url: string,
    gists_url: string,
    gravatar_id: string,
    html_url: string,
    id: number,
    login: string,
    node_id: string,
    organizations_url: string,
    received_events_url: string,
    repos_url: string,
    site_admin: boolean,
    starred_url: string,
    subscriptions_url: string,
    type: string,
    url: string,
    user_view_type?: string,

},
    created_at: string,
    draft: boolean,
    html_url: string,
    id: number,
    name: string,
    prerelease: boolean,
    published_at: string,
    tag_name: string,
    target_commitish: string,
    url: string,

},
    rubygems_metadata?: (WebhookRubygemsMetadata)[],
    summary: string,
    tag_name?: string,
    target_commitish: string,
    target_oid: string,
    updated_at: string,
    version: string,

},
    registry: object | null,
    updated_at: string,

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** release created event */
  export interface WebhookReleaseCreated {
    action: "created",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** The [release](https://docs.github.com/enterprise-server@3.17/rest/releases/releases/#get-a-release) object. */
    release: WebhooksRelease,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** release deleted event */
  export interface WebhookReleaseDeleted {
    action: "deleted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** The [release](https://docs.github.com/enterprise-server@3.17/rest/releases/releases/#get-a-release) object. */
    release: WebhooksRelease,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** release edited event */
  export interface WebhookReleaseEdited {
    action: "edited",
    changes: {
    body?: {
  /** The previous version of the body if the action was `edited`. */
    from: string,

},
    name?: {
  /** The previous version of the name if the action was `edited`. */
    from: string,

},
    tag_name?: {
  /** The previous version of the tag_name if the action was `edited`. */
    from: string,

},
    make_latest?: {
  /** Whether this release was explicitly `edited` to be the latest. */
    to: boolean,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** The [release](https://docs.github.com/enterprise-server@3.17/rest/releases/releases/#get-a-release) object. */
    release: WebhooksRelease,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** release prereleased event */
  export interface WebhookReleasePrereleased {
    action: "prereleased",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * Release
   * The [release](https://docs.github.com/enterprise-server@3.17/rest/releases/releases/#get-a-release) object.
   */
    release: {
    assets: ({
  /** @format uri */
    browser_download_url: string,
    content_type: string,
  /** @format date-time */
    created_at: string,
    download_count: number,
    id: number,
    label: string | null,
  /** The file name of the asset. */
    name: string,
    node_id: string,
    size: number,
    digest: string | null,
  /** State of the release asset. */
    state: "uploaded",
  /** @format date-time */
    updated_at: string,
  /** User */
    uploader?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

},
  /** @format uri */
    url: string,

})[],
  /** @format uri */
    assets_url: string,
  /** User */
    author: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    body: string | null,
  /** @format date-time */
    created_at: string | null,
  /** @format uri */
    discussion_url?: string,
  /** Whether the release is a draft or published */
    draft: boolean,
  /** @format uri */
    html_url: string,
    id: number,
  /** Whether or not the release is immutable. */
    immutable: boolean,
    name: string | null,
    node_id: string,
  /** Whether the release is identified as a prerelease or a full release. */
    prerelease: true,
  /** @format date-time */
    published_at: string | null,
  /** Reactions */
    reactions?: {
    "+1": number,
    "-1": number,
    confused: number,
    eyes: number,
    heart: number,
    hooray: number,
    laugh: number,
    rocket: number,
    total_count: number,
  /** @format uri */
    url: string,

},
  /** The name of the tag. */
    tag_name: string,
  /** @format uri */
    tarball_url: string | null,
  /** Specifies the commitish value that determines where the Git tag is created from. */
    target_commitish: string,
  /** @format uri-template */
    upload_url: string,
  /** @format uri */
    url: string,
  /** @format uri */
    zipball_url: string | null,

},
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** release published event */
  export interface WebhookReleasePublished {
    action: "published",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** The [release](https://docs.github.com/enterprise-server@3.17/rest/releases/releases/#get-a-release) object. */
    release: WebhooksRelease1,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** release released event */
  export interface WebhookReleaseReleased {
    action: "released",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** The [release](https://docs.github.com/enterprise-server@3.17/rest/releases/releases/#get-a-release) object. */
    release: WebhooksRelease,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** release unpublished event */
  export interface WebhookReleaseUnpublished {
    action: "unpublished",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** The [release](https://docs.github.com/enterprise-server@3.17/rest/releases/releases/#get-a-release) object. */
    release: WebhooksRelease1,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

    export interface WebhookRepositoryAnonymousAccessDisabled {
    action: "anonymous_access_disabled",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

    export interface WebhookRepositoryAnonymousAccessEnabled {
    action: "anonymous_access_enabled",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** repository archived event */
  export interface WebhookRepositoryArchived {
    action: "archived",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** repository created event */
  export interface WebhookRepositoryCreated {
    action: "created",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** repository deleted event */
  export interface WebhookRepositoryDeleted {
    action: "deleted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** repository_dispatch event */
  export interface WebhookRepositoryDispatchSample {
  /** The `event_type` that was specified in the `POST /repos/{owner}/{repo}/dispatches` request body. */
    action: string,
    branch: string,
  /** The `client_payload` that was specified in the `POST /repos/{owner}/{repo}/dispatches` request body. */
    client_payload: object | null,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** repository edited event */
  export interface WebhookRepositoryEdited {
    action: "edited",
    changes: {
    default_branch?: {
    from: string,

},
    description?: {
    from: string | null,

},
    homepage?: {
    from: string | null,

},
    topics?: {
    from?: (any)[] | null,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** repository privatized event */
  export interface WebhookRepositoryPrivatized {
    action: "privatized",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** repository publicized event */
  export interface WebhookRepositoryPublicized {
    action: "publicized",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** repository renamed event */
  export interface WebhookRepositoryRenamed {
    action: "renamed",
    changes: {
    repository: {
    name: {
    from: string,

},

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** repository ruleset created event */
  export interface WebhookRepositoryRulesetCreated {
    action: "created",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A set of rules to apply when specified conditions are met. */
    repository_ruleset: RepositoryRuleset,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** repository ruleset deleted event */
  export interface WebhookRepositoryRulesetDeleted {
    action: "deleted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A set of rules to apply when specified conditions are met. */
    repository_ruleset: RepositoryRuleset,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** repository ruleset edited event */
  export interface WebhookRepositoryRulesetEdited {
    action: "edited",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A set of rules to apply when specified conditions are met. */
    repository_ruleset: RepositoryRuleset,
    changes?: {
    name?: {
    from?: string,

},
    enforcement?: {
    from?: string,

},
    conditions?: {
    added?: (RepositoryRulesetConditions)[],
    deleted?: (RepositoryRulesetConditions)[],
    updated?: ({
  /** Parameters for a repository ruleset ref name condition */
    condition?: RepositoryRulesetConditions,
    changes?: {
    condition_type?: {
    from?: string,

},
    target?: {
    from?: string,

},
    include?: {
    from?: (string)[],

},
    exclude?: {
    from?: (string)[],

},

},

})[],

},
    rules?: {
    added?: (RepositoryRule)[],
    deleted?: (RepositoryRule)[],
    updated?: ({
  /** A repository rule. */
    rule?: RepositoryRule,
    changes?: {
    configuration?: {
    from?: string,

},
    rule_type?: {
    from?: string,

},
    pattern?: {
    from?: string,

},

},

})[],

},

},
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** repository transferred event */
  export interface WebhookRepositoryTransferred {
    action: "transferred",
    changes: {
    owner: {
    from: {
  /** Organization */
    organization?: {
  /** @format uri */
    avatar_url: string,
    description: string | null,
  /** @format uri */
    events_url: string,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url?: string,
    id: number,
  /** @format uri */
    issues_url: string,
    login: string,
  /** @format uri-template */
    members_url: string,
    node_id: string,
  /** @format uri-template */
    public_members_url: string,
  /** @format uri */
    repos_url: string,
  /** @format uri */
    url: string,

},
  /** User */
    user?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
  /** @format int64 */
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},

},

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** repository unarchived event */
  export interface WebhookRepositoryUnarchived {
    action: "unarchived",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** repository_vulnerability_alert create event */
  export interface WebhookRepositoryVulnerabilityAlertCreate {
    action: "create",
  /** The security alert of the vulnerable dependency. */
    alert: WebhooksAlert,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** repository_vulnerability_alert dismiss event */
  export interface WebhookRepositoryVulnerabilityAlertDismiss {
    action: "dismiss",
  /**
   * Repository Vulnerability Alert Alert
   * The security alert of the vulnerable dependency.
   */
    alert: {
    affected_package_name: string,
    affected_range: string,
    created_at: string,
    dismiss_comment?: string | null,
    dismiss_reason: string,
    dismissed_at: string,
  /** User */
    dismisser: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    external_identifier: string,
  /** @format uri */
    external_reference: string | null,
    fix_reason?: string,
  /** @format date-time */
    fixed_at?: string,
    fixed_in?: string,
    ghsa_id: string,
    id: number,
    node_id: string,
    number: number,
    severity: string,
    state: "dismissed",

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** repository_vulnerability_alert reopen event */
  export interface WebhookRepositoryVulnerabilityAlertReopen {
    action: "reopen",
  /** The security alert of the vulnerable dependency. */
    alert: WebhooksAlert,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** repository_vulnerability_alert resolve event */
  export interface WebhookRepositoryVulnerabilityAlertResolve {
    action: "resolve",
  /**
   * Repository Vulnerability Alert Alert
   * The security alert of the vulnerable dependency.
   */
    alert: {
    affected_package_name: string,
    affected_range: string,
    created_at: string,
    dismiss_reason?: string,
    dismissed_at?: string,
  /** User */
    dismisser?: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

},
    external_identifier: string,
  /** @format uri */
    external_reference: string | null,
    fix_reason?: string,
  /** @format date-time */
    fixed_at?: string,
    fixed_in?: string,
    ghsa_id: string,
    id: number,
    node_id: string,
    number: number,
    severity: string,
    state: "fixed" | "open",

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** secret_scanning_alert created event */
  export interface WebhookSecretScanningAlertCreated {
    action: "created",
    alert: SecretScanningAlertWebhook,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** Secret Scanning Alert Location Created Event */
  export interface WebhookSecretScanningAlertLocationCreated {
    action?: "created",
    alert: SecretScanningAlertWebhook,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
    location: SecretScanningLocation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** Secret Scanning Alert Location Created Event */
  export interface WebhookSecretScanningAlertLocationCreatedFormEncoded {
  /** A URL-encoded string of the secret_scanning_alert_location.created JSON payload. The decoded payload is a JSON object. */
    payload: string,
}

  /** secret_scanning_alert reopened event */
  export interface WebhookSecretScanningAlertReopened {
    action: "reopened",
    alert: SecretScanningAlertWebhook,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** secret_scanning_alert resolved event */
  export interface WebhookSecretScanningAlertResolved {
    action: "resolved",
    alert: SecretScanningAlertWebhook,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** secret_scanning_alert validated event */
  export interface WebhookSecretScanningAlertValidated {
    action: "validated",
    alert: SecretScanningAlertWebhook,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** secret_scanning_scan completed event */
  export interface WebhookSecretScanningScanCompleted {
    action: "completed",
  /** What type of scan was completed */
    type: "backfill" | "custom-pattern-backfill" | "pattern-version-backfill",
  /** What type of content was scanned */
    source: "git" | "issues" | "pull-requests" | "discussions" | "wiki",
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    started_at: string,
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    completed_at: string,
  /** List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updates */
    secret_types?: (any)[] | null,
  /** If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updated */
    custom_pattern_name?: string | null,
  /** If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updated */
    custom_pattern_scope?: "repository" | "organization" | "enterprise",
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** security_advisory published event */
  export interface WebhookSecurityAdvisoryPublished {
    action: "published",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** The details of the security advisory, including summary, description, and severity. */
    security_advisory: WebhooksSecurityAdvisory,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** security_advisory updated event */
  export interface WebhookSecurityAdvisoryUpdated {
    action: "updated",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** The details of the security advisory, including summary, description, and severity. */
    security_advisory: WebhooksSecurityAdvisory,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** security_advisory withdrawn event */
  export interface WebhookSecurityAdvisoryWithdrawn {
    action: "withdrawn",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** The details of the security advisory, including summary, description, and severity. */
    security_advisory: {
    cvss: {
    score: number,
    vector_string: string | null,

},
    cvss_severities?: CvssSeverities,
    cwes: ({
    cwe_id: string,
    name: string,

})[],
    description: string,
    ghsa_id: string,
    identifiers: ({
    type: string,
    value: string,

})[],
    published_at: string,
    references: ({
  /** @format uri */
    url: string,

})[],
    severity: string,
    summary: string,
    updated_at: string,
    vulnerabilities: ({
    first_patched_version: {
    identifier: string,

},
    package: {
    ecosystem: string,
    name: string,

},
    severity: string,
    vulnerable_version_range: string,

})[],
    withdrawn_at: string,

},
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** security_and_analysis event */
  export interface WebhookSecurityAndAnalysis {
    changes: {
    from?: {
    security_and_analysis?: SecurityAndAnalysis,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /** Full Repository */
    repository: FullRepository,
  /** A GitHub user. */
    sender?: SimpleUser,
}

  /** sponsorship cancelled event */
  export interface WebhookSponsorshipCancelled {
    action: "cancelled",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
    sponsorship: WebhooksSponsorship,
}

  /** sponsorship created event */
  export interface WebhookSponsorshipCreated {
    action: "created",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
    sponsorship: WebhooksSponsorship,
}

  /** sponsorship edited event */
  export interface WebhookSponsorshipEdited {
    action: "edited",
    changes: {
    privacy_level?: {
  /** The `edited` event types include the details about the change when someone edits a sponsorship to change the privacy. */
    from: string,

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
    sponsorship: WebhooksSponsorship,
}

  /** sponsorship pending_cancellation event */
  export interface WebhookSponsorshipPendingCancellation {
    action: "pending_cancellation",
  /** The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect. */
    effective_date?: WebhooksEffectiveDate,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
    sponsorship: WebhooksSponsorship,
}

  /** sponsorship pending_tier_change event */
  export interface WebhookSponsorshipPendingTierChange {
    action: "pending_tier_change",
    changes: WebhooksChanges8,
  /** The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect. */
    effective_date?: WebhooksEffectiveDate,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
    sponsorship: WebhooksSponsorship,
}

  /** sponsorship tier_changed event */
  export interface WebhookSponsorshipTierChanged {
    action: "tier_changed",
    changes: WebhooksChanges8,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
    sponsorship: WebhooksSponsorship,
}

  /** star created event */
  export interface WebhookStarCreated {
    action: "created",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
  /** The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action. */
    starred_at: string | null,
}

  /** star deleted event */
  export interface WebhookStarDeleted {
    action: "deleted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
  /** The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action. */
    starred_at: null,
}

  /** status event */
  export interface WebhookStatus {
  /** @format uri */
    avatar_url?: string | null,
  /** An array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches. */
    branches: ({
    commit: {
    sha: string | null,
  /** @format uri */
    url: string | null,

},
    name: string,
    protected: boolean,

})[],
    commit: {
  /** User */
    author: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id?: number,
    login?: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

},
  /** @format uri */
    comments_url: string,
    commit: {
  /** Metaproperties for Git author/committer information. */
    author: ({
  /** @format date-time */
    date?: string,
  /** @format email */
    email: string | null,
  /** The git author's name. */
    name: string,
    username?: string,

} & {
    date: string,
    email?: string,
    name?: string,

}),
    comment_count: number,
  /** Metaproperties for Git author/committer information. */
    committer: ({
  /** @format date-time */
    date?: string,
  /** @format email */
    email: string | null,
  /** The git author's name. */
    name: string,
    username?: string,

} & {
    date: string,
    email?: string,
    name?: string,

}),
    message: string,
    tree: {
    sha: string,
  /** @format uri */
    url: string,

},
  /** @format uri */
    url: string,
    verification: {
    payload: string | null,
    reason: "expired_key" | "not_signing_key" | "gpgverify_error" | "gpgverify_unavailable" | "unsigned" | "unknown_signature_type" | "no_user" | "unverified_email" | "bad_email" | "unknown_key" | "malformed_signature" | "invalid" | "valid" | "bad_cert" | "ocsp_pending",
    signature: string | null,
    verified: boolean,
    verified_at: string | null,

},

},
  /** User */
    committer: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id?: number,
    login?: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

},
  /** @format uri */
    html_url: string,
    node_id: string,
    parents: ({
  /** @format uri */
    html_url: string,
    sha: string,
  /** @format uri */
    url: string,

})[],
    sha: string,
  /** @format uri */
    url: string,

},
    context: string,
    created_at: string,
  /** The optional human-readable description added to the status. */
    description: string | null,
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /** The unique identifier of the status. */
    id: number,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
    name: string,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
  /** The Commit SHA. */
    sha: string,
  /** The new state. Can be `pending`, `success`, `failure`, or `error`. */
    state: "pending" | "success" | "failure" | "error",
  /** The optional link added to the status. */
    target_url: string | null,
    updated_at: string,
}

  /** team_add event */
  export interface WebhookTeamAdd {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
  /** Groups of organization members that gives permissions on specified repositories. */
    team: WebhooksTeam1,
}

  /** team added_to_repository event */
  export interface WebhookTeamAddedToRepository {
    action: "added_to_repository",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /**
   * Repository
   * A git repository
   */
    repository?: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string,any>,
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,

},
  /** A GitHub user. */
    sender?: SimpleUser,
  /** Groups of organization members that gives permissions on specified repositories. */
    team: WebhooksTeam1,
}

  /** team created event */
  export interface WebhookTeamCreated {
    action: "created",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /**
   * Repository
   * A git repository
   */
    repository?: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string,any>,
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,

},
  /** A GitHub user. */
    sender: SimpleUser,
  /** Groups of organization members that gives permissions on specified repositories. */
    team: WebhooksTeam1,
}

  /** team deleted event */
  export interface WebhookTeamDeleted {
    action: "deleted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /**
   * Repository
   * A git repository
   */
    repository?: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string,any>,
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,

},
  /** A GitHub user. */
    sender?: SimpleUser,
  /** Groups of organization members that gives permissions on specified repositories. */
    team: WebhooksTeam1,
}

  /** team edited event */
  export interface WebhookTeamEdited {
    action: "edited",
  /** The changes to the team if the action was `edited`. */
    changes: {
    description?: {
  /** The previous version of the description if the action was `edited`. */
    from: string,

},
    name?: {
  /** The previous version of the name if the action was `edited`. */
    from: string,

},
    privacy?: {
  /** The previous version of the team's privacy if the action was `edited`. */
    from: string,

},
    notification_setting?: {
  /** The previous version of the team's notification setting if the action was `edited`. */
    from: string,

},
    repository?: {
    permissions: {
    from: {
  /** The previous version of the team member's `admin` permission on a repository, if the action was `edited`. */
    admin?: boolean,
  /** The previous version of the team member's `pull` permission on a repository, if the action was `edited`. */
    pull?: boolean,
  /** The previous version of the team member's `push` permission on a repository, if the action was `edited`. */
    push?: boolean,

},

},

},

},
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /**
   * Repository
   * A git repository
   */
    repository?: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string,any>,
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,

},
  /** A GitHub user. */
    sender: SimpleUser,
  /** Groups of organization members that gives permissions on specified repositories. */
    team: WebhooksTeam1,
}

  /** team removed_from_repository event */
  export interface WebhookTeamRemovedFromRepository {
    action: "removed_from_repository",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization: OrganizationSimpleWebhooks,
  /**
   * Repository
   * A git repository
   */
    repository?: {
  /**
   * Whether to allow auto-merge for pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /** Whether to allow private forks */
    allow_forking?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
    allow_update_branch?: boolean,
  /** @format uri-template */
    archive_url: string,
  /**
   * Whether the repository is archived.
   * @default false
   */
    archived: boolean,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri */
    clone_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
    created_at: (number | string),
  /** The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string,any>,
  /** The default branch of the repository. */
    default_branch: string,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** Returns whether or not this repository is disabled. */
    disabled?: boolean,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
    forks: number,
    forks_count: number,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    git_url: string,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues: boolean,
    has_pages: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki: boolean,
    homepage: string | null,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /**
   * Unique identifier of the repository
   * @format int64
   */
    id: number,
    is_template?: boolean,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
    language: string | null,
  /** @format uri */
    languages_url: string,
  /** License */
    license: {
    key: string,
    name: string,
    node_id: string,
    spdx_id: string,
  /** @format uri */
    url: string | null,

},
    master_branch?: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** @format uri */
    mirror_url: string | null,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
    open_issues: number,
    open_issues_count: number,
    organization?: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
    permissions?: {
    admin: boolean,
    maintain?: boolean,
    pull: boolean,
    push: boolean,
    triage?: boolean,

},
  /** Whether the repository is private or public. */
    private: boolean,
    public?: boolean,
  /** @format uri-template */
    pulls_url: string,
    pushed_at: (number | string),
  /** @format uri-template */
    releases_url: string,
    role_name?: string | null,
    size: number,
    ssh_url: string,
    stargazers?: number,
    stargazers_count: number,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    svn_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
    topics: (string)[],
  /** @format uri-template */
    trees_url: string,
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    visibility: "public" | "private" | "internal",
    watchers: number,
    watchers_count: number,

},
  /** A GitHub user. */
    sender: SimpleUser,
  /** Groups of organization members that gives permissions on specified repositories. */
    team: WebhooksTeam1,
}

    export interface WebhookUserCreated {
    action: "created",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
    user?: WebhooksUser,
}

    export interface WebhookUserDeleted {
    action: "deleted",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository?: RepositoryWebhooks,
  /** A GitHub user. */
    sender?: SimpleUser,
    user?: WebhooksUser,
}

  /** watch started event */
  export interface WebhookWatchStarted {
    action: "started",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
}

  /** workflow_dispatch event */
  export interface WebhookWorkflowDispatch {
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
    inputs: object | null,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
    ref: string,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
    workflow: string,
}

  /** workflow_job completed event */
  export interface WebhookWorkflowJobCompleted {
    action: "completed",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
  /** The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object. */
    workflow_job: ({
  /** @format uri */
    check_run_url: string,
    completed_at: string | null,
    conclusion: "success" | "failure" | "skipped" | "cancelled" | "action_required" | "neutral" | "timed_out",
  /** The time that the job created. */
    created_at: string,
    head_sha: string,
  /** @format uri */
    html_url: string,
    id: number,
  /** Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/enterprise-server@3.17/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML. */
    labels: (string)[],
    name: string,
    node_id: string,
    run_attempt: number,
    run_id: number,
  /** @format uri */
    run_url: string,
  /** The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_group_id: number | null,
  /** The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_group_name: string | null,
  /** The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_id: number | null,
  /** The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_name: string | null,
    started_at: string,
  /** The current status of the job. Can be `queued`, `in_progress`, `waiting`, or `completed`. */
    status: "queued" | "in_progress" | "completed" | "waiting",
  /** The name of the current branch. */
    head_branch: string | null,
  /** The name of the workflow. */
    workflow_name: string | null,
    steps: ({
    completed_at: string | null,
    conclusion: "failure" | "skipped" | "success" | "cancelled",
    name: string,
    number: number,
    started_at: string | null,
    status: "in_progress" | "completed" | "queued",

})[],
  /** @format uri */
    url: string,

} & {
    check_run_url?: string,
    completed_at?: string,
    conclusion: "success" | "failure" | "skipped" | "cancelled" | "action_required" | "neutral" | "timed_out",
  /** The time that the job created. */
    created_at?: string,
    head_sha?: string,
    html_url?: string,
    id?: number,
    labels?: (string | null)[],
    name?: string,
    node_id?: string,
    run_attempt?: number,
    run_id?: number,
    run_url?: string,
    runner_group_id?: number | null,
    runner_group_name?: string | null,
    runner_id?: number | null,
    runner_name?: string | null,
    started_at?: string,
    status?: string,
  /** The name of the current branch. */
    head_branch?: string | null,
  /** The name of the workflow. */
    workflow_name?: string | null,
    steps?: (object | null)[],
    url?: string,

}),
  /** A request for a specific ref(branch,sha,tag) to be deployed */
    deployment?: Deployment,
}

  /** workflow_job in_progress event */
  export interface WebhookWorkflowJobInProgress {
    action: "in_progress",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
  /** The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object. */
    workflow_job: ({
  /** @format uri */
    check_run_url: string,
    completed_at: string | null,
    conclusion: "success" | "failure" | "cancelled" | "neutral",
  /** The time that the job created. */
    created_at: string,
    head_sha: string,
  /** @format uri */
    html_url: string,
    id: number,
  /** Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/enterprise-server@3.17/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML. */
    labels: (string)[],
    name: string,
    node_id: string,
    run_attempt: number,
    run_id: number,
  /** @format uri */
    run_url: string,
  /** The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_group_id: number | null,
  /** The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_group_name: string | null,
  /** The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_id: number | null,
  /** The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`. */
    runner_name: string | null,
    started_at: string,
  /** The current status of the job. Can be `queued`, `in_progress`, or `completed`. */
    status: "queued" | "in_progress" | "completed",
  /** The name of the current branch. */
    head_branch: string | null,
  /** The name of the workflow. */
    workflow_name: string | null,
    steps: ({
    completed_at: string | null,
    conclusion: "failure" | "skipped" | "success" | "cancelled",
    name: string,
    number: number,
    started_at: string | null,
    status: "in_progress" | "completed" | "queued" | "pending",

})[],
  /** @format uri */
    url: string,

} & {
    check_run_url?: string,
    completed_at?: string | null,
    conclusion?: string | null,
  /** The time that the job created. */
    created_at?: string,
    head_sha?: string,
    html_url?: string,
    id?: number,
    labels?: (string)[],
    name?: string,
    node_id?: string,
    run_attempt?: number,
    run_id?: number,
    run_url?: string,
    runner_group_id?: number | null,
    runner_group_name?: string | null,
    runner_id?: number | null,
    runner_name?: string | null,
    started_at?: string,
    status: "in_progress" | "completed" | "queued",
  /** The name of the current branch. */
    head_branch?: string | null,
  /** The name of the workflow. */
    workflow_name?: string | null,
    steps: ({
    completed_at: string | null,
    conclusion: string | null,
    name: string,
    number: number,
    started_at: string | null,
    status: "in_progress" | "completed" | "pending" | "queued",

})[],
    url?: string,

}),
  /** A request for a specific ref(branch,sha,tag) to be deployed */
    deployment?: Deployment,
}

  /** workflow_job queued event */
  export interface WebhookWorkflowJobQueued {
    action: "queued",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
    workflow_job: {
  /** @format uri */
    check_run_url: string,
    completed_at: string | null,
    conclusion: string | null,
  /** The time that the job created. */
    created_at: string,
    head_sha: string,
  /** @format uri */
    html_url: string,
    id: number,
    labels: (string)[],
    name: string,
    node_id: string,
    run_attempt: number,
    run_id: number,
  /** @format uri */
    run_url: string,
    runner_group_id: number | null,
    runner_group_name: string | null,
    runner_id: number | null,
    runner_name: string | null,
  /** @format date-time */
    started_at: string,
    status: "queued" | "in_progress" | "completed" | "waiting",
  /** The name of the current branch. */
    head_branch: string | null,
  /** The name of the workflow. */
    workflow_name: string | null,
    steps: ({
    completed_at: string | null,
    conclusion: "failure" | "skipped" | "success" | "cancelled",
    name: string,
    number: number,
    started_at: string | null,
    status: "completed" | "in_progress" | "queued" | "pending",

})[],
  /** @format uri */
    url: string,

},
  /** A request for a specific ref(branch,sha,tag) to be deployed */
    deployment?: Deployment,
}

  /** workflow_job waiting event */
  export interface WebhookWorkflowJobWaiting {
    action: "waiting",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
    workflow_job: {
  /** @format uri */
    check_run_url: string,
    completed_at: string | null,
    conclusion: string | null,
  /** The time that the job created. */
    created_at: string,
    head_sha: string,
  /** @format uri */
    html_url: string,
    id: number,
    labels: (string)[],
    name: string,
    node_id: string,
    run_attempt: number,
    run_id: number,
  /** @format uri */
    run_url: string,
    runner_group_id: number | null,
    runner_group_name: string | null,
    runner_id: number | null,
    runner_name: string | null,
  /** @format date-time */
    started_at: string,
  /** The name of the current branch. */
    head_branch: string | null,
  /** The name of the workflow. */
    workflow_name: string | null,
    status: "queued" | "in_progress" | "completed" | "waiting",
    steps: ({
    completed_at: string | null,
    conclusion: "failure" | "skipped" | "success" | "cancelled",
    name: string,
    number: number,
    started_at: string | null,
    status: "completed" | "in_progress" | "queued" | "pending" | "waiting",

})[],
  /** @format uri */
    url: string,

},
  /** A request for a specific ref(branch,sha,tag) to be deployed */
    deployment?: Deployment,
}

  /** workflow_run completed event */
  export interface WebhookWorkflowRunCompleted {
    action: "completed",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
    workflow: WebhooksWorkflow,
  /** Workflow Run */
    workflow_run: {
  /** User */
    actor: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** @format uri */
    artifacts_url: string,
  /** @format uri */
    cancel_url: string,
    check_suite_id: number,
    check_suite_node_id: string,
  /** @format uri */
    check_suite_url: string,
    conclusion: "action_required" | "cancelled" | "failure" | "neutral" | "skipped" | "stale" | "success" | "timed_out" | "startup_failure",
  /** @format date-time */
    created_at: string,
    event: string,
    head_branch: string | null,
  /** SimpleCommit */
    head_commit: {
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
    author: {
  /** @format date-time */
    date?: string,
  /** @format email */
    email: string | null,
  /** The git author's name. */
    name: string,
    username?: string,

},
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
    committer: {
  /** @format date-time */
    date?: string,
  /** @format email */
    email: string | null,
  /** The git author's name. */
    name: string,
    username?: string,

},
    id: string,
    message: string,
    timestamp: string,
    tree_id: string,

},
  /** Repository Lite */
    head_repository: {
  /** @format uri-template */
    archive_url: string,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the repository */
    id: number,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
  /** @format uri */
    languages_url: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** Whether the repository is private or public. */
    private: boolean,
  /** @format uri-template */
    pulls_url: string,
  /** @format uri-template */
    releases_url: string,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
  /** @format uri-template */
    trees_url: string,
  /** @format uri */
    url: string,

},
    head_sha: string,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    jobs_url: string,
  /** @format uri */
    logs_url: string,
    name: string | null,
    node_id: string,
    path: string,
  /** @format uri */
    previous_attempt_url: string | null,
    pull_requests: ({
    base: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    head: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    id: number,
    number: number,
  /** @format uri */
    url: string,

})[],
    referenced_workflows?: (any)[] | null,
  /** Repository Lite */
    repository: {
  /** @format uri-template */
    archive_url: string,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the repository */
    id: number,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
  /** @format uri */
    languages_url: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** Whether the repository is private or public. */
    private: boolean,
  /** @format uri-template */
    pulls_url: string,
  /** @format uri-template */
    releases_url: string,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
  /** @format uri-template */
    trees_url: string,
  /** @format uri */
    url: string,

},
  /** @format uri */
    rerun_url: string,
    run_attempt: number,
    run_number: number,
  /** @format date-time */
    run_started_at: string,
    status: "requested" | "in_progress" | "completed" | "queued" | "pending" | "waiting",
  /** User */
    triggering_actor: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    workflow_id: number,
  /** @format uri */
    workflow_url: string,
  /** The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow. */
    display_title?: string,

},
}

  /** workflow_run in_progress event */
  export interface WebhookWorkflowRunInProgress {
    action: "in_progress",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
    workflow: WebhooksWorkflow,
  /** Workflow Run */
    workflow_run: {
  /** User */
    actor: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

},
  /** @format uri */
    artifacts_url: string,
  /** @format uri */
    cancel_url: string,
    check_suite_id: number,
    check_suite_node_id: string,
  /** @format uri */
    check_suite_url: string,
    conclusion: "action_required" | "cancelled" | "failure" | "neutral" | "skipped" | "stale" | "success" | "timed_out",
  /** @format date-time */
    created_at: string,
    event: string,
    head_branch: string | null,
  /** SimpleCommit */
    head_commit: {
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
    author: {
  /** @format date-time */
    date?: string,
  /** @format email */
    email: string | null,
  /** The git author's name. */
    name: string,
    username?: string,

},
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
    committer: {
  /** @format date-time */
    date?: string,
  /** @format email */
    email: string | null,
  /** The git author's name. */
    name: string,
    username?: string,

},
    id: string,
    message: string,
    timestamp: string,
    tree_id: string,

},
  /** Repository Lite */
    head_repository: {
  /** @format uri-template */
    archive_url: string,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the repository */
    id: number,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
  /** @format uri */
    languages_url: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** The name of the repository. */
    name: string | null,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

},
  /** Whether the repository is private or public. */
    private: boolean,
  /** @format uri-template */
    pulls_url: string,
  /** @format uri-template */
    releases_url: string,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
  /** @format uri-template */
    trees_url: string,
  /** @format uri */
    url: string,

},
    head_sha: string,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    jobs_url: string,
  /** @format uri */
    logs_url: string,
    name: string | null,
    node_id: string,
    path: string,
  /** @format uri */
    previous_attempt_url: string | null,
    pull_requests: ({
    base: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    head: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    id: number,
    number: number,
  /** @format uri */
    url: string,

})[],
    referenced_workflows?: (any)[] | null,
  /** Repository Lite */
    repository: {
  /** @format uri-template */
    archive_url: string,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the repository */
    id: number,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
  /** @format uri */
    languages_url: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

},
  /** Whether the repository is private or public. */
    private: boolean,
  /** @format uri-template */
    pulls_url: string,
  /** @format uri-template */
    releases_url: string,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
  /** @format uri-template */
    trees_url: string,
  /** @format uri */
    url: string,

},
  /** @format uri */
    rerun_url: string,
    run_attempt: number,
    run_number: number,
  /** @format date-time */
    run_started_at: string,
    status: "requested" | "in_progress" | "completed" | "queued" | "pending",
  /** User */
    triggering_actor: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,

},
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    workflow_id: number,
  /** @format uri */
    workflow_url: string,

},
}

  /** workflow_run requested event */
  export interface WebhookWorkflowRunRequested {
    action: "requested",
  /**
   * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
   * on an enterprise account or an organization that's part of an enterprise account. For more information,
   * see "[About enterprise accounts](https://docs.github.com/enterprise-server@3.17/admin/overview/about-enterprise-accounts)."
   */
    enterprise?: EnterpriseWebhooks,
  /**
   * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
   * for and sent to a GitHub App. For more information,
   * see "[Using webhooks with GitHub Apps](https://docs.github.com/enterprise-server@3.17/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
   */
    installation?: SimpleInstallation,
  /**
   * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
   * organization, or when the event occurs from activity in a repository owned by an organization.
   */
    organization?: OrganizationSimpleWebhooks,
  /**
   * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
   * when the event occurs from activity in a repository.
   */
    repository: RepositoryWebhooks,
  /** A GitHub user. */
    sender: SimpleUser,
    workflow: WebhooksWorkflow,
  /** Workflow Run */
    workflow_run: {
  /** User */
    actor: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** @format uri */
    artifacts_url: string,
  /** @format uri */
    cancel_url: string,
    check_suite_id: number,
    check_suite_node_id: string,
  /** @format uri */
    check_suite_url: string,
    conclusion: "success" | "failure" | "neutral" | "cancelled" | "timed_out" | "action_required" | "stale" | "skipped" | "startup_failure",
  /** @format date-time */
    created_at: string,
    event: string,
    head_branch: string | null,
  /** SimpleCommit */
    head_commit: {
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
    author: {
  /** @format date-time */
    date?: string,
  /** @format email */
    email: string | null,
  /** The git author's name. */
    name: string,
    username?: string,

},
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
    committer: {
  /** @format date-time */
    date?: string,
  /** @format email */
    email: string | null,
  /** The git author's name. */
    name: string,
    username?: string,

},
    id: string,
    message: string,
    timestamp: string,
    tree_id: string,

},
  /** Repository Lite */
    head_repository: {
  /** @format uri-template */
    archive_url: string,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the repository */
    id: number,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
  /** @format uri */
    languages_url: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** Whether the repository is private or public. */
    private: boolean,
  /** @format uri-template */
    pulls_url: string,
  /** @format uri-template */
    releases_url: string,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
  /** @format uri-template */
    trees_url: string,
  /** @format uri */
    url: string,

},
    head_sha: string,
  /** @format uri */
    html_url: string,
    id: number,
  /** @format uri */
    jobs_url: string,
  /** @format uri */
    logs_url: string,
    name: string | null,
    node_id: string,
    path: string,
  /** @format uri */
    previous_attempt_url: string | null,
    pull_requests: ({
    base: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    head: {
    ref: string,
  /** Repo Ref */
    repo: {
    id: number,
    name: string,
  /** @format uri */
    url: string,

},
    sha: string,

},
    id: number,
    number: number,
  /** @format uri */
    url: string,

})[],
    referenced_workflows?: (any)[] | null,
  /** Repository Lite */
    repository: {
  /** @format uri-template */
    archive_url: string,
  /** @format uri-template */
    assignees_url: string,
  /** @format uri-template */
    blobs_url: string,
  /** @format uri-template */
    branches_url: string,
  /** @format uri-template */
    collaborators_url: string,
  /** @format uri-template */
    comments_url: string,
  /** @format uri-template */
    commits_url: string,
  /** @format uri-template */
    compare_url: string,
  /** @format uri-template */
    contents_url: string,
  /** @format uri */
    contributors_url: string,
  /** @format uri */
    deployments_url: string,
    description: string | null,
  /** @format uri */
    downloads_url: string,
  /** @format uri */
    events_url: string,
    fork: boolean,
  /** @format uri */
    forks_url: string,
    full_name: string,
  /** @format uri-template */
    git_commits_url: string,
  /** @format uri-template */
    git_refs_url: string,
  /** @format uri-template */
    git_tags_url: string,
  /** @format uri */
    hooks_url: string,
  /** @format uri */
    html_url: string,
  /** Unique identifier of the repository */
    id: number,
  /** @format uri-template */
    issue_comment_url: string,
  /** @format uri-template */
    issue_events_url: string,
  /** @format uri-template */
    issues_url: string,
  /** @format uri-template */
    keys_url: string,
  /** @format uri-template */
    labels_url: string,
  /** @format uri */
    languages_url: string,
  /** @format uri */
    merges_url: string,
  /** @format uri-template */
    milestones_url: string,
  /** The name of the repository. */
    name: string,
    node_id: string,
  /** @format uri-template */
    notifications_url: string,
  /** User */
    owner: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** Whether the repository is private or public. */
    private: boolean,
  /** @format uri-template */
    pulls_url: string,
  /** @format uri-template */
    releases_url: string,
  /** @format uri */
    stargazers_url: string,
  /** @format uri-template */
    statuses_url: string,
  /** @format uri */
    subscribers_url: string,
  /** @format uri */
    subscription_url: string,
  /** @format uri */
    tags_url: string,
  /** @format uri */
    teams_url: string,
  /** @format uri-template */
    trees_url: string,
  /** @format uri */
    url: string,

},
  /** @format uri */
    rerun_url: string,
    run_attempt: number,
    run_number: number,
  /** @format date-time */
    run_started_at: string,
    status: "requested" | "in_progress" | "completed" | "queued" | "pending" | "waiting",
  /** User */
    triggering_actor: {
  /** @format uri */
    avatar_url?: string,
    deleted?: boolean,
    email?: string | null,
  /** @format uri-template */
    events_url?: string,
  /** @format uri */
    followers_url?: string,
  /** @format uri-template */
    following_url?: string,
  /** @format uri-template */
    gists_url?: string,
    gravatar_id?: string,
  /** @format uri */
    html_url?: string,
    id: number,
    login: string,
    name?: string,
    node_id?: string,
  /** @format uri */
    organizations_url?: string,
  /** @format uri */
    received_events_url?: string,
  /** @format uri */
    repos_url?: string,
    site_admin?: boolean,
  /** @format uri-template */
    starred_url?: string,
  /** @format uri */
    subscriptions_url?: string,
    type?: "Bot" | "User" | "Organization",
  /** @format uri */
    url?: string,
    user_view_type?: string,

},
  /** @format date-time */
    updated_at: string,
  /** @format uri */
    url: string,
    workflow_id: number,
  /** @format uri */
    workflow_url: string,
    display_title: string,

},
}

    export type MetaRootData = Root

    export interface EnterpriseAdminListGlobalWebhooksParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type EnterpriseAdminListGlobalWebhooksData = (GlobalHook)[]

    export interface EnterpriseAdminCreateGlobalWebhookPayload {
  /** Must be passed as "web". */
    name: string,
  /** Key/value pairs to provide settings for this webhook. */
    config: {
  /** The URL to which the payloads will be delivered. */
    url: string,
  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
    content_type?: string,
  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.17/webhooks/event-payloads/#delivery-headers) header. */
    secret?: string,
  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
    insecure_ssl?: string,

},
  /** The [events](https://docs.github.com/enterprise-server@3.17/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`. */
    events?: (string)[],
  /**
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   * @default true
   */
    active?: boolean,
}

    export type EnterpriseAdminCreateGlobalWebhookData = GlobalHook

    export type EnterpriseAdminGetGlobalWebhookData = GlobalHook

    export interface EnterpriseAdminUpdateGlobalWebhookPayload {
  /** Key/value pairs to provide settings for this webhook. */
    config?: {
  /** The URL to which the payloads will be delivered. */
    url: string,
  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
    content_type?: string,
  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.17/webhooks/event-payloads/#delivery-headers) header. */
    secret?: string,
  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
    insecure_ssl?: string,

},
  /** The [events](https://docs.github.com/enterprise-server@3.17/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`. */
    events?: (string)[],
  /**
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   * @default true
   */
    active?: boolean,
}

    export type EnterpriseAdminUpdateGlobalWebhookData = GlobalHook2

    export type EnterpriseAdminDeleteGlobalWebhookData = any

    export type EnterpriseAdminPingGlobalWebhookData = any

    export interface EnterpriseAdminListPublicKeysParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /** @default "created" */
    sort?: "created" | "updated" | "accessed",
  /** Only show public keys accessed after the given time. */
    since?: string,
}

    export type EnterpriseAdminListPublicKeysData = (PublicKeyFull)[]

    export type EnterpriseAdminDeletePublicKeyData = any

    export interface EnterpriseAdminUpdateLdapMappingForTeamPayload {
  /** The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. */
    ldap_dn: string,
}

    export type EnterpriseAdminUpdateLdapMappingForTeamData = LdapMappingTeam

    export interface EnterpriseAdminSyncLdapMappingForTeamData {
    status?: string,
}

    export interface EnterpriseAdminUpdateLdapMappingForUserPayload {
  /** The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. */
    ldap_dn: string,
}

    export type EnterpriseAdminUpdateLdapMappingForUserData = LdapMappingUser

    export interface EnterpriseAdminSyncLdapMappingForUserData {
    status?: string,
}

    export interface EnterpriseAdminCreateOrgPayload {
  /** The organization's username. */
    login: string,
  /** The login of the user who will manage this organization. */
    admin: string,
  /** The organization's display name. */
    profile_name?: string,
}

    export type EnterpriseAdminCreateOrgData = OrganizationSimple

    export interface EnterpriseAdminUpdateOrgNamePayload {
  /** The organization's new name. */
    login: string,
}

    export interface EnterpriseAdminUpdateOrgNameData {
    message?: string,
    url?: string,
}

    export interface EnterpriseAdminListPreReceiveEnvironmentsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /** @default "created" */
    sort?: "created" | "updated" | "name",
}

    export type EnterpriseAdminListPreReceiveEnvironmentsData = (PreReceiveEnvironment)[]

    export interface EnterpriseAdminCreatePreReceiveEnvironmentPayload {
  /** The new pre-receive environment's name. */
    name: string,
  /** URL from which to download a tarball of this environment. */
    image_url: string,
}

    export type EnterpriseAdminCreatePreReceiveEnvironmentData = PreReceiveEnvironment

    export type EnterpriseAdminGetPreReceiveEnvironmentData = PreReceiveEnvironment

    export interface EnterpriseAdminUpdatePreReceiveEnvironmentPayload {
  /** This pre-receive environment's new name. */
    name?: string,
  /** URL from which to download a tarball of this environment. */
    image_url?: string,
}

    export type EnterpriseAdminUpdatePreReceiveEnvironmentData = PreReceiveEnvironment

    export type EnterpriseAdminUpdatePreReceiveEnvironmentError = ({
    message?: string,
    errors?: ({
    resource?: string,
    code?: string,
    message?: string,

})[],

})

    export type EnterpriseAdminDeletePreReceiveEnvironmentData = any

    export type EnterpriseAdminDeletePreReceiveEnvironmentError = ({
    message?: string,
    errors?: ({
    resource?: string,
    code?: string,
    message?: string,

})[],

})

    export type EnterpriseAdminStartPreReceiveEnvironmentDownloadData = PreReceiveEnvironmentDownloadStatus

    export type EnterpriseAdminStartPreReceiveEnvironmentDownloadError = ({
    message?: string,
    errors?: ({
    resource?: string,
    code?: string,
    message?: string,

})[],

})

    export type EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentData = PreReceiveEnvironmentDownloadStatus

    export interface EnterpriseAdminListPreReceiveHooksParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * The property to sort the results by.
   * @default "created"
   */
    sort?: "created" | "updated" | "name",
}

    export type EnterpriseAdminListPreReceiveHooksData = (PreReceiveHook)[]

    export interface EnterpriseAdminCreatePreReceiveHookPayload {
  /** The name of the hook. */
    name: string,
  /** The script that the hook runs. */
    script: string,
  /** The GitHub repository where the script is kept. */
    script_repository: Record<string,any>,
  /** The pre-receive environment where the script is executed. */
    environment: Record<string,any>,
  /** The state of enforcement for this hook. default: `disabled` */
    enforcement?: string,
  /** Whether enforcement can be overridden at the org or repo level. default: `false` */
    allow_downstream_configuration?: boolean,
}

    export type EnterpriseAdminCreatePreReceiveHookData = PreReceiveHook

    export type EnterpriseAdminGetPreReceiveHookData = PreReceiveHook

    export interface EnterpriseAdminUpdatePreReceiveHookPayload {
  /** The name of the hook. */
    name?: string,
  /** The script that the hook runs. */
    script?: string,
  /** The GitHub repository where the script is kept. */
    script_repository?: Record<string,any>,
  /** The pre-receive environment where the script is executed. */
    environment?: Record<string,any>,
  /** The state of enforcement for this hook. */
    enforcement?: string,
  /** Whether enforcement can be overridden at the org or repo level. */
    allow_downstream_configuration?: boolean,
}

    export type EnterpriseAdminUpdatePreReceiveHookData = PreReceiveHook

    export type EnterpriseAdminDeletePreReceiveHookData = any

    export interface EnterpriseAdminListPersonalAccessTokensParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type EnterpriseAdminListPersonalAccessTokensData = (Authorization)[]

    export type EnterpriseAdminDeletePersonalAccessTokenData = any

    export interface EnterpriseAdminCreateUserPayload {
  /** The user's username. */
    login: string,
  /**
   * **Required for built-in authentication.** The user's email
   * address. This parameter can be omitted when using CAS, LDAP, or SAML.
   * For more information, see "[About authentication for your enterprise](https://docs.github.com/enterprise-server@3.17/admin/identity-and-access-management/managing-iam-for-your-enterprise/about-authentication-for-your-enterprise)."
   */
    email?: string,
  /**
   * Whether to set the user as suspended when the user is created.
   * @default false
   */
    suspended?: boolean,
}

    export type EnterpriseAdminCreateUserData = SimpleUser

    export interface EnterpriseAdminUpdateUsernameForUserPayload {
  /** The user's new username. */
    login: string,
}

    export interface EnterpriseAdminUpdateUsernameForUserData {
    message?: string,
    url?: string,
}

    export type EnterpriseAdminDeleteUserData = any

    export interface EnterpriseAdminCreateImpersonationOAuthTokenPayload {
  /** A list of [scopes](https://docs.github.com/enterprise-server@3.17/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    scopes: (string)[],
}

    export type EnterpriseAdminCreateImpersonationOAuthTokenData = Authorization

    export type EnterpriseAdminDeleteImpersonationOAuthTokenData = any

    export interface SecurityAdvisoriesListGlobalAdvisoriesParams {
  /** If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned. */
    ghsa_id?: string,
  /**
   * If specified, only advisories of this type will be returned. By default, a request with no other parameters defined will only return reviewed advisories that are not malware.
   * @default "reviewed"
   */
    type?: "reviewed" | "malware" | "unreviewed",
  /** If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned. */
    cve_id?: string,
  /** If specified, only advisories for these ecosystems will be returned. */
    ecosystem?: SecurityAdvisoryEcosystems,
  /** If specified, only advisories with these severities will be returned. */
    severity?: "unknown" | "low" | "medium" | "high" | "critical",
  /**
   * If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned.
   * 
   * Example: `cwes=79,284,22` or `cwes[]=79&cwes[]=284&cwes[]=22`
   */
    cwes?: (string | (string)[]),
  /** Whether to only return advisories that have been withdrawn. */
    is_withdrawn?: boolean,
  /**
   * If specified, only return advisories that affect any of `package` or `package@version`. A maximum of 1000 packages can be specified.
   * If the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages.
   * 
   * Example: `affects=package1,package2@1.0.0,package3@^2.0.0` or `affects[]=package1&affects[]=package2@1.0.0`
   */
    affects?: (string | (string)[]),
  /**
   * If specified, only return advisories that were published on a date or date range.
   * 
   * For more information on the syntax of the date range, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.17/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
   */
    published?: string,
  /**
   * If specified, only return advisories that were updated on a date or date range.
   * 
   * For more information on the syntax of the date range, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.17/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
   */
    updated?: string,
  /**
   * If specified, only show advisories that were updated or published on a date or date range.
   * 
   * For more information on the syntax of the date range, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.17/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
   */
    modified?: string,
  /**
   * If specified, only return advisories that have an EPSS percentage score that matches the provided value.
   * The EPSS percentage represents the likelihood of a CVE being exploited.
   */
    epss_percentage?: string,
  /**
   * If specified, only return advisories that have an EPSS percentile score that matches the provided value.
   * The EPSS percentile represents the relative rank of the CVE's likelihood of being exploited compared to other CVEs.
   */
    epss_percentile?: string,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    before?: string,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    after?: string,
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @min 1
   * @max 100
   * @default 30
   */
    per_page?: number,
  /**
   * The property to sort the results by.
   * @default "published"
   */
    sort?: "updated" | "published" | "epss_percentage" | "epss_percentile",
}

    export type SecurityAdvisoriesListGlobalAdvisoriesData = (GlobalAdvisory)[]

    export type SecurityAdvisoriesListGlobalAdvisoriesError = (BasicError)

    export type SecurityAdvisoriesGetGlobalAdvisoryData = GlobalAdvisory

    export type AppsGetAuthenticatedData = Integration

    export type AppsCreateFromManifestData = (Integration & {
    client_id: string,
    client_secret: string,
    webhook_secret: string | null,
    pem: string,
    [key: string]: any,

})

    export type AppsGetWebhookConfigForAppData = WebhookConfig

    export interface AppsUpdateWebhookConfigForAppPayload {
  /** The URL to which the payloads will be delivered. */
    url?: WebhookConfigUrl,
  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
    content_type?: WebhookConfigContentType,
  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.17/webhooks/event-payloads/#delivery-headers). */
    secret?: WebhookConfigSecret,
  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
    insecure_ssl?: WebhookConfigInsecureSsl,
}

    export type AppsUpdateWebhookConfigForAppData = WebhookConfig

    export interface AppsListWebhookDeliveriesParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
    cursor?: string,
}

    export type AppsListWebhookDeliveriesData = (HookDeliveryItem)[]

    export type AppsGetWebhookDeliveryData = HookDelivery

    export interface AppsListInstallationRequestsForAuthenticatedAppParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type AppsListInstallationRequestsForAuthenticatedAppData = (IntegrationInstallationRequest)[]

    export interface AppsListInstallationsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    since?: string,
    outdated?: string,
}

    export type AppsListInstallationsData = (Installation)[]

    export type AppsGetInstallationData = Installation

    export type AppsDeleteInstallationData = any

    export interface AppsCreateInstallationAccessTokenPayload {
  /** List of repository names that the token should have access to */
    repositories?: (string)[],
  /** List of repository IDs that the token should have access to */
    repository_ids?: (number)[],
  /** The permissions granted to the user access token. */
    permissions?: AppPermissions,
}

    export type AppsCreateInstallationAccessTokenData = InstallationToken

    export type AppsSuspendInstallationData = any

    export type AppsUnsuspendInstallationData = any

    export interface OauthAuthorizationsListGrantsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The client ID of your GitHub app. */
    client_id?: string,
}

    export type OauthAuthorizationsListGrantsData = (ApplicationGrant)[]

    export type OauthAuthorizationsGetGrantData = ApplicationGrant

    export type OauthAuthorizationsDeleteGrantData = any

    export interface AppsDeleteAuthorizationPayload {
  /** The OAuth access token used to authenticate to the GitHub API. */
    access_token: string,
}

    export type AppsDeleteAuthorizationData = any

    export interface AppsCheckTokenPayload {
  /** The access_token of the OAuth or GitHub application. */
    access_token: string,
}

    export type AppsCheckTokenData = Authorization

    export interface AppsResetTokenPayload {
  /** The access_token of the OAuth or GitHub application. */
    access_token: string,
}

    export type AppsResetTokenData = Authorization

    export interface AppsDeleteTokenPayload {
  /** The OAuth access token used to authenticate to the GitHub API. */
    access_token: string,
}

    export type AppsDeleteTokenData = any

    export interface AppsScopeTokenPayload {
  /** The access token used to authenticate to the GitHub API. */
    access_token: string,
  /** The name of the user or organization to scope the user access token to. **Required** unless `target_id` is specified. */
    target?: string,
  /** The ID of the user or organization to scope the user access token to. **Required** unless `target` is specified. */
    target_id?: number,
  /** The list of repository names to scope the user access token to. `repositories` may not be specified if `repository_ids` is specified. */
    repositories?: (string)[],
  /** The list of repository IDs to scope the user access token to. `repository_ids` may not be specified if `repositories` is specified. */
    repository_ids?: (number)[],
  /** The permissions granted to the user access token. */
    permissions?: AppPermissions,
}

    export type AppsScopeTokenData = Authorization

    export type AppsGetBySlugData = Integration

    export interface OauthAuthorizationsListAuthorizationsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The client ID of your GitHub app. */
    client_id?: string,
}

    export type OauthAuthorizationsListAuthorizationsData = (Authorization)[]

    export interface OauthAuthorizationsCreateAuthorizationPayload {
  /** A list of scopes that this authorization is in. */
    scopes?: (any)[] | null,
  /** A note to remind you what the OAuth token is for. */
    note?: string,
  /** A URL to remind you what app the OAuth token is for. */
    note_url?: string,
  /**
   * The OAuth app client key for which to create the token.
   * @maxLength 20
   */
    client_id?: string,
  /**
   * The OAuth app client secret for which to create the token.
   * @maxLength 40
   */
    client_secret?: string,
  /** A unique string to distinguish an authorization from others created for the same client ID and user. */
    fingerprint?: string,
}

    export type OauthAuthorizationsCreateAuthorizationData = Authorization

    export interface OauthAuthorizationsGetOrCreateAuthorizationForAppPayload {
  /**
   * The OAuth app client secret for which to create the token.
   * @maxLength 40
   */
    client_secret: string,
  /** A list of scopes that this authorization is in. */
    scopes?: (any)[] | null,
  /** A note to remind you what the OAuth token is for. */
    note?: string,
  /** A URL to remind you what app the OAuth token is for. */
    note_url?: string,
  /** A unique string to distinguish an authorization from others created for the same client ID and user. */
    fingerprint?: string,
}

    export type OauthAuthorizationsGetOrCreateAuthorizationForAppData = Authorization

    export interface OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintPayload {
  /**
   * The OAuth app client secret for which to create the token.
   * @maxLength 40
   */
    client_secret: string,
  /** A list of scopes that this authorization is in. */
    scopes?: (any)[] | null,
  /** A note to remind you what the OAuth token is for. */
    note?: string,
  /** A URL to remind you what app the OAuth token is for. */
    note_url?: string,
}

    export type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintData = Authorization

    export type OauthAuthorizationsGetAuthorizationData = Authorization

    export interface OauthAuthorizationsUpdateAuthorizationPayload {
  /** A list of scopes that this authorization is in. */
    scopes?: (any)[] | null,
  /** A list of scopes to add to this authorization. */
    add_scopes?: (string)[],
  /** A list of scopes to remove from this authorization. */
    remove_scopes?: (string)[],
  /** A note to remind you what the OAuth token is for. */
    note?: string,
  /** A URL to remind you what app the OAuth token is for. */
    note_url?: string,
  /** A unique string to distinguish an authorization from others created for the same client ID and user. */
    fingerprint?: string,
}

    export type OauthAuthorizationsUpdateAuthorizationData = Authorization

    export type OauthAuthorizationsDeleteAuthorizationData = any

    export type CodesOfConductGetAllCodesOfConductData = (CodeOfConduct)[]

    export type CodesOfConductGetConductCodeData = CodeOfConduct

    export type EmojisGetData = Record<string,string>

    export type EnterpriseAdminGetAnnouncementData = Announcement

    export type EnterpriseAdminSetAnnouncementData = Announcement

    export type EnterpriseAdminRemoveAnnouncementData = any

    export type EnterpriseAdminGetLicenseInformationData = LicenseInfo

    export type EnterpriseAdminGetAllStatsData = EnterpriseOverview

    export type EnterpriseAdminGetCommentStatsData = EnterpriseCommentOverview

    export type EnterpriseAdminGetGistStatsData = EnterpriseGistOverview

    export type EnterpriseAdminGetHooksStatsData = EnterpriseHookOverview

    export type EnterpriseAdminGetIssueStatsData = EnterpriseIssueOverview

    export type EnterpriseAdminGetMilestoneStatsData = EnterpriseMilestoneOverview

    export type EnterpriseAdminGetOrgStatsData = EnterpriseOrganizationOverview

    export type EnterpriseAdminGetPagesStatsData = EnterprisePageOverview

    export type EnterpriseAdminGetPullRequestStatsData = EnterprisePullRequestOverview

    export type EnterpriseAdminGetRepoStatsData = EnterpriseRepositoryOverview

    export type EnterpriseAdminGetSecurityProductsData = EnterpriseSecurityProductsOverview

    export type EnterpriseAdminGetUserStatsData = EnterpriseUserOverview

    export type ActionsGetActionsCacheUsageForEnterpriseData = ActionsCacheUsageOrgEnterprise

    export type ActionsGetActionsCacheUsagePolicyForEnterpriseData = ActionsCacheUsagePolicyEnterprise

    export type ActionsSetActionsCacheUsagePolicyForEnterpriseData = any

    export type EnterpriseAdminGetGithubActionsPermissionsEnterpriseData = ActionsEnterprisePermissions

    export interface EnterpriseAdminSetGithubActionsPermissionsEnterprisePayload {
  /** The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. */
    enabled_organizations: EnabledOrganizations,
  /** The permissions policy that controls the actions that are allowed to run. */
    allowed_actions?: AllowedActions,
}

    export type EnterpriseAdminSetGithubActionsPermissionsEnterpriseData = any

    export interface EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
    enterprise: string,
}

    export interface EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseData {
    total_count: number,
    organizations: (OrganizationSimple)[],
}

    export interface EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprisePayload {
  /** List of organization IDs to enable for GitHub Actions. */
    selected_organization_ids: (number)[],
}

    export type EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseData = any

    export type EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseData = any

    export type EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseData = any

    export type EnterpriseAdminGetAllowedActionsEnterpriseData = SelectedActions

    export type EnterpriseAdminSetAllowedActionsEnterpriseData = any

    export type ActionsGetGithubActionsDefaultWorkflowPermissionsEnterpriseData = ActionsGetDefaultWorkflowPermissions

    export type ActionsSetGithubActionsDefaultWorkflowPermissionsEnterpriseData = any

    export interface EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** Only return runner groups that are allowed to be used by this organization. */
    visible_to_organization?: string,
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
    enterprise: string,
}

    export interface EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseData {
    total_count: number,
    runner_groups: (RunnerGroupsEnterprise)[],
}

    export interface EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprisePayload {
  /** Name of the runner group. */
    name: string,
  /** Visibility of a runner group. You can select all organizations or select individual organization. */
    visibility?: "selected" | "all",
  /** List of organization IDs that can access the runner group. */
    selected_organization_ids?: (number)[],
  /** List of runner IDs to add to the runner group. */
    runners?: (number)[],
  /**
   * Whether the runner group can be used by `public` repositories.
   * @default false
   */
    allows_public_repositories?: boolean,
  /**
   * If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
   * @default false
   */
    restricted_to_workflows?: boolean,
  /** List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
    selected_workflows?: (string)[],
}

    export type EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseData = RunnerGroupsEnterprise

    export type EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseData = RunnerGroupsEnterprise

    export interface EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprisePayload {
  /** Name of the runner group. */
    name?: string,
  /**
   * Visibility of a runner group. You can select all organizations or select individual organizations.
   * @default "all"
   */
    visibility?: "selected" | "all",
  /**
   * Whether the runner group can be used by `public` repositories.
   * @default false
   */
    allows_public_repositories?: boolean,
  /**
   * If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
   * @default false
   */
    restricted_to_workflows?: boolean,
  /** List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
    selected_workflows?: (string)[],
}

    export type EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseData = RunnerGroupsEnterprise

    export type EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseData = any

    export interface EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
    enterprise: string,
  /** Unique identifier of the self-hosted runner group. */
    runnerGroupId: number,
}

    export interface EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseData {
    total_count: number,
    organizations: (OrganizationSimple)[],
}

    export interface EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprisePayload {
  /** List of organization IDs that can access the runner group. */
    selected_organization_ids: (number)[],
}

    export type EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseData = any

    export type EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseData = any

    export type EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseData = any

    export interface EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
    enterprise: string,
  /** Unique identifier of the self-hosted runner group. */
    runnerGroupId: number,
}

    export interface EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseData {
    total_count: number,
    runners: (Runner)[],
}

    export interface EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprisePayload {
  /** List of runner IDs to add to the runner group. */
    runners: (number)[],
}

    export type EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseData = any

    export type EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseData = any

    export type EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseData = any

    export interface EnterpriseAdminListSelfHostedRunnersForEnterpriseParams {
  /** The name of a self-hosted runner. */
    name?: string,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
    enterprise: string,
}

    export interface EnterpriseAdminListSelfHostedRunnersForEnterpriseData {
    total_count?: number,
    runners?: (Runner)[],
}

    export type EnterpriseAdminListRunnerApplicationsForEnterpriseData = (RunnerApplication)[]

    export interface ActionsGenerateRunnerJitconfigForEnterprisePayload {
  /** The name of the new runner. */
    name: string,
  /** The ID of the runner group to register the runner to. */
    runner_group_id: number,
  /**
   * The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.
   * @maxItems 100
   * @minItems 1
   */
    labels: (string)[],
  /**
   * The working directory to be used for job execution, relative to the runner install directory.
   * @default "_work"
   */
    work_folder?: string,
}

    export type EnterpriseAdminCreateRegistrationTokenForEnterpriseData = AuthenticationToken

    export type EnterpriseAdminCreateRemoveTokenForEnterpriseData = AuthenticationToken

    export type EnterpriseAdminGetSelfHostedRunnerForEnterpriseData = Runner

    export type EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseData = any

    export interface EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprisePayload {
  /**
   * The names of the custom labels to add to the runner.
   * @maxItems 100
   * @minItems 1
   */
    labels: (string)[],
}

    export interface EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterprisePayload {
  /**
   * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
   * @maxItems 100
   * @minItems 0
   */
    labels: (string)[],
}

    export interface EnterpriseAdminGetAuditLogParams {
  /** A search phrase. For more information, see [Searching the audit log](https://docs.github.com/enterprise-server@3.17/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/searching-the-audit-log-for-your-enterprise#searching-the-audit-log). */
    phrase?: string,
  /**
   * The event types to include:
   * 
   * - `web` - returns web (non-Git) events.
   * - `git` - returns Git events.
   * - `all` - returns both web and Git events.
   * 
   * The default is `web`.
   */
    include?: "web" | "git" | "all",
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor. */
    after?: string,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. */
    before?: string,
  /**
   * The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.
   * 
   * The default is `desc`.
   */
    order?: "desc" | "asc",
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
    enterprise: string,
}

    export type EnterpriseAdminGetAuditLogData = (AuditLogEvent)[]

    export type EnterpriseAdminGetAuditLogStreamKeyData = AuditLogStreamKey

    export type EnterpriseAdminGetAuditLogStreamsData = GetAuditLogStreamConfigs

    export interface EnterpriseAdminCreateAuditLogStreamPayload {
  /** This setting pauses or resumes a stream. */
    enabled: boolean,
  /** The audit log streaming provider. The name is case sensitive. */
    stream_type: "Azure Blob Storage" | "Azure Event Hubs" | "Amazon S3" | "Splunk" | "HTTPS Event Collector" | "Google Cloud Storage" | "Datadog",
    vendor_specific: (AzureBlobConfig | AzureHubConfig | AmazonS3OidcConfig | AmazonS3AccessKeysConfig | SplunkConfig | HecConfig | GoogleCloudConfig | DatadogConfig),
}

    export type EnterpriseAdminCreateAuditLogStreamData = GetAuditLogStreamConfig

    export type EnterpriseAdminGetOneAuditLogStreamData = GetAuditLogStreamConfig

    export interface EnterpriseAdminUpdateAuditLogStreamPayload {
  /** This setting pauses or resumes a stream. */
    enabled: boolean,
  /** The audit log streaming provider. The name is case sensitive. */
    stream_type: "Azure Blob Storage" | "Azure Event Hubs" | "Amazon S3" | "Splunk" | "HTTPS Event Collector" | "Google Cloud Storage" | "Datadog",
    vendor_specific: (AzureBlobConfig | AzureHubConfig | AmazonS3OidcConfig | AmazonS3AccessKeysConfig | SplunkConfig | HecConfig | GoogleCloudConfig | DatadogConfig),
}

    export type EnterpriseAdminUpdateAuditLogStreamData = GetAuditLogStreamConfig

    export type EnterpriseAdminUpdateAuditLogStreamError = ({
    errors?: (string)[],

})

    export type EnterpriseAdminDeleteAuditLogStreamData = any

    export interface CodeScanningListAlertsForEnterpriseParams {
  /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
    tool_name?: CodeScanningAnalysisToolName,
  /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
    tool_guid?: CodeScanningAnalysisToolGuid,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    before?: string,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    after?: string,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /** If specified, only code scanning alerts with this state will be returned. */
    state?: CodeScanningAlertStateQuery,
  /**
   * The property by which to sort the results.
   * @default "created"
   */
    sort?: "created" | "updated",
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
    enterprise: string,
}

    export type CodeScanningListAlertsForEnterpriseData = (CodeScanningOrganizationAlertItems)[]

    export interface CodeSecurityGetConfigurationsForEnterpriseParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    before?: string,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    after?: string,
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
    enterprise: string,
}

    export type CodeSecurityGetConfigurationsForEnterpriseData = (CodeSecurityConfiguration)[]

    export interface CodeSecurityCreateConfigurationForEnterprisePayload {
  /** The name of the code security configuration. Must be unique within the enterprise. */
    name: string,
  /**
   * A description of the code security configuration
   * @maxLength 255
   */
    description: string,
  /**
   * The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
   * @default "disabled"
   */
    advanced_security?: "enabled" | "disabled" | "code_security" | "secret_protection",
  /**
   * The enablement status of Dependency Graph. Dependency Graph is not configurable in GitHub Enterprise Server.
   * @default "enabled"
   */
    dependency_graph?: "enabled" | "disabled" | "not_set",
  /**
   * The enablement status of Dependabot alerts
   * @default "disabled"
   */
    dependabot_alerts?: "enabled" | "disabled" | "not_set",
  /**
   * The enablement status of Dependabot security updates
   * @default "disabled"
   */
    dependabot_security_updates?: "enabled" | "disabled" | "not_set",
  /**
   * The enablement status of code scanning default setup
   * @default "disabled"
   */
    code_scanning_default_setup?: "enabled" | "disabled" | "not_set",
  /** Feature options for code scanning default setup */
    code_scanning_default_setup_options?: CodeScanningDefaultSetupOptions,
  /**
   * The enablement status of code scanning delegated alert dismissal
   * @default "disabled"
   */
    code_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set",
  /**
   * The enablement status of secret scanning
   * @default "disabled"
   */
    secret_scanning?: "enabled" | "disabled" | "not_set",
  /**
   * The enablement status of secret scanning push protection
   * @default "disabled"
   */
    secret_scanning_push_protection?: "enabled" | "disabled" | "not_set",
  /**
   * The enablement status of secret scanning validity checks
   * @default "disabled"
   */
    secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set",
  /**
   * The enablement status of secret scanning non provider patterns
   * @default "disabled"
   */
    secret_scanning_non_provider_patterns?: "enabled" | "disabled" | "not_set",
  /**
   * The enablement status of secret scanning delegated alert dismissal
   * @default "disabled"
   */
    secret_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set",
  /**
   * The enablement status of private vulnerability reporting
   * @default "disabled"
   */
    private_vulnerability_reporting?: "enabled" | "disabled" | "not_set",
  /**
   * The enforcement status for a security configuration
   * @default "enforced"
   */
    enforcement?: "enforced" | "unenforced",
}

    export type CodeSecurityCreateConfigurationForEnterpriseData = CodeSecurityConfiguration

    export type CodeSecurityGetDefaultConfigurationsForEnterpriseData = CodeSecurityDefaultConfigurations

    export type CodeSecurityGetSingleConfigurationForEnterpriseData = CodeSecurityConfiguration

    export interface CodeSecurityUpdateEnterpriseConfigurationPayload {
  /** The name of the code security configuration. Must be unique across the enterprise. */
    name?: string,
  /**
   * A description of the code security configuration
   * @maxLength 255
   */
    description?: string,
  /** The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features. */
    advanced_security?: "enabled" | "disabled" | "code_security" | "secret_protection",
  /** The enablement status of Dependency Graph. Dependency Graph is not configurable in GitHub Enterprise Server. */
    dependency_graph?: "enabled" | "disabled" | "not_set",
  /** The enablement status of Dependabot alerts */
    dependabot_alerts?: "enabled" | "disabled" | "not_set",
  /** The enablement status of Dependabot security updates */
    dependabot_security_updates?: "enabled" | "disabled" | "not_set",
  /** The enablement status of code scanning default setup */
    code_scanning_default_setup?: "enabled" | "disabled" | "not_set",
  /** Feature options for code scanning default setup */
    code_scanning_default_setup_options?: CodeScanningDefaultSetupOptions,
  /**
   * The enablement status of code scanning delegated alert dismissal
   * @default "disabled"
   */
    code_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set",
  /** The enablement status of secret scanning */
    secret_scanning?: "enabled" | "disabled" | "not_set",
  /** The enablement status of secret scanning push protection */
    secret_scanning_push_protection?: "enabled" | "disabled" | "not_set",
  /** The enablement status of secret scanning validity checks */
    secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set",
  /** The enablement status of secret scanning non-provider patterns */
    secret_scanning_non_provider_patterns?: "enabled" | "disabled" | "not_set",
  /**
   * The enablement status of secret scanning delegated alert dismissal
   * @default "disabled"
   */
    secret_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set",
  /** The enablement status of private vulnerability reporting */
    private_vulnerability_reporting?: "enabled" | "disabled" | "not_set",
  /** The enforcement status for a security configuration */
    enforcement?: "enforced" | "unenforced",
}

    export type CodeSecurityUpdateEnterpriseConfigurationData = CodeSecurityConfiguration

    export interface CodeSecurityAttachEnterpriseConfigurationPayload {
  /** The type of repositories to attach the configuration to. */
    scope: "all" | "all_without_configurations",
}

    export interface CodeSecuritySetConfigurationAsDefaultForEnterprisePayload {
  /** Specify which types of repository this security configuration should be applied to by default. */
    default_for_new_repos?: "all" | "none" | "private_and_internal" | "public",
}

    export interface CodeSecuritySetConfigurationAsDefaultForEnterpriseData {
  /** Specifies which types of repository this security configuration is applied to by default. */
    default_for_new_repos?: "all" | "none" | "private_and_internal" | "public",
  /** A code security configuration */
    configuration?: CodeSecurityConfiguration,
}

    export interface CodeSecurityGetRepositoriesForEnterpriseConfigurationParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    before?: string,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    after?: string,
  /**
   * A comma-separated list of statuses. If specified, only repositories with these attachment statuses will be returned.
   * 
   * Can be: `all`, `attached`, `attaching`, `removed`, `enforced`, `failed`, `updating`, `removed_by_enterprise`
   * @default "all"
   */
    status?: string,
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
    enterprise: string,
  /** The unique identifier of the code security configuration. */
    configurationId: number,
}

    export type CodeSecurityGetRepositoriesForEnterpriseConfigurationData = (CodeSecurityConfigurationRepositories)[]

    export type SecretScanningGetSecurityAnalysisSettingsForEnterpriseData = EnterpriseSecurityAnalysisSettings

    export interface SecretScanningPatchSecurityAnalysisSettingsForEnterprisePayload {
  /** Whether GitHub Advanced Security is automatically enabled for new repositories. For more information, see "[About GitHub Advanced Security](https://docs.github.com/enterprise-server@3.17/get-started/learning-about-github/about-github-advanced-security)." */
    advanced_security_enabled_for_new_repositories?: boolean,
  /** Whether GitHub Advanced Security is automatically enabled for new user namespace repositories. For more information, see "[About GitHub Advanced Security](https://docs.github.com/enterprise-server@3.17/get-started/learning-about-github/about-github-advanced-security)." */
    advanced_security_enabled_new_user_namespace_repos?: boolean,
  /** Whether Dependabot alerts are automatically enabled for new repositories. For more information, see "[About Dependabot alerts](https://docs.github.com/enterprise-server@3.17/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)." */
    dependabot_alerts_enabled_for_new_repositories?: boolean,
  /** Whether secret scanning is automatically enabled for new repositories. For more information, see "[About secret scanning](https://docs.github.com/enterprise-server@3.17/code-security/secret-scanning/about-secret-scanning)." */
    secret_scanning_enabled_for_new_repositories?: boolean,
  /** Whether secret scanning push protection is automatically enabled for new repositories. For more information, see "[Protecting pushes with secret scanning](https://docs.github.com/enterprise-server@3.17/code-security/secret-scanning/protecting-pushes-with-secret-scanning)." */
    secret_scanning_push_protection_enabled_for_new_repositories?: boolean,
  /**
   * The URL that will be displayed to contributors who are blocked from pushing a secret. For more information, see "[Protecting pushes with secret scanning](https://docs.github.com/enterprise-server@3.17/code-security/secret-scanning/protecting-pushes-with-secret-scanning)."
   * To disable this functionality, set this field to `null`.
   */
    secret_scanning_push_protection_custom_link?: string | null,
  /** Whether secret scanning of non-provider patterns is enabled for new repositories under this enterprise. */
    secret_scanning_non_provider_patterns_enabled_for_new_repositories?: boolean | null,
}

    export type SecretScanningPatchSecurityAnalysisSettingsForEnterpriseData = any

    export interface DependabotListAlertsForEnterpriseParams {
  /**
   * A comma-separated list of states. If specified, only alerts with these states will be returned.
   * 
   * Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
   */
    state?: string,
  /**
   * A comma-separated list of severities. If specified, only alerts with these severities will be returned.
   * 
   * Can be: `low`, `medium`, `high`, `critical`
   */
    severity?: string,
  /**
   * A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
   * 
   * Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
   */
    ecosystem?: string,
  /** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */
    package?: string,
  /**
   * CVE Exploit Prediction Scoring System (EPSS) percentage. Can be specified as:
   * - An exact number (`n`)
   * - Comparators such as `>n`, `<n`, `>=n`, `<=n`
   * - A range like `n..n`, where `n` is a number from 0.0 to 1.0
   * 
   * Filters the list of alerts based on EPSS percentages. If specified, only alerts with the provided EPSS percentages will be returned.
   */
    epss_percentage?: string,
  /**
   * Filters the list of alerts based on whether the alert has the given value. If specified, only alerts meeting this criterion will be returned.
   * Multiple `has` filters can be passed to filter for alerts that have all of the values. Currently, only `patch` is supported.
   */
    has?: (string | ("patch")[]),
  /** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */
    scope?: "development" | "runtime",
  /**
   * The property by which to sort the results.
   * `created` means when the alert was created.
   * `updated` means when the alert's state last changed.
   * `epss_percentage` sorts alerts by the Exploit Prediction Scoring System (EPSS) percentage.
   * @default "created"
   */
    sort?: "created" | "updated" | "epss_percentage",
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    before?: string,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    after?: string,
  /**
   * **Deprecated**. The number of results per page (max 100), starting from the first matching result.
   * This parameter must not be used in combination with `last`.
   * Instead, use `per_page` in combination with `after` to fetch the first page of results.
   * @min 1
   * @max 100
   * @default 30
   */
    first?: number,
  /**
   * **Deprecated**. The number of results per page (max 100), starting from the last matching result.
   * This parameter must not be used in combination with `first`.
   * Instead, use `per_page` in combination with `before` to fetch the last page of results.
   * @min 1
   * @max 100
   */
    last?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
    enterprise: string,
}

    export type DependabotListAlertsForEnterpriseData = (DependabotAlertWithRepository)[]

    export interface SecretScanningListAlertsForEnterpriseParams {
  /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
    state?: "open" | "resolved",
  /** A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter. See "[Supported secret scanning patterns](https://docs.github.com/enterprise-server@3.17/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)" for a complete list of secret types. */
    secret_type?: string,
  /** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
    resolution?: string,
  /**
   * The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
   * @default "created"
   */
    sort?: "created" | "updated",
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    before?: string,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    after?: string,
  /** A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`. */
    validity?: string,
  /**
   * A boolean value representing whether or not to filter alerts by the publicly-leaked tag being present.
   * @default false
   */
    is_publicly_leaked?: boolean,
  /**
   * A boolean value representing whether or not to filter alerts by the multi-repo tag being present.
   * @default false
   */
    is_multi_repo?: boolean,
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
    enterprise: string,
}

    export type SecretScanningListAlertsForEnterpriseData = (OrganizationSecretScanningAlert)[]

    export interface BillingGetGithubAdvancedSecurityBillingGheParams {
  /**
   * The security product to get GitHub Advanced Security active committers for.
   * 
   * For standalone Code Scanning or Secret Protection products, this parameter is required to specify which product you want committer information for. For other plans this parameter cannot be used.
   */
    advanced_security_product?: "code_security" | "secret_protection",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
    enterprise: string,
}

    export type BillingGetGithubAdvancedSecurityBillingGheData = AdvancedSecurityActiveCommitters

    export type SecretScanningPostSecurityProductEnablementForEnterpriseData = any

    export interface ActivityListPublicEventsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type ActivityListPublicEventsData = (Event)[]

    export type ActivityGetFeedsData = Feed

    export interface GistsListParams {
  /**
   * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    since?: string,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type GistsListData = (BaseGist)[]

    export interface GistsCreatePayload {
  /** Description of the gist */
    description?: string,
  /** Names and content for the files that make up the gist */
    files: Record<string,{
  /** Content of the file */
    content: string,

}>,
  /** Flag indicating whether the gist is public */
    public?: (boolean | "true" | "false"),
}

    export type GistsCreateData = GistSimple

    export interface GistsListPublicParams {
  /**
   * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    since?: string,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type GistsListPublicData = (BaseGist)[]

    export interface GistsListStarredParams {
  /**
   * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    since?: string,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type GistsListStarredData = (BaseGist)[]

    export type GistsGetData = GistSimple

    export interface GistsUpdatePayload {
  /** The description of the gist. */
    description?: string,
  /**
   * The gist files to be updated, renamed, or deleted. Each `key` must match the current filename
   * (including extension) of the targeted gist file. For example: `hello.py`.
   * 
   * To delete a file, set the whole file to null. For example: `hello.py : null`. The file will also be
   * deleted if the specified object does not contain at least one of `content` or `filename`.
   */
    files?: Record<string,{
  /** The new content of the file. */
    content?: string,
  /** The new filename for the file. */
    filename?: string | null,

}>,
}

    export type GistsUpdateData = GistSimple

    export type GistsDeleteData = any

    export interface GistsListCommentsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The unique identifier of the gist. */
    gistId: string,
}

    export type GistsListCommentsData = (GistComment)[]

    export interface GistsCreateCommentPayload {
  /**
   * The comment text.
   * @maxLength 65535
   */
    body: string,
}

    export type GistsCreateCommentData = GistComment

    export type GistsGetCommentData = GistComment

    export interface GistsUpdateCommentPayload {
  /**
   * The comment text.
   * @maxLength 65535
   */
    body: string,
}

    export type GistsUpdateCommentData = GistComment

    export type GistsDeleteCommentData = any

    export interface GistsListCommitsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The unique identifier of the gist. */
    gistId: string,
}

    export type GistsListCommitsData = (GistCommit)[]

    export interface GistsListForksParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The unique identifier of the gist. */
    gistId: string,
}

    export type GistsListForksData = (GistSimple)[]

    export type GistsForkData = BaseGist

    export type GistsCheckIsStarredData = any

    export type GistsCheckIsStarredError = (object)

    export type GistsStarData = any

    export type GistsUnstarData = any

    export type GistsGetRevisionData = GistSimple

    export type GitignoreGetAllTemplatesData = (string)[]

    export type GitignoreGetTemplateData = GitignoreTemplate

    export interface AppsListReposAccessibleToInstallationParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export interface AppsListReposAccessibleToInstallationData {
    total_count: number,
    repositories: (Repository)[],
    repository_selection?: string,
}

    export type AppsRevokeInstallationAccessTokenData = any

    export interface IssuesListParams {
  /**
   * Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
   * @default "assigned"
   */
    filter?: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all",
  /**
   * Indicates the state of the issues to return.
   * @default "open"
   */
    state?: "open" | "closed" | "all",
  /** A list of comma separated label names. Example: `bug,ui,@high` */
    labels?: string,
  /**
   * What to sort results by.
   * @default "created"
   */
    sort?: "created" | "updated" | "comments",
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    since?: string,
    collab?: boolean,
    orgs?: boolean,
    owned?: boolean,
    pulls?: boolean,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type IssuesListData = (Issue)[]

    export interface LicensesGetAllCommonlyUsedParams {
    featured?: boolean,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type LicensesGetAllCommonlyUsedData = (LicenseSimple)[]

    export type LicensesGetData = License

    export type EnterpriseAdminGetManageSshData = GhesGetSsh

    export type EnterpriseAdminSetManageSshData = GhesSetSshResponse

    export type EnterpriseAdminDeleteManageSshData = GhesDeleteSshResponse

    export type EnterpriseAdminGetChecksSystemRequirementsData = GhesChecksSystemRequirements

    export type EnterpriseAdminGetClusterStatusData = GhesClusterStatus

    export interface EnterpriseAdminGetManageConfigApplyStatusParams {
  /** The unique run ID of the `ghe-config-apply` run. */
    run_id?: string,
}

    export interface EnterpriseAdminGetManageConfigApplyStatusData {
  /** Whether the ghe-config-apply run is still running in the environment */
    running?: boolean,
  /** Whether the ghe-config-apply run was successful in the environment */
    successful?: boolean,
    nodes?: ({
  /** The unique Run ID of the ghe-config-apply run on the host */
    run_id?: string,
  /** The hostname of the node */
    hostname?: string,
  /** Whether the ghe-config-apply run is still running on the host */
    running?: boolean,
  /** Whether the ghe-config-apply run was successful on the host */
    successful?: boolean,

})[],
}

    export interface EnterpriseAdminPostManageRunConfigApplyPayload {
  /** The run ID to execute `ghe-config-apply` with. If not provided, a run ID will be generated randomly. */
    run_id?: string,
}

    export interface EnterpriseAdminPostManageRunConfigApplyData {
  /** Run ID the job was launched with */
    run_id?: string,
}

    export interface EnterpriseAdminGetManageConfigApplyEventsParams {
  /** The unique ID of the last response from a host, used for pagination. */
    last_request_id?: string,
}

    export interface EnterpriseAdminGetManageConfigApplyEventsData {
    nodes?: ({
  /** Hostname of the node */
    node?: string,
  /** Unique ID of the last response from a host used for pagination */
    last_request_id?: string,
    events?: ({
    timestamp?: string,
    severity_text?: string,
    body?: string,
    event_name?: string,
    topology?: string,
    hostname?: string,
    config_run_id?: string,
    trace_id?: string,
    span_id?: string,
    span_parent_id?: string,
    span_depth?: number,

})[],

})[],
}

    export type EnterpriseAdminInitializeInstanceConfigurationData = any

    export type EnterpriseAdminLicenseInfoData = GhesLicenseInfo

    export interface EnterpriseAdminLicenseUploadParams {
  /** Whether to instantly apply changes from the license. Otherwise the new license can be applied using the [`/manage/v1/config/apply`](https://docs.github.com/enterprise-server@3.17/rest/enterprise-admin/manage-ghes#start-configuration-apply-process) endpoint. */
    apply?: boolean,
}

    export type EnterpriseAdminLicenseUploadData = any

    export type EnterpriseAdminLicenseCheckData = GhesLicenseCheck

    export interface EnterpriseAdminGetConfigNodesParams {
  /** The UUID which identifies a node. */
    uuid?: string,
  /** The cluster roles from the cluster configuration file. */
    cluster_roles?: string,
}

    export type EnterpriseAdminGetConfigNodesData = GhesConfigNodes

    export type EnterpriseAdminGetManageSettingsData = GhesGetSettings

  /** Only the settings parameters that should be modified need to be specified. */
  export type EnterpriseAdminSetManageSettingsPayload = object

    export type EnterpriseAdminSetManageSettingsData = any

    export interface EnterpriseAdminGetManageMaintenanceParams {
  /** The UUID which identifies a node. */
    uuid?: string,
  /** The cluster roles from the cluster configuration file. */
    cluster_roles?: string,
}

    export type EnterpriseAdminGetManageMaintenanceData = GhesGetMaintenance

    export type EnterpriseAdminSetManageMaintenanceData = GhesSetMaintenanceResponse

    export interface EnterpriseAdminGetReplicationStatusParams {
  /** The UUID which identifies a node. */
    uuid?: string,
  /** The cluster roles from the cluster configuration file. */
    cluster_roles?: string,
}

    export type EnterpriseAdminGetReplicationStatusData = GhesReplicationStatus

    export interface EnterpriseAdminGetVersionParams {
  /** The UUID which identifies a node. */
    uuid?: string,
  /** The cluster roles from the cluster configuration file. */
    cluster_roles?: string,
}

    export type EnterpriseAdminGetVersionData = GhesVersion

    export interface MarkdownRenderPayload {
  /** The Markdown text to render in HTML. */
    text: string,
  /**
   * The rendering mode.
   * @default "markdown"
   */
    mode?: "markdown" | "gfm",
  /** The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository. */
    context?: string,
}

    export type MarkdownRenderData = string

    export type MarkdownRenderRawPayload = string

    export type MarkdownRenderRawData = string

    export type MetaGetData = ApiOverview

    export interface ActivityListPublicEventsForRepoNetworkParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ActivityListPublicEventsForRepoNetworkData = (Event)[]

    export interface ActivityListNotificationsForAuthenticatedUserParams {
  /**
   * If `true`, show notifications marked as read.
   * @default false
   */
    all?: boolean,
  /**
   * If `true`, only shows notifications in which the user is directly participating or mentioned.
   * @default false
   */
    participating?: boolean,
  /**
   * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    since?: string,
  /**
   * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    before?: string,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 50). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 50
   */
    per_page?: number,
}

    export type ActivityListNotificationsForAuthenticatedUserData = (Thread)[]

    export interface ActivityMarkNotificationsAsReadPayload {
  /**
   * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
   * @format date-time
   */
    last_read_at?: string,
  /** Whether the notification has been read. */
    read?: boolean,
}

    export interface ActivityMarkNotificationsAsReadData {
    message?: string,
}

    export type ActivityGetThreadData = Thread

    export type ActivityMarkThreadAsReadData = any

    export type ActivityMarkThreadAsDoneData = any

    export type ActivityGetThreadSubscriptionForAuthenticatedUserData = ThreadSubscription

    export interface ActivitySetThreadSubscriptionPayload {
  /**
   * Whether to block all notifications from a thread.
   * @default false
   */
    ignored?: boolean,
}

    export type ActivitySetThreadSubscriptionData = ThreadSubscription

    export type ActivityDeleteThreadSubscriptionData = any

    export interface MetaGetOctocatParams {
  /** The words to show in Octocat's speech bubble */
    s?: string,
}

    export type MetaGetOctocatData = string

    export interface OrgsListParams {
  /** An organization ID. Only return organizations with an ID greater than this ID. */
    since?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
}

    export type OrgsListData = (OrganizationSimple)[]

    export interface OrgsListCustomRolesData {
  /** The number of custom roles in this organization */
    total_count?: number,
    custom_roles?: (OrganizationCustomRepositoryRole)[],
}

    export type OrgsGetData = OrganizationFull

    export interface OrgsUpdatePayload {
  /** Billing email address. This address is not publicized. */
    billing_email?: string,
  /** The company name. */
    company?: string,
  /** The publicly visible email address. */
    email?: string,
  /** The Twitter username of the company. */
    twitter_username?: string,
  /** The location. */
    location?: string,
  /** The shorthand name of the company. */
    name?: string,
  /** The description of the company. The maximum size is 160 characters. */
    description?: string,
  /** Whether an organization can use organization projects. */
    has_organization_projects?: boolean,
  /** Whether repositories that belong to the organization can use repository projects. */
    has_repository_projects?: boolean,
  /**
   * Default permission level members have for organization repositories.
   * @default "read"
   */
    default_repository_permission?: "read" | "write" | "admin" | "none",
  /**
   * Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
   * @default true
   */
    members_can_create_repositories?: boolean,
  /** Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/enterprise-server@3.17/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
    members_can_create_internal_repositories?: boolean,
  /** Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/enterprise-server@3.17/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
    members_can_create_private_repositories?: boolean,
  /** Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/enterprise-server@3.17/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
    members_can_create_public_repositories?: boolean,
  /**
   * Specifies which types of repositories non-admin organization members can create. 
   * **Note:** This parameter is closing down and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
   */
    members_allowed_repository_creation_type?: "all" | "private" | "none",
  /**
   * Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
   * @default true
   */
    members_can_create_pages?: boolean,
  /**
   * Whether organization members can fork private organization repositories.
   * @default false
   */
    members_can_fork_private_repositories?: boolean,
  /**
   * Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.
   * @default false
   */
    web_commit_signoff_required?: boolean,
    blog?: string,
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.17/rest/code-security/configurations) instead.
   * 
   * Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to this organization.
   * 
   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.17/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   * 
   * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
   * @deprecated
   */
    advanced_security_enabled_for_new_repositories?: boolean,
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.17/rest/code-security/configurations) instead.
   * 
   * Whether Dependabot alerts are automatically enabled for new repositories and repositories transferred to this organization.
   * 
   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.17/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   * 
   * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
   * @deprecated
   */
    dependabot_alerts_enabled_for_new_repositories?: boolean,
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.17/rest/code-security/configurations) instead.
   * 
   * Whether Dependabot security updates are automatically enabled for new repositories and repositories transferred to this organization.
   * 
   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.17/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   * 
   * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
   * @deprecated
   */
    dependabot_security_updates_enabled_for_new_repositories?: boolean,
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.17/rest/code-security/configurations) instead.
   * 
   * Whether dependency graph is automatically enabled for new repositories and repositories transferred to this organization.
   * 
   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.17/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   * 
   * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
   * @deprecated
   */
    dependency_graph_enabled_for_new_repositories?: boolean,
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.17/rest/code-security/configurations) instead.
   * 
   * Whether secret scanning is automatically enabled for new repositories and repositories transferred to this organization.
   * 
   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.17/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   * 
   * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
   * @deprecated
   */
    secret_scanning_enabled_for_new_repositories?: boolean,
  /**
   * **Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.17/rest/code-security/configurations) instead.
   * 
   * Whether secret scanning push protection is automatically enabled for new repositories and repositories transferred to this organization.
   * 
   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.17/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   * 
   * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
   * @deprecated
   */
    secret_scanning_push_protection_enabled_for_new_repositories?: boolean,
  /** Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection. */
    secret_scanning_push_protection_custom_link_enabled?: boolean,
  /** If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret. */
    secret_scanning_push_protection_custom_link?: string,
  /** Controls whether or not deploy keys may be added and used for repositories in the organization. */
    deploy_keys_enabled_for_repositories?: boolean,
}

    export type OrgsUpdateData = OrganizationFull

    export type OrgsUpdateError = ((ValidationError | ValidationErrorSimple))

    export type ActionsGetActionsCacheUsageForOrgData = ActionsCacheUsageOrgEnterprise

    export interface ActionsGetActionsCacheUsageByRepoForOrgParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export interface ActionsGetActionsCacheUsageByRepoForOrgData {
    total_count: number,
    repository_cache_usages: (ActionsCacheUsageByRepository)[],
}

    export type OidcGetOidcCustomSubTemplateForOrgData = OidcCustomSub

    export type OidcUpdateOidcCustomSubTemplateForOrgData = EmptyObject

    export type ActionsGetGithubActionsPermissionsOrganizationData = ActionsOrganizationPermissions

    export interface ActionsSetGithubActionsPermissionsOrganizationPayload {
  /** The policy that controls the repositories in the organization that are allowed to run GitHub Actions. */
    enabled_repositories: EnabledRepositories,
  /** The permissions policy that controls the actions that are allowed to run. */
    allowed_actions?: AllowedActions,
}

    export type ActionsSetGithubActionsPermissionsOrganizationData = any

    export interface ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export interface ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationData {
    total_count: number,
    repositories: (Repository)[],
}

    export interface ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationPayload {
  /** List of repository IDs to enable for GitHub Actions. */
    selected_repository_ids: (number)[],
}

    export type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationData = any

    export type ActionsEnableSelectedRepositoryGithubActionsOrganizationData = any

    export type ActionsDisableSelectedRepositoryGithubActionsOrganizationData = any

    export type ActionsGetAllowedActionsOrganizationData = SelectedActions

    export type ActionsSetAllowedActionsOrganizationData = any

    export type ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationData = ActionsGetDefaultWorkflowPermissions

    export type ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationData = any

    export interface ActionsListSelfHostedRunnerGroupsForOrgParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** Only return runner groups that are allowed to be used by this repository. */
    visible_to_repository?: string,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export interface ActionsListSelfHostedRunnerGroupsForOrgData {
    total_count: number,
    runner_groups: (RunnerGroupsOrg)[],
}

    export interface ActionsCreateSelfHostedRunnerGroupForOrgPayload {
  /** Name of the runner group. */
    name: string,
  /**
   * Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories.
   * @default "all"
   */
    visibility?: "selected" | "all" | "private",
  /** List of repository IDs that can access the runner group. */
    selected_repository_ids?: (number)[],
  /** List of runner IDs to add to the runner group. */
    runners?: (number)[],
  /**
   * Whether the runner group can be used by `public` repositories.
   * @default false
   */
    allows_public_repositories?: boolean,
  /**
   * If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
   * @default false
   */
    restricted_to_workflows?: boolean,
  /** List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
    selected_workflows?: (string)[],
}

    export type ActionsCreateSelfHostedRunnerGroupForOrgData = RunnerGroupsOrg

    export type ActionsGetSelfHostedRunnerGroupForOrgData = RunnerGroupsOrg

    export interface ActionsUpdateSelfHostedRunnerGroupForOrgPayload {
  /** Name of the runner group. */
    name: string,
  /** Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. */
    visibility?: "selected" | "all" | "private",
  /**
   * Whether the runner group can be used by `public` repositories.
   * @default false
   */
    allows_public_repositories?: boolean,
  /**
   * If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
   * @default false
   */
    restricted_to_workflows?: boolean,
  /** List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`. */
    selected_workflows?: (string)[],
}

    export type ActionsUpdateSelfHostedRunnerGroupForOrgData = RunnerGroupsOrg

    export type ActionsDeleteSelfHostedRunnerGroupFromOrgData = any

    export interface ActionsListRepoAccessToSelfHostedRunnerGroupInOrgParams {
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** Unique identifier of the self-hosted runner group. */
    runnerGroupId: number,
}

    export interface ActionsListRepoAccessToSelfHostedRunnerGroupInOrgData {
    total_count: number,
    repositories: (MinimalRepository)[],
}

    export interface ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgPayload {
  /** List of repository IDs that can access the runner group. */
    selected_repository_ids: (number)[],
}

    export type ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgData = any

    export type ActionsAddRepoAccessToSelfHostedRunnerGroupInOrgData = any

    export type ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgData = any

    export interface ActionsListSelfHostedRunnersInGroupForOrgParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** Unique identifier of the self-hosted runner group. */
    runnerGroupId: number,
}

    export interface ActionsListSelfHostedRunnersInGroupForOrgData {
    total_count: number,
    runners: (Runner)[],
}

    export interface ActionsSetSelfHostedRunnersInGroupForOrgPayload {
  /** List of runner IDs to add to the runner group. */
    runners: (number)[],
}

    export type ActionsSetSelfHostedRunnersInGroupForOrgData = any

    export type ActionsAddSelfHostedRunnerToGroupForOrgData = any

    export type ActionsRemoveSelfHostedRunnerFromGroupForOrgData = any

    export interface ActionsListSelfHostedRunnersForOrgParams {
  /** The name of a self-hosted runner. */
    name?: string,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export interface ActionsListSelfHostedRunnersForOrgData {
    total_count: number,
    runners: (Runner)[],
}

    export type ActionsListRunnerApplicationsForOrgData = (RunnerApplication)[]

    export interface ActionsGenerateRunnerJitconfigForOrgPayload {
  /** The name of the new runner. */
    name: string,
  /** The ID of the runner group to register the runner to. */
    runner_group_id: number,
  /**
   * The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.
   * @maxItems 100
   * @minItems 1
   */
    labels: (string)[],
  /**
   * The working directory to be used for job execution, relative to the runner install directory.
   * @default "_work"
   */
    work_folder?: string,
}

    export type ActionsCreateRegistrationTokenForOrgData = AuthenticationToken

    export type ActionsCreateRemoveTokenForOrgData = AuthenticationToken

    export type ActionsGetSelfHostedRunnerForOrgData = Runner

    export type ActionsDeleteSelfHostedRunnerFromOrgData = any

    export interface ActionsAddCustomLabelsToSelfHostedRunnerForOrgPayload {
  /**
   * The names of the custom labels to add to the runner.
   * @maxItems 100
   * @minItems 1
   */
    labels: (string)[],
}

    export interface ActionsSetCustomLabelsForSelfHostedRunnerForOrgPayload {
  /**
   * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
   * @maxItems 100
   * @minItems 0
   */
    labels: (string)[],
}

    export interface ActionsListOrgSecretsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export interface ActionsListOrgSecretsData {
    total_count: number,
    secrets: (OrganizationActionsSecret)[],
}

    export type ActionsGetOrgPublicKeyData = ActionsPublicKey

    export type ActionsGetOrgSecretData = OrganizationActionsSecret

    export interface ActionsCreateOrUpdateOrgSecretPayload {
  /**
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/enterprise-server@3.17/rest/actions/secrets#get-an-organization-public-key) endpoint.
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
    encrypted_value: string,
  /** ID of the key you used to encrypt the secret. */
    key_id: string,
  /** Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret. */
    visibility: "all" | "private" | "selected",
  /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.17/rest/actions/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.17/rest/actions/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.17/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints. */
    selected_repository_ids?: (number)[],
}

    export type ActionsCreateOrUpdateOrgSecretData = EmptyObject

    export type ActionsDeleteOrgSecretData = any

    export interface ActionsListSelectedReposForOrgSecretParams {
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** The name of the secret. */
    secretName: string,
}

    export interface ActionsListSelectedReposForOrgSecretData {
    total_count: number,
    repositories: (MinimalRepository)[],
}

    export interface ActionsSetSelectedReposForOrgSecretPayload {
  /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/enterprise-server@3.17/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.17/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints. */
    selected_repository_ids: (number)[],
}

    export type ActionsSetSelectedReposForOrgSecretData = any

    export type ActionsAddSelectedRepoToOrgSecretData = any

    export type ActionsRemoveSelectedRepoFromOrgSecretData = any

    export interface ActionsListOrgVariablesParams {
  /**
   * The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 10
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export interface ActionsListOrgVariablesData {
    total_count: number,
    variables: (OrganizationActionsVariable)[],
}

    export interface ActionsCreateOrgVariablePayload {
  /** The name of the variable. */
    name: string,
  /** The value of the variable. */
    value: string,
  /** The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable. */
    visibility: "all" | "private" | "selected",
  /** An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`. */
    selected_repository_ids?: (number)[],
}

    export type ActionsCreateOrgVariableData = EmptyObject

    export type ActionsGetOrgVariableData = OrganizationActionsVariable

    export interface ActionsUpdateOrgVariablePayload {
  /** The name of the variable. */
    name?: string,
  /** The value of the variable. */
    value?: string,
  /** The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable. */
    visibility?: "all" | "private" | "selected",
  /** An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`. */
    selected_repository_ids?: (number)[],
}

    export type ActionsUpdateOrgVariableData = any

    export type ActionsDeleteOrgVariableData = any

    export interface ActionsListSelectedReposForOrgVariableParams {
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** The name of the variable. */
    name: string,
}

    export interface ActionsListSelectedReposForOrgVariableData {
    total_count: number,
    repositories: (MinimalRepository)[],
}

    export interface ActionsSetSelectedReposForOrgVariablePayload {
  /** The IDs of the repositories that can access the organization variable. */
    selected_repository_ids: (number)[],
}

    export type ActionsSetSelectedReposForOrgVariableData = any

    export type ActionsAddSelectedRepoToOrgVariableData = any

    export type ActionsRemoveSelectedRepoFromOrgVariableData = any

    export type AnnouncementBannersGetAnnouncementBannerForOrgData = AnnouncementBanner

    export type AnnouncementBannersSetAnnouncementBannerForOrgData = AnnouncementBanner

    export type AnnouncementBannersRemoveAnnouncementBannerForOrgData = any

    export interface OrgsGetAuditLogParams {
  /** A search phrase. For more information, see [Searching the audit log](https://docs.github.com/enterprise-server@3.17/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log). */
    phrase?: string,
  /**
   * The event types to include:
   * 
   * - `web` - returns web (non-Git) events.
   * - `git` - returns Git events.
   * - `all` - returns both web and Git events.
   * 
   * The default is `web`.
   */
    include?: "web" | "git" | "all",
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor. */
    after?: string,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. */
    before?: string,
  /**
   * The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.
   * 
   * The default is `desc`.
   */
    order?: "desc" | "asc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type OrgsGetAuditLogData = (AuditLogEvent)[]

    export interface OrgsListPushBypassRequestsParams {
  /** The name of the repository to filter on. */
    repository_name?: string,
  /** Filter bypass requests by the handle of the GitHub user who reviewed the bypass request. */
    reviewer?: string,
  /** Filter bypass requests by the handle of the GitHub user who requested the bypass. */
    requester?: string,
  /**
   * The time period to filter by.
   * 
   * For example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for rule suites that occurred in the past 7 days (168 hours).
   * @default "day"
   */
    time_period?: "hour" | "day" | "week" | "month",
  /**
   * The status of the bypass request to filter on. When specified, only requests with this status will be returned.
   * @default "all"
   */
    request_status?: "completed" | "cancelled" | "approved" | "expired" | "deleted" | "denied" | "open" | "all",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type OrgsListPushBypassRequestsData = (PushRuleBypassRequest)[]

    export interface SecretScanningListOrgBypassRequestsParams {
  /** The name of the repository to filter on. */
    repository_name?: string,
  /** Filter bypass requests by the handle of the GitHub user who reviewed the bypass request. */
    reviewer?: string,
  /** Filter bypass requests by the handle of the GitHub user who requested the bypass. */
    requester?: string,
  /**
   * The time period to filter by.
   * 
   * For example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for rule suites that occurred in the past 7 days (168 hours).
   * @default "day"
   */
    time_period?: "hour" | "day" | "week" | "month",
  /**
   * The status of the bypass request to filter on. When specified, only requests with this status will be returned.
   * @default "all"
   */
    request_status?: "completed" | "cancelled" | "approved" | "expired" | "deleted" | "denied" | "open" | "all",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type SecretScanningListOrgBypassRequestsData = (SecretScanningBypassRequest)[]

    export interface CodeScanningListAlertsForOrgParams {
  /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
    tool_name?: CodeScanningAnalysisToolName,
  /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
    tool_guid?: CodeScanningAnalysisToolGuid,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    before?: string,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    after?: string,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /** If specified, only code scanning alerts with this state will be returned. */
    state?: CodeScanningAlertStateQuery,
  /**
   * The property by which to sort the results.
   * @default "created"
   */
    sort?: "created" | "updated",
  /** If specified, only code scanning alerts with this severity will be returned. */
    severity?: CodeScanningAlertSeverity,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type CodeScanningListAlertsForOrgData = (CodeScanningOrganizationAlertItems)[]

    export interface CodeSecurityGetConfigurationsForOrgParams {
  /**
   * The target type of the code security configuration
   * @default "all"
   */
    target_type?: "global" | "all",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    before?: string,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    after?: string,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type CodeSecurityGetConfigurationsForOrgData = (CodeSecurityConfiguration)[]

    export interface CodeSecurityCreateConfigurationPayload {
  /** The name of the code security configuration. Must be unique within the organization. */
    name: string,
  /**
   * A description of the code security configuration
   * @maxLength 255
   */
    description: string,
  /**
   * The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features.
   * @default "disabled"
   */
    advanced_security?: "enabled" | "disabled" | "code_security" | "secret_protection",
  /**
   * The enablement status of Dependency Graph. Dependency Graph is not configurable in GitHub Enterprise Server.
   * @default "enabled"
   */
    dependency_graph?: "enabled" | "disabled" | "not_set",
  /**
   * The enablement status of Dependabot alerts
   * @default "disabled"
   */
    dependabot_alerts?: "enabled" | "disabled" | "not_set",
  /**
   * The enablement status of Dependabot security updates
   * @default "disabled"
   */
    dependabot_security_updates?: "enabled" | "disabled" | "not_set",
  /**
   * The enablement status of code scanning default setup
   * @default "disabled"
   */
    code_scanning_default_setup?: "enabled" | "disabled" | "not_set",
  /** Feature options for code scanning default setup */
    code_scanning_default_setup_options?: CodeScanningDefaultSetupOptions,
  /**
   * The enablement status of code scanning delegated alert dismissal
   * @default "not_set"
   */
    code_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set",
  /**
   * The enablement status of secret scanning
   * @default "disabled"
   */
    secret_scanning?: "enabled" | "disabled" | "not_set",
  /**
   * The enablement status of secret scanning push protection
   * @default "disabled"
   */
    secret_scanning_push_protection?: "enabled" | "disabled" | "not_set",
  /**
   * The enablement status of secret scanning delegated bypass
   * @default "disabled"
   */
    secret_scanning_delegated_bypass?: "enabled" | "disabled" | "not_set",
  /** Feature options for secret scanning delegated bypass */
    secret_scanning_delegated_bypass_options?: {
  /** The bypass reviewers for secret scanning delegated bypass */
    reviewers?: ({
  /** The ID of the team or role selected as a bypass reviewer */
    reviewer_id: number,
  /** The type of the bypass reviewer */
    reviewer_type: "TEAM" | "ROLE",

})[],

},
  /**
   * The enablement status of secret scanning validity checks
   * @default "disabled"
   */
    secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set",
  /**
   * The enablement status of secret scanning non provider patterns
   * @default "disabled"
   */
    secret_scanning_non_provider_patterns?: "enabled" | "disabled" | "not_set",
  /** The enablement status of secret scanning delegated alert dismissal */
    secret_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set",
  /**
   * The enablement status of private vulnerability reporting
   * @default "disabled"
   */
    private_vulnerability_reporting?: "enabled" | "disabled" | "not_set",
  /**
   * The enforcement status for a security configuration
   * @default "enforced"
   */
    enforcement?: "enforced" | "unenforced",
}

    export type CodeSecurityCreateConfigurationData = CodeSecurityConfiguration

    export type CodeSecurityGetDefaultConfigurationsData = CodeSecurityDefaultConfigurations

    export interface CodeSecurityDetachConfigurationPayload {
  /** An array of repository IDs to detach from configurations. */
    selected_repository_ids?: (number)[],
}

    export type CodeSecurityGetConfigurationData = CodeSecurityConfiguration

    export interface CodeSecurityUpdateConfigurationPayload {
  /** The name of the code security configuration. Must be unique within the organization. */
    name?: string,
  /**
   * A description of the code security configuration
   * @maxLength 255
   */
    description?: string,
  /** The enablement status of GitHub Advanced Security features. `enabled` will enable both Code Security and Secret Protection features. */
    advanced_security?: "enabled" | "disabled" | "code_security" | "secret_protection",
  /** The enablement status of Dependency Graph. Dependency Graph is not configurable in GitHub Enterprise Server. */
    dependency_graph?: "enabled" | "disabled" | "not_set",
  /** The enablement status of Dependabot alerts */
    dependabot_alerts?: "enabled" | "disabled" | "not_set",
  /** The enablement status of Dependabot security updates */
    dependabot_security_updates?: "enabled" | "disabled" | "not_set",
  /** The enablement status of code scanning default setup */
    code_scanning_default_setup?: "enabled" | "disabled" | "not_set",
  /** Feature options for code scanning default setup */
    code_scanning_default_setup_options?: CodeScanningDefaultSetupOptions,
  /**
   * The enablement status of code scanning delegated alert dismissal
   * @default "disabled"
   */
    code_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set",
  /** The enablement status of secret scanning */
    secret_scanning?: "enabled" | "disabled" | "not_set",
  /** The enablement status of secret scanning push protection */
    secret_scanning_push_protection?: "enabled" | "disabled" | "not_set",
  /** The enablement status of secret scanning delegated bypass */
    secret_scanning_delegated_bypass?: "enabled" | "disabled" | "not_set",
  /** Feature options for secret scanning delegated bypass */
    secret_scanning_delegated_bypass_options?: {
  /** The bypass reviewers for secret scanning delegated bypass */
    reviewers?: ({
  /** The ID of the team or role selected as a bypass reviewer */
    reviewer_id: number,
  /** The type of the bypass reviewer */
    reviewer_type: "TEAM" | "ROLE",

})[],

},
  /** The enablement status of secret scanning validity checks */
    secret_scanning_validity_checks?: "enabled" | "disabled" | "not_set",
  /** The enablement status of secret scanning non-provider patterns */
    secret_scanning_non_provider_patterns?: "enabled" | "disabled" | "not_set",
  /** The enablement status of secret scanning delegated alert dismissal */
    secret_scanning_delegated_alert_dismissal?: "enabled" | "disabled" | "not_set",
  /** The enablement status of private vulnerability reporting */
    private_vulnerability_reporting?: "enabled" | "disabled" | "not_set",
  /** The enforcement status for a security configuration */
    enforcement?: "enforced" | "unenforced",
}

    export type CodeSecurityUpdateConfigurationData = CodeSecurityConfiguration

    export interface CodeSecurityAttachConfigurationPayload {
  /** The type of repositories to attach the configuration to. `selected` means the configuration will be attached to only the repositories specified by `selected_repository_ids` */
    scope: "all" | "all_without_configurations" | "public" | "private_or_internal" | "selected",
  /** An array of repository IDs to attach the configuration to. You can only provide a list of repository ids when the `scope` is set to `selected`. */
    selected_repository_ids?: (number)[],
}

    export interface CodeSecuritySetConfigurationAsDefaultPayload {
  /** Specify which types of repository this security configuration should be applied to by default. */
    default_for_new_repos?: "all" | "none" | "private_and_internal" | "public",
}

    export interface CodeSecuritySetConfigurationAsDefaultData {
  /** Specifies which types of repository this security configuration is applied to by default. */
    default_for_new_repos?: "all" | "none" | "private_and_internal" | "public",
  /** A code security configuration */
    configuration?: CodeSecurityConfiguration,
}

    export interface CodeSecurityGetRepositoriesForConfigurationParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    before?: string,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    after?: string,
  /**
   * A comma-separated list of statuses. If specified, only repositories with these attachment statuses will be returned.
   * 
   * Can be: `all`, `attached`, `attaching`, `detached`, `removed`, `enforced`, `failed`, `updating`, `removed_by_enterprise`
   * @default "all"
   */
    status?: string,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** The unique identifier of the code security configuration. */
    configurationId: number,
}

    export type CodeSecurityGetRepositoriesForConfigurationData = (CodeSecurityConfigurationRepositories)[]

    export interface OrgsListCustomRepoRolesData {
  /** The number of custom roles in this organization */
    total_count?: number,
    custom_roles?: (OrganizationCustomRepositoryRole)[],
}

    export type OrgsCreateCustomRepoRoleData = OrganizationCustomRepositoryRole

    export type OrgsGetCustomRepoRoleData = OrganizationCustomRepositoryRole

    export type OrgsUpdateCustomRepoRoleData = OrganizationCustomRepositoryRole

    export type OrgsDeleteCustomRepoRoleData = any

    export interface DependabotListAlertsForOrgParams {
  /**
   * A comma-separated list of states. If specified, only alerts with these states will be returned.
   * 
   * Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
   */
    state?: string,
  /**
   * A comma-separated list of severities. If specified, only alerts with these severities will be returned.
   * 
   * Can be: `low`, `medium`, `high`, `critical`
   */
    severity?: string,
  /**
   * A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
   * 
   * Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
   */
    ecosystem?: string,
  /** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */
    package?: string,
  /**
   * CVE Exploit Prediction Scoring System (EPSS) percentage. Can be specified as:
   * - An exact number (`n`)
   * - Comparators such as `>n`, `<n`, `>=n`, `<=n`
   * - A range like `n..n`, where `n` is a number from 0.0 to 1.0
   * 
   * Filters the list of alerts based on EPSS percentages. If specified, only alerts with the provided EPSS percentages will be returned.
   */
    epss_percentage?: string,
  /**
   * Filters the list of alerts based on whether the alert has the given value. If specified, only alerts meeting this criterion will be returned.
   * Multiple `has` filters can be passed to filter for alerts that have all of the values. Currently, only `patch` is supported.
   */
    has?: (string | ("patch")[]),
  /** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */
    scope?: "development" | "runtime",
  /**
   * The property by which to sort the results.
   * `created` means when the alert was created.
   * `updated` means when the alert's state last changed.
   * `epss_percentage` sorts alerts by the Exploit Prediction Scoring System (EPSS) percentage.
   * @default "created"
   */
    sort?: "created" | "updated" | "epss_percentage",
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    before?: string,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    after?: string,
  /**
   * **Deprecated**. The number of results per page (max 100), starting from the first matching result.
   * This parameter must not be used in combination with `last`.
   * Instead, use `per_page` in combination with `after` to fetch the first page of results.
   * @min 1
   * @max 100
   * @default 30
   */
    first?: number,
  /**
   * **Deprecated**. The number of results per page (max 100), starting from the last matching result.
   * This parameter must not be used in combination with `first`.
   * Instead, use `per_page` in combination with `before` to fetch the last page of results.
   * @min 1
   * @max 100
   */
    last?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type DependabotListAlertsForOrgData = (DependabotAlertWithRepository)[]

    export interface DependabotListOrgSecretsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export interface DependabotListOrgSecretsData {
    total_count: number,
    secrets: (OrganizationDependabotSecret)[],
}

    export type DependabotGetOrgPublicKeyData = DependabotPublicKey

    export type DependabotGetOrgSecretData = OrganizationDependabotSecret

    export interface DependabotCreateOrUpdateOrgSecretPayload {
  /**
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/enterprise-server@3.17/rest/dependabot/secrets#get-an-organization-public-key) endpoint.
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
    encrypted_value?: string,
  /** ID of the key you used to encrypt the secret. */
    key_id?: string,
  /** Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret. */
    visibility: "all" | "private" | "selected",
  /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.17/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.17/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.17/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints. */
    selected_repository_ids?: (string)[],
}

    export type DependabotCreateOrUpdateOrgSecretData = EmptyObject

    export type DependabotDeleteOrgSecretData = any

    export interface DependabotListSelectedReposForOrgSecretParams {
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** The name of the secret. */
    secretName: string,
}

    export interface DependabotListSelectedReposForOrgSecretData {
    total_count: number,
    repositories: (MinimalRepository)[],
}

    export interface DependabotSetSelectedReposForOrgSecretPayload {
  /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.17/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.17/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints. */
    selected_repository_ids: (number)[],
}

    export type DependabotSetSelectedReposForOrgSecretData = any

    export type DependabotAddSelectedRepoToOrgSecretData = any

    export type DependabotRemoveSelectedRepoFromOrgSecretData = any

    export type PackagesListDockerMigrationConflictingPackagesForOrganizationData = (Package)[]

    export interface ActivityListPublicOrgEventsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type ActivityListPublicOrgEventsData = (Event)[]

    export interface TeamsExternalIdpGroupInfoForOrgParams {
  /**
   * The number of results per page for the "members" array (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the "members" array results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** The unique identifier of the group. */
    groupId: number,
}

    export type TeamsExternalIdpGroupInfoForOrgData = ExternalGroup

    export interface TeamsListExternalIdpGroupsForOrgParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** Page token */
    page?: number,
  /** Limits the list to groups containing the text in the group name */
    display_name?: string,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type TeamsListExternalIdpGroupsForOrgData = ExternalGroups

    export interface OrgsListWebhooksParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type OrgsListWebhooksData = (OrgHook)[]

    export interface OrgsCreateWebhookPayload {
  /** Must be passed as "web". */
    name: string,
  /** Key/value pairs to provide settings for this webhook. */
    config: {
  /** The URL to which the payloads will be delivered. */
    url: WebhookConfigUrl,
  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
    content_type?: WebhookConfigContentType,
  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.17/webhooks/event-payloads/#delivery-headers). */
    secret?: WebhookConfigSecret,
  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
    insecure_ssl?: WebhookConfigInsecureSsl,
    username?: string,
    password?: string,

},
  /**
   * Determines what [events](https://docs.github.com/enterprise-server@3.17/webhooks/event-payloads) the hook is triggered for. Set to `["*"]` to receive all possible events.
   * @default ["push"]
   */
    events?: (string)[],
  /**
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   * @default true
   */
    active?: boolean,
}

    export type OrgsCreateWebhookData = OrgHook

    export type OrgsGetWebhookData = OrgHook

    export interface OrgsUpdateWebhookPayload {
  /** Key/value pairs to provide settings for this webhook. */
    config?: {
  /** The URL to which the payloads will be delivered. */
    url: WebhookConfigUrl,
  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
    content_type?: WebhookConfigContentType,
  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.17/webhooks/event-payloads/#delivery-headers). */
    secret?: WebhookConfigSecret,
  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
    insecure_ssl?: WebhookConfigInsecureSsl,

},
  /**
   * Determines what [events](https://docs.github.com/enterprise-server@3.17/webhooks/event-payloads) the hook is triggered for.
   * @default ["push"]
   */
    events?: (string)[],
  /**
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   * @default true
   */
    active?: boolean,
    name?: string,
}

    export type OrgsUpdateWebhookData = OrgHook

    export type OrgsDeleteWebhookData = any

    export type OrgsGetWebhookConfigForOrgData = WebhookConfig

    export interface OrgsUpdateWebhookConfigForOrgPayload {
  /** The URL to which the payloads will be delivered. */
    url?: WebhookConfigUrl,
  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
    content_type?: WebhookConfigContentType,
  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.17/webhooks/event-payloads/#delivery-headers). */
    secret?: WebhookConfigSecret,
  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
    insecure_ssl?: WebhookConfigInsecureSsl,
}

    export type OrgsUpdateWebhookConfigForOrgData = WebhookConfig

    export interface OrgsListWebhookDeliveriesParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
    cursor?: string,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
    hookId: number,
}

    export type OrgsListWebhookDeliveriesData = (HookDeliveryItem)[]

    export type OrgsGetWebhookDeliveryData = HookDelivery

    export type OrgsPingWebhookData = any

    export type AppsGetOrgInstallationData = Installation

    export interface OrgsListAppInstallationsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export interface OrgsListAppInstallationsData {
    total_count: number,
    installations: (Installation)[],
}

    export interface IssuesListForOrgParams {
  /**
   * Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
   * @default "assigned"
   */
    filter?: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all",
  /**
   * Indicates the state of the issues to return.
   * @default "open"
   */
    state?: "open" | "closed" | "all",
  /** A list of comma separated label names. Example: `bug,ui,@high` */
    labels?: string,
  /** Can be the name of an issue type. */
    type?: string,
  /**
   * What to sort results by.
   * @default "created"
   */
    sort?: "created" | "updated" | "comments",
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    since?: string,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type IssuesListForOrgData = (Issue)[]

    export interface OrgsListMembersParams {
  /**
   * Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. `2fa_insecure` means that only members with [insecure 2FA methods](https://docs.github.com/enterprise-server@3.17/organizations/keeping-your-organization-secure/managing-two-factor-authentication-for-your-organization/requiring-two-factor-authentication-in-your-organization#requiring-secure-methods-of-two-factor-authentication-in-your-organization) will be returned. These options are only available for organization owners.
   * @default "all"
   */
    filter?: "2fa_disabled" | "2fa_insecure" | "all",
  /**
   * Filter members returned by their role.
   * @default "all"
   */
    role?: "all" | "admin" | "member",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type OrgsListMembersData = (SimpleUser)[]

    export type OrgsCheckMembershipForUserData = any

    export type OrgsRemoveMemberData = any

    export type OrgsGetMembershipForUserData = OrgMembership

    export interface OrgsSetMembershipForUserPayload {
  /**
   * The role to give the user in the organization. Can be one of:  
   *  * `admin` - The user will become an owner of the organization.  
   *  * `member` - The user will become a non-owner member of the organization.
   * @default "member"
   */
    role?: "admin" | "member",
}

    export type OrgsSetMembershipForUserData = OrgMembership

    export type OrgsRemoveMembershipForUserData = any

    export interface MigrationsListForOrgParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** Exclude attributes from the API response to improve performance */
    exclude?: ("repositories")[],
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type MigrationsListForOrgData = (Migration)[]

    export interface MigrationsStartForOrgPayload {
  /** A list of arrays indicating which repositories should be migrated. */
    repositories: (string)[],
  /**
   * Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
   * @default false
   */
    lock_repositories?: boolean,
  /**
   * Indicates whether metadata should be excluded and only git source should be included for the migration.
   * @default false
   */
    exclude_metadata?: boolean,
  /**
   * Indicates whether the repository git data should be excluded from the migration.
   * @default false
   */
    exclude_git_data?: boolean,
  /**
   * Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
   * @default false
   */
    exclude_attachments?: boolean,
  /**
   * Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
   * @default false
   */
    exclude_releases?: boolean,
  /**
   * Indicates whether projects owned by the organization or users should be excluded. from the migration.
   * @default false
   */
    exclude_owner_projects?: boolean,
  /**
   * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
   * @default false
   */
    org_metadata_only?: boolean,
  /** Exclude related items from being returned in the response in order to improve performance of the request. */
    exclude?: ("repositories")[],
}

    export type MigrationsStartForOrgData = Migration

    export interface MigrationsGetStatusForOrgParams {
  /** Exclude attributes from the API response to improve performance */
    exclude?: ("repositories")[],
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** The unique identifier of the migration. */
    migrationId: number,
}

    export type MigrationsGetStatusForOrgData = Migration

    export type MigrationsDeleteArchiveForOrgData = any

    export type MigrationsUnlockRepoForOrgData = any

    export interface MigrationsListReposForOrgParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** The unique identifier of the migration. */
    migrationId: number,
}

    export type MigrationsListReposForOrgData = (MinimalRepository)[]

    export type OrgsListOrganizationFineGrainedPermissionsData = (OrganizationFineGrainedPermission)[]

    export interface OrgsListOrgRolesData {
  /** The total number of organization roles available to the organization. */
    total_count?: number,
  /** The list of organization roles available to the organization. */
    roles?: (OrganizationRole)[],
}

    export type OrgsCreateCustomOrganizationRoleData = OrganizationRole

    export type OrgsRevokeAllOrgRolesTeamData = any

    export type OrgsAssignTeamToOrgRoleData = any

    export type OrgsRevokeOrgRoleTeamData = any

    export type OrgsRevokeAllOrgRolesUserData = any

    export type OrgsAssignUserToOrgRoleData = any

    export type OrgsRevokeOrgRoleUserData = any

    export type OrgsGetOrgRoleData = OrganizationRole

    export type OrgsPatchCustomOrganizationRoleData = OrganizationRole

    export type OrgsDeleteCustomOrganizationRoleData = any

    export interface OrgsListOrgRoleTeamsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** The unique identifier of the role. */
    roleId: number,
}

  /** List of teams assigned to the organization role */
  export type OrgsListOrgRoleTeamsData = (TeamRoleAssignment)[]

    export interface OrgsListOrgRoleUsersParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** The unique identifier of the role. */
    roleId: number,
}

  /** List of users assigned to the organization role */
  export type OrgsListOrgRoleUsersData = (UserRoleAssignment)[]

    export interface OrgsListOutsideCollaboratorsParams {
  /**
   * Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. `2fa_insecure` means that only outside collaborators with [insecure 2FA methods](https://docs.github.com/enterprise-server@3.17/organizations/keeping-your-organization-secure/managing-two-factor-authentication-for-your-organization/requiring-two-factor-authentication-in-your-organization#requiring-secure-methods-of-two-factor-authentication-in-your-organization) will be returned.
   * @default "all"
   */
    filter?: "2fa_disabled" | "2fa_insecure" | "all",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type OrgsListOutsideCollaboratorsData = (SimpleUser)[]

    export interface OrgsConvertMemberToOutsideCollaboratorPayload {
  /**
   * When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.
   * @default false
   */
    async?: boolean,
}

    export type OrgsConvertMemberToOutsideCollaboratorData = object

    export type OrgsRemoveOutsideCollaboratorData = any

    export type OrgsRemoveOutsideCollaboratorError = ({
    message?: string,
    documentation_url?: string,

})

    export interface PackagesListPackagesForOrganizationParams {
  /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
    package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  /**
   * The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
   * 
   * The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
   * For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/enterprise-server@3.17/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
   */
    visibility?: "public" | "private" | "internal",
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type PackagesListPackagesForOrganizationData = (Package)[]

    export type PackagesGetPackageForOrganizationData = Package

    export type PackagesDeletePackageForOrgData = any

    export interface PackagesRestorePackageForOrgParams {
  /** package token */
    token?: string,
  /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  /** The name of the package. */
    packageName: string,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type PackagesRestorePackageForOrgData = any

    export interface PackagesGetAllPackageVersionsForPackageOwnedByOrgParams {
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The state of the package, either active or deleted.
   * @default "active"
   */
    state?: "active" | "deleted",
  /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  /** The name of the package. */
    packageName: string,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type PackagesGetAllPackageVersionsForPackageOwnedByOrgData = (PackageVersion)[]

    export type PackagesGetPackageVersionForOrganizationData = PackageVersion

    export type PackagesDeletePackageVersionForOrgData = any

    export type PackagesRestorePackageVersionForOrgData = any

    export interface OrgsListPatGrantRequestsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The property by which to sort the results.
   * @default "created_at"
   */
    sort?: "created_at",
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * A list of owner usernames to use to filter the results.
   * @maxItems 10
   */
    owner?: (string)[],
  /** The name of the repository to use to filter the results. */
    repository?: string,
  /** The permission to use to filter the results. */
    permission?: string,
  /**
   * Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    last_used_before?: string,
  /**
   * Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    last_used_after?: string,
  /**
   * The ID of the token
   * @maxItems 50
   */
    token_id?: (string)[],
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type OrgsListPatGrantRequestsData = (OrganizationProgrammaticAccessGrantRequest)[]

    export interface OrgsReviewPatGrantRequestsInBulkPayload {
  /**
   * Unique identifiers of the requests for access via fine-grained personal access token. Must be formed of between 1 and 100 `pat_request_id` values.
   * @maxItems 100
   * @minItems 1
   */
    pat_request_ids?: (number)[],
  /** Action to apply to the requests. */
    action: "approve" | "deny",
  /**
   * Reason for approving or denying the requests. Max 1024 characters.
   * @maxLength 1024
   */
    reason?: string | null,
}

    export interface OrgsReviewPatGrantRequestPayload {
  /** Action to apply to the request. */
    action: "approve" | "deny",
  /**
   * Reason for approving or denying the request. Max 1024 characters.
   * @maxLength 1024
   */
    reason?: string | null,
}

    export interface OrgsListPatGrantRequestRepositoriesParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** Unique identifier of the request for access via fine-grained personal access token. */
    patRequestId: number,
}

    export type OrgsListPatGrantRequestRepositoriesData = (MinimalRepository)[]

    export interface OrgsListPatGrantsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The property by which to sort the results.
   * @default "created_at"
   */
    sort?: "created_at",
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * A list of owner usernames to use to filter the results.
   * @maxItems 10
   */
    owner?: (string)[],
  /** The name of the repository to use to filter the results. */
    repository?: string,
  /** The permission to use to filter the results. */
    permission?: string,
  /**
   * Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    last_used_before?: string,
  /**
   * Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    last_used_after?: string,
  /**
   * The ID of the token
   * @maxItems 50
   */
    token_id?: (string)[],
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type OrgsListPatGrantsData = (OrganizationProgrammaticAccessGrant)[]

    export interface OrgsUpdatePatAccessesPayload {
  /** Action to apply to the fine-grained personal access token. */
    action: "revoke",
  /**
   * The IDs of the fine-grained personal access tokens.
   * @maxItems 100
   * @minItems 1
   */
    pat_ids: (number)[],
}

    export interface OrgsUpdatePatAccessPayload {
  /** Action to apply to the fine-grained personal access token. */
    action: "revoke",
}

    export interface OrgsListPatGrantRepositoriesParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** Unique identifier of the fine-grained personal access token. */
    patId: number,
}

    export type OrgsListPatGrantRepositoriesData = (MinimalRepository)[]

    export interface EnterpriseAdminListPreReceiveHooksForOrgParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * The sort order for the response collection.
   * @default "created"
   */
    sort?: "created" | "updated" | "name",
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type EnterpriseAdminListPreReceiveHooksForOrgData = (OrgPreReceiveHook)[]

    export type EnterpriseAdminGetPreReceiveHookForOrgData = OrgPreReceiveHook

    export interface EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgPayload {
  /** The state of enforcement for the hook on this repository. */
    enforcement?: string,
  /** Whether repositories can override enforcement. */
    allow_downstream_configuration?: boolean,
}

    export type EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgData = OrgPreReceiveHook

    export type EnterpriseAdminRemovePreReceiveHookEnforcementForOrgData = OrgPreReceiveHook

    export interface PrivateRegistriesListOrgPrivateRegistriesParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export interface PrivateRegistriesListOrgPrivateRegistriesData {
    total_count: number,
    configurations: (OrgPrivateRegistryConfiguration)[],
}

    export interface PrivateRegistriesGetOrgPublicKeyData {
  /** The identifier for the key. */
    key_id: string,
  /** The Base64 encoded public key. */
    key: string,
}

    export type PrivateRegistriesGetOrgPrivateRegistryData = OrgPrivateRegistryConfiguration

    export interface PrivateRegistriesUpdateOrgPrivateRegistryPayload {
  /** The registry type. */
    registry_type?: "maven_repository" | "nuget_feed" | "goproxy_server" | "npm_registry" | "rubygems_server" | "cargo_registry" | "composer_repository" | "docker_registry" | "git_source" | "helm_registry",
  /**
   * The URL of the private registry.
   * @format uri
   */
    url?: string,
  /** The username to use when authenticating with the private registry. This field should be omitted if the private registry does not require a username for authentication. */
    username?: string | null,
  /**
   * The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get private registries public key for an organization](https://docs.github.com/enterprise-server@3.17/rest/private-registries/organization-configurations#get-private-registries-public-key-for-an-organization) endpoint.
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
    encrypted_value?: string,
  /** The ID of the key you used to encrypt the secret. */
    key_id?: string,
  /** Which type of organization repositories have access to the private registry. `selected` means only the repositories specified by `selected_repository_ids` can access the private registry. */
    visibility?: "all" | "private" | "selected",
  /** An array of repository IDs that can access the organization private registry. You can only provide a list of repository IDs when `visibility` is set to `selected`. This field should be omitted if `visibility` is set to `all` or `private`. */
    selected_repository_ids?: (number)[],
}

    export type PrivateRegistriesUpdateOrgPrivateRegistryData = any

    export type PrivateRegistriesDeleteOrgPrivateRegistryData = any

    export interface ProjectsListForOrgParams {
  /**
   * Indicates the state of the projects to return.
   * @default "open"
   */
    state?: "open" | "closed" | "all",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type ProjectsListForOrgData = (Project)[]

    export interface ProjectsCreateForOrgPayload {
  /** The name of the project. */
    name: string,
  /** The description of the project. */
    body?: string,
}

    export type ProjectsCreateForOrgData = Project

    export type OrgsGetAllCustomPropertiesData = (CustomProperty)[]

    export interface OrgsCreateOrUpdateCustomPropertiesPayload {
  /**
   * The array of custom properties to create or update.
   * @maxItems 100
   * @minItems 1
   */
    properties: (CustomProperty)[],
}

    export type OrgsCreateOrUpdateCustomPropertiesData = (CustomProperty)[]

    export type OrgsGetCustomPropertyData = CustomProperty

    export type OrgsCreateOrUpdateCustomPropertyData = CustomProperty

    export interface OrgsListCustomPropertiesValuesForReposParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** Finds repositories in the organization with a query containing one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.17/rest/search/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/enterprise-server@3.17/articles/searching-for-repositories/)" for a detailed list of qualifiers. */
    repository_query?: string,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type OrgsListCustomPropertiesValuesForReposData = (OrgRepoCustomPropertyValues)[]

    export interface OrgsCreateOrUpdateCustomPropertiesValuesForReposPayload {
  /**
   * The names of repositories that the custom property values will be applied to.
   * @maxItems 30
   * @minItems 1
   */
    repository_names: (string)[],
  /** List of custom property names and associated values to apply to the repositories. */
    properties: (CustomPropertyValue)[],
}

    export type OrgsCreateOrUpdateCustomPropertiesValuesForReposData = any

    export interface OrgsListPublicMembersParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type OrgsListPublicMembersData = (SimpleUser)[]

    export type OrgsCheckPublicMembershipForUserData = any

    export type OrgsSetPublicMembershipForAuthenticatedUserData = any

    export type OrgsRemovePublicMembershipForAuthenticatedUserData = any

    export interface ReposListForOrgParams {
  /** Specifies the types of repositories you want returned. `internal` is not yet supported when a GitHub App calls this endpoint with an installation access token. */
    type?: "all" | "public" | "private" | "forks" | "sources" | "member" | "internal",
  /**
   * The property to sort the results by.
   * @default "created"
   */
    sort?: "created" | "updated" | "pushed" | "full_name",
  /** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */
    direction?: "asc" | "desc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type ReposListForOrgData = (MinimalRepository)[]

    export interface ReposCreateInOrgPayload {
  /** The name of the repository. */
    name: string,
  /** A short description of the repository. */
    description?: string,
  /** A URL with more information about the repository. */
    homepage?: string,
  /**
   * Whether the repository is private.
   * @default false
   */
    private?: boolean,
  /**
   * The visibility of the repository. **Note**: For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://docs.github.com/enterprise-server@3.17/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.  
   * The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.
   */
    visibility?: "public" | "private" | "internal",
  /**
   * Either `true` to enable issues for this repository or `false` to disable them.
   * @default true
   */
    has_issues?: boolean,
  /**
   * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
   * @default true
   */
    has_projects?: boolean,
  /**
   * Either `true` to enable the wiki for this repository or `false` to disable it.
   * @default true
   */
    has_wiki?: boolean,
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads?: boolean,
  /**
   * Either `true` to make this repo available as a template repository or `false` to prevent it.
   * @default false
   */
    is_template?: boolean,
  /** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
    team_id?: number,
  /**
   * Pass `true` to create an initial commit with empty README.
   * @default false
   */
    auto_init?: boolean,
  /** Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell". */
    gitignore_template?: string,
  /** Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/enterprise-server@3.17/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0". */
    license_template?: string,
  /**
   * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
   * @default true
   */
    allow_squash_merge?: boolean,
  /**
   * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
   * @default false
   */
    allow_auto_merge?: boolean,
  /**
   * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /**
   * Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @deprecated
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
  /**
   * Required when using `squash_merge_commit_message`.
   * 
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * Required when using `merge_commit_message`.
   * 
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /** The custom properties for the new repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    custom_properties?: Record<string,any>,
}

    export type ReposCreateInOrgData = FullRepository

    export type OrgsListRepoFineGrainedPermissionsData = (RepositoryFineGrainedPermission)[]

    export interface ReposGetOrgRulesetsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * A comma-separated list of rule targets to filter by.
   * If provided, only rulesets that apply to the specified targets will be returned.
   * For example, `branch,tag,push`.
   */
    targets?: string,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type ReposGetOrgRulesetsData = (RepositoryRuleset)[]

  /** Request body */
  export interface ReposCreateOrgRulesetPayload {
  /** The name of the ruleset. */
    name: string,
  /**
   * The target of the ruleset.
   * @default "branch"
   */
    target?: "branch" | "tag" | "push",
  /** The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page. `evaluate` is not available for the `repository` target. */
    enforcement: RepositoryRuleEnforcement,
  /** The actors that can bypass the rules in this ruleset */
    bypass_actors?: (RepositoryRulesetBypassActor)[],
  /**
   * Conditions for an organization ruleset.
   * The branch and tag rulesets conditions object should contain both `repository_name` and `ref_name` properties, or both `repository_id` and `ref_name` properties, or both `repository_property` and `ref_name` properties.
   * The push rulesets conditions object does not require the `ref_name` property.
   */
    conditions?: OrgRulesetConditions,
  /** An array of rules within the ruleset. */
    rules?: (RepositoryRule)[],
  /** The type of the source of the ruleset */
    source_type?: "Repository" | "Organization",
}

    export type ReposCreateOrgRulesetData = RepositoryRuleset

    export interface ReposGetOrgRuleSuitesParams {
  /** The name of the ref. Cannot contain wildcard characters. Optionally prefix with `refs/heads/` to limit to branches or `refs/tags/` to limit to tags. Omit the prefix to search across all refs. When specified, only rule evaluations triggered for this ref will be returned. */
    ref?: string,
  /** The name of the repository to filter on. */
    repository_name?: string,
  /**
   * The time period to filter by.
   * 
   * For example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for rule suites that occurred in the past 7 days (168 hours).
   * @default "day"
   */
    time_period?: "hour" | "day" | "week" | "month",
  /** The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned. */
    actor_name?: string,
  /**
   * The rule suite results to filter on. When specified, only suites with this result will be returned.
   * @default "all"
   */
    rule_suite_result?: "pass" | "fail" | "bypass" | "all",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type ReposGetOrgRuleSuitesData = RuleSuites

    export type ReposGetOrgRuleSuiteData = RuleSuite

    export type ReposGetOrgRulesetData = RepositoryRuleset

  /** Request body */
  export interface ReposUpdateOrgRulesetPayload {
  /** The name of the ruleset. */
    name?: string,
  /** The target of the ruleset. */
    target?: "branch" | "tag" | "push",
  /** The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page. `evaluate` is not available for the `repository` target. */
    enforcement?: RepositoryRuleEnforcement,
  /** The actors that can bypass the rules in this ruleset */
    bypass_actors?: (RepositoryRulesetBypassActor)[],
  /**
   * Conditions for an organization ruleset.
   * The branch and tag rulesets conditions object should contain both `repository_name` and `ref_name` properties, or both `repository_id` and `ref_name` properties, or both `repository_property` and `ref_name` properties.
   * The push rulesets conditions object does not require the `ref_name` property.
   */
    conditions?: OrgRulesetConditions,
  /** An array of rules within the ruleset. */
    rules?: (RepositoryRule)[],
}

    export type ReposUpdateOrgRulesetData = RepositoryRuleset

    export type ReposDeleteOrgRulesetData = any

    export interface SecretScanningListAlertsForOrgParams {
  /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
    state?: "open" | "resolved",
  /** A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter. See "[Supported secret scanning patterns](https://docs.github.com/enterprise-server@3.17/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)" for a complete list of secret types. */
    secret_type?: string,
  /** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
    resolution?: string,
  /**
   * The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
   * @default "created"
   */
    sort?: "created" | "updated",
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string. */
    before?: string,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string. */
    after?: string,
  /** A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`. */
    validity?: string,
  /**
   * A boolean value representing whether or not to filter alerts by the publicly-leaked tag being present.
   * @default false
   */
    is_publicly_leaked?: boolean,
  /**
   * A boolean value representing whether or not to filter alerts by the multi-repo tag being present.
   * @default false
   */
    is_multi_repo?: boolean,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type SecretScanningListAlertsForOrgData = (OrganizationSecretScanningAlert)[]

    export type OrgsListSecurityManagerTeamsData = (TeamSimple)[]

    export type OrgsAddSecurityManagerTeamData = any

    export type OrgsRemoveSecurityManagerTeamData = any

    export interface BillingGetGithubAdvancedSecurityBillingOrgParams {
  /**
   * The security product to get GitHub Advanced Security active committers for.
   * 
   * For standalone Code Scanning or Secret Protection products, this parameter is required to specify which product you want committer information for. For other plans this parameter cannot be used.
   */
    advanced_security_product?: "code_security" | "secret_protection",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type BillingGetGithubAdvancedSecurityBillingOrgData = AdvancedSecurityActiveCommitters

    export interface TeamsListParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type TeamsListData = (Team)[]

    export interface TeamsCreatePayload {
  /** The name of the team. */
    name: string,
  /** The description of the team. */
    description?: string,
  /** List GitHub usernames for organization members who will become team maintainers. */
    maintainers?: (string)[],
  /** The full name (e.g., "organization-name/repository-name") of repositories to add the team to. */
    repo_names?: (string)[],
  /**
   * The level of privacy this team should have. The options are:  
   * **For a non-nested team:**  
   *  * `secret` - only visible to organization owners and members of this team.  
   *  * `closed` - visible to all members of this organization.  
   * Default: `secret`  
   * **For a parent or child team:**  
   *  * `closed` - visible to all members of this organization.  
   * Default for child team: `closed`
   */
    privacy?: "secret" | "closed",
  /**
   * The notification setting the team has chosen. The options are:  
   *  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
   *  * `notifications_disabled` - no one receives notifications.  
   * Default: `notifications_enabled`
   */
    notification_setting?: "notifications_enabled" | "notifications_disabled",
  /**
   * **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
   * @default "pull"
   */
    permission?: "pull" | "push",
  /** The ID of a team to set as the parent team. */
    parent_team_id?: number,
  /** The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. LDAP synchronization must be enabled to map LDAP entries to a team. Use the "[Update LDAP mapping for a team](https://docs.github.com/enterprise-server@3.17/rest/enterprise-admin/ldap#update-ldap-mapping-for-a-team)" endpoint to change the LDAP DN. For more information, see "[Using LDAP](https://docs.github.com/enterprise-server@3.17/admin/identity-and-access-management/authenticating-users-for-your-github-enterprise-server-instance/using-ldap#enabling-ldap-sync)." */
    ldap_dn?: string,
}

    export type TeamsCreateData = TeamFull

    export type TeamsGetByNameData = TeamFull

    export interface TeamsUpdateInOrgPayload {
  /** The name of the team. */
    name?: string,
  /** The description of the team. */
    description?: string,
  /**
   * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  
   * **For a non-nested team:**  
   *  * `secret` - only visible to organization owners and members of this team.  
   *  * `closed` - visible to all members of this organization.  
   * **For a parent or child team:**  
   *  * `closed` - visible to all members of this organization.
   */
    privacy?: "secret" | "closed",
  /**
   * The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
   *  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
   *  * `notifications_disabled` - no one receives notifications.
   */
    notification_setting?: "notifications_enabled" | "notifications_disabled",
  /**
   * **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
   * @default "pull"
   */
    permission?: "pull" | "push" | "admin",
  /** The ID of a team to set as the parent team. */
    parent_team_id?: number | null,
}

    export type TeamsUpdateInOrgData = TeamFull

    export type TeamsDeleteInOrgData = any

    export interface TeamsListDiscussionsInOrgParams {
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** Pinned discussions only filter */
    pinned?: string,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** The slug of the team name. */
    teamSlug: string,
}

    export type TeamsListDiscussionsInOrgData = (TeamDiscussion)[]

    export interface TeamsCreateDiscussionInOrgPayload {
  /** The discussion post's title. */
    title: string,
  /** The discussion post's body text. */
    body: string,
  /**
   * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
   * @default false
   */
    private?: boolean,
}

    export type TeamsCreateDiscussionInOrgData = TeamDiscussion

    export type TeamsGetDiscussionInOrgData = TeamDiscussion

    export interface TeamsUpdateDiscussionInOrgPayload {
  /** The discussion post's title. */
    title?: string,
  /** The discussion post's body text. */
    body?: string,
}

    export type TeamsUpdateDiscussionInOrgData = TeamDiscussion

    export type TeamsDeleteDiscussionInOrgData = any

    export interface TeamsListDiscussionCommentsInOrgParams {
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** The slug of the team name. */
    teamSlug: string,
  /** The number that identifies the discussion. */
    discussionNumber: number,
}

    export type TeamsListDiscussionCommentsInOrgData = (TeamDiscussionComment)[]

    export interface TeamsCreateDiscussionCommentInOrgPayload {
  /** The discussion comment's body text. */
    body: string,
}

    export type TeamsCreateDiscussionCommentInOrgData = TeamDiscussionComment

    export type TeamsGetDiscussionCommentInOrgData = TeamDiscussionComment

    export interface TeamsUpdateDiscussionCommentInOrgPayload {
  /** The discussion comment's body text. */
    body: string,
}

    export type TeamsUpdateDiscussionCommentInOrgData = TeamDiscussionComment

    export type TeamsDeleteDiscussionCommentInOrgData = any

    export interface ReactionsListForTeamDiscussionCommentInOrgParams {
  /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.17/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion comment. */
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** The slug of the team name. */
    teamSlug: string,
  /** The number that identifies the discussion. */
    discussionNumber: number,
  /** The number that identifies the comment. */
    commentNumber: number,
}

    export type ReactionsListForTeamDiscussionCommentInOrgData = (Reaction)[]

    export interface ReactionsCreateForTeamDiscussionCommentInOrgPayload {
  /** The [reaction type](https://docs.github.com/enterprise-server@3.17/rest/reactions/reactions#about-reactions) to add to the team discussion comment. */
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes",
}

    export type ReactionsCreateForTeamDiscussionCommentInOrgData = Reaction

    export type ReactionsDeleteForTeamDiscussionCommentData = any

    export interface ReactionsListForTeamDiscussionInOrgParams {
  /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.17/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion. */
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** The slug of the team name. */
    teamSlug: string,
  /** The number that identifies the discussion. */
    discussionNumber: number,
}

    export type ReactionsListForTeamDiscussionInOrgData = (Reaction)[]

    export interface ReactionsCreateForTeamDiscussionInOrgPayload {
  /** The [reaction type](https://docs.github.com/enterprise-server@3.17/rest/reactions/reactions#about-reactions) to add to the team discussion. */
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes",
}

    export type ReactionsCreateForTeamDiscussionInOrgData = Reaction

    export type ReactionsDeleteForTeamDiscussionData = any

    export type TeamsListLinkedExternalIdpGroupsToTeamForOrgData = ExternalGroups

    export interface TeamsLinkExternalIdpGroupToTeamForOrgPayload {
  /** External Group Id */
    group_id: number,
}

    export type TeamsLinkExternalIdpGroupToTeamForOrgData = ExternalGroup

    export type TeamsUnlinkExternalIdpGroupFromTeamForOrgData = any

    export interface TeamsListMembersInOrgParams {
  /**
   * Filters members returned by their role in the team.
   * @default "all"
   */
    role?: "member" | "maintainer" | "all",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** The slug of the team name. */
    teamSlug: string,
}

    export type TeamsListMembersInOrgData = (SimpleUser)[]

    export type TeamsGetMembershipForUserInOrgData = TeamMembership

    export interface TeamsAddOrUpdateMembershipForUserInOrgPayload {
  /**
   * The role that this user should have in the team.
   * @default "member"
   */
    role?: "member" | "maintainer",
}

    export type TeamsAddOrUpdateMembershipForUserInOrgData = TeamMembership

    export type TeamsRemoveMembershipForUserInOrgData = any

    export interface TeamsListProjectsInOrgParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** The slug of the team name. */
    teamSlug: string,
}

    export type TeamsListProjectsInOrgData = (TeamProject)[]

    export type TeamsCheckPermissionsForProjectInOrgData = TeamProject

    export interface TeamsAddOrUpdateProjectPermissionsInOrgPayload {
  /** The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/enterprise-server@3.17/rest/guides/getting-started-with-the-rest-api#http-method)." */
    permission?: "read" | "write" | "admin",
}

    export type TeamsAddOrUpdateProjectPermissionsInOrgData = any

    export type TeamsAddOrUpdateProjectPermissionsInOrgError = ({
    message?: string,
    documentation_url?: string,

})

    export type TeamsRemoveProjectInOrgData = any

    export interface TeamsListReposInOrgParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** The slug of the team name. */
    teamSlug: string,
}

    export type TeamsListReposInOrgData = (MinimalRepository)[]

    export type TeamsCheckPermissionsForRepoInOrgData = TeamRepository

    export interface TeamsAddOrUpdateRepoPermissionsInOrgPayload {
  /** The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository. */
    permission?: string,
}

    export type TeamsAddOrUpdateRepoPermissionsInOrgData = any

    export type TeamsRemoveRepoInOrgData = any

    export interface TeamsListChildInOrgParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The organization name. The name is not case sensitive. */
    org: string,
  /** The slug of the team name. */
    teamSlug: string,
}

    export type TeamsListChildInOrgData = (Team)[]

    export interface OrgsEnableOrDisableSecurityProductOnAllOrgReposPayload {
  /**
   * CodeQL query suite to be used. If you specify the `query_suite` parameter, the default setup will be configured with this query suite only on all repositories that didn't have default setup already configured. It will not change the query suite on repositories that already have default setup configured.
   * If you don't specify any `query_suite` in your request, the preferred query suite of the organization will be applied.
   */
    query_suite?: "default" | "extended",
}

    export type OrgsEnableOrDisableSecurityProductOnAllOrgReposData = any

    export type ProjectsGetCardData = ProjectCard

    export interface ProjectsUpdateCardPayload {
  /** The project card's note */
    note?: string | null,
  /** Whether or not the card is archived */
    archived?: boolean,
}

    export type ProjectsUpdateCardData = ProjectCard

    export type ProjectsDeleteCardData = any

    export type ProjectsDeleteCardError = ({
    message?: string,
    documentation_url?: string,
    errors?: (string)[],

})

    export interface ProjectsMoveCardPayload {
  /**
   * The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
   * @pattern ^(?:top|bottom|after:\d+)$
   */
    position: string,
  /** The unique identifier of the column the card should be moved to */
    column_id?: number,
}

    export type ProjectsMoveCardData = object

    export type ProjectsMoveCardError = ({
    message?: string,
    documentation_url?: string,
    errors?: ({
    code?: string,
    message?: string,
    resource?: string,
    field?: string,

})[],

} | {
    code?: string,
    message?: string,
    documentation_url?: string,
    errors?: ({
    code?: string,
    message?: string,

})[],

})

    export type ProjectsGetColumnData = ProjectColumn

    export interface ProjectsUpdateColumnPayload {
  /** Name of the project column */
    name: string,
}

    export type ProjectsUpdateColumnData = ProjectColumn

    export type ProjectsDeleteColumnData = any

    export interface ProjectsListCardsParams {
  /**
   * Filters the project cards that are returned by the card's state.
   * @default "not_archived"
   */
    archived_state?: "all" | "archived" | "not_archived",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The unique identifier of the column. */
    columnId: number,
}

    export type ProjectsListCardsData = (ProjectCard)[]

    export type ProjectsCreateCardPayload = ({
  /** The project card's note */
    note: string | null,

} | {
  /** The unique identifier of the content associated with the card */
    content_id: number,
  /** The piece of content associated with the card */
    content_type: string,

})

    export type ProjectsCreateCardData = ProjectCard

    export type ProjectsCreateCardError = ((ValidationError | ValidationErrorSimple) | {
    code?: string,
    message?: string,
    documentation_url?: string,
    errors?: ({
    code?: string,
    message?: string,

})[],

})

    export interface ProjectsMoveColumnPayload {
  /**
   * The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
   * @pattern ^(?:first|last|after:\d+)$
   */
    position: string,
}

    export type ProjectsMoveColumnData = object

    export type ProjectsGetData = Project

    export interface ProjectsUpdatePayload {
  /** Name of the project */
    name?: string,
  /** Body of the project */
    body?: string | null,
  /** State of the project; either 'open' or 'closed' */
    state?: string,
  /** The baseline permission that all organization members have on this project */
    organization_permission?: "read" | "write" | "admin" | "none",
  /** Whether or not this project can be seen by everyone. */
    private?: boolean,
}

    export type ProjectsUpdateData = Project

    export type ProjectsUpdateError = ({
    message?: string,
    documentation_url?: string,
    errors?: (string)[],

})

    export type ProjectsDeleteData = any

    export type ProjectsDeleteError = ({
    message?: string,
    documentation_url?: string,
    errors?: (string)[],

})

    export interface ProjectsListCollaboratorsParams {
  /**
   * Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
   * @default "all"
   */
    affiliation?: "outside" | "direct" | "all",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The unique identifier of the project. */
    projectId: number,
}

    export type ProjectsListCollaboratorsData = (SimpleUser)[]

    export interface ProjectsAddCollaboratorPayload {
  /**
   * The permission to grant the collaborator.
   * @default "write"
   */
    permission?: "read" | "write" | "admin",
}

    export type ProjectsAddCollaboratorData = any

    export type ProjectsRemoveCollaboratorData = any

    export type ProjectsGetPermissionForUserData = ProjectCollaboratorPermission

    export interface ProjectsListColumnsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The unique identifier of the project. */
    projectId: number,
}

    export type ProjectsListColumnsData = (ProjectColumn)[]

    export interface ProjectsCreateColumnPayload {
  /** Name of the project column */
    name: string,
}

    export type ProjectsCreateColumnData = ProjectColumn

    export type RateLimitGetData = RateLimitOverview

    export type ReposGetData = FullRepository

    export interface ReposUpdatePayload {
  /** The name of the repository. */
    name?: string,
  /** A short description of the repository. */
    description?: string,
  /** A URL with more information about the repository. */
    homepage?: string,
  /**
   * Either `true` to make the repository private or `false` to make it public. Default: `false`.  
   * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/enterprise-server@3.17/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
   * @default false
   */
    private?: boolean,
  /** The visibility of the repository. */
    visibility?: "public" | "private" | "internal",
  /**
   * Specify which security and analysis features to enable or disable for the repository.
   * 
   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.17/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
   * 
   * For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:
   * `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.
   * 
   * You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
   */
    security_and_analysis?: {
  /**
   * Use the `status` property to enable or disable GitHub Advanced Security for this repository.
   * For more information, see "[About GitHub Advanced
   * Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."
   * 
   * For standalone Code Scanning or Secret Protection products, this parameter cannot be used.
   */
    advanced_security?: {
  /** Can be `enabled` or `disabled`. */
    status?: string,

},
  /** Use the `status` property to enable or disable GitHub Code Security for this repository. */
    code_security?: {
  /** Can be `enabled` or `disabled`. */
    status?: string,

},
  /** Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)." */
    secret_scanning?: {
  /** Can be `enabled` or `disabled`. */
    status?: string,

},
  /** Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)." */
    secret_scanning_push_protection?: {
  /** Can be `enabled` or `disabled`. */
    status?: string,

},
  /** Use the `status` property to enable or disable secret scanning non-provider patterns for this repository. For more information, see "[Supported secret scanning patterns](/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)." */
    secret_scanning_non_provider_patterns?: {
  /** Can be `enabled` or `disabled`. */
    status?: string,

},

},
  /**
   * Either `true` to enable issues for this repository or `false` to disable them.
   * @default true
   */
    has_issues?: boolean,
  /**
   * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
   * @default true
   */
    has_projects?: boolean,
  /**
   * Either `true` to enable the wiki for this repository or `false` to disable it.
   * @default true
   */
    has_wiki?: boolean,
  /**
   * Either `true` to make this repo available as a template repository or `false` to prevent it.
   * @default false
   */
    is_template?: boolean,
  /** Updates the default branch for this repository. */
    default_branch?: string,
  /**
   * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
   * @default true
   */
    allow_squash_merge?: boolean,
  /**
   * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /**
   * Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
   * @default false
   */
    allow_update_branch?: boolean,
  /**
   * Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.
   * @deprecated
   * @default false
   */
    use_squash_pr_title_as_default?: boolean,
  /**
   * Required when using `squash_merge_commit_message`.
   * 
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * Required when using `merge_commit_message`.
   * 
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * Whether to archive this repository. `false` will unarchive a previously archived repository.
   * @default false
   */
    archived?: boolean,
  /**
   * Either `true` to allow private forks, or `false` to prevent private forks.
   * @default false
   */
    allow_forking?: boolean,
  /**
   * Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.
   * @default false
   */
    web_commit_signoff_required?: boolean,
}

    export type ReposUpdateData = FullRepository

    export type ReposDeleteData = any

    export type ReposDeleteError = ({
    message?: string,
    documentation_url?: string,

})

    export interface ActionsListArtifactsForRepoParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The name field of an artifact. When specified, only artifacts with this name will be returned. */
    name?: string,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export interface ActionsListArtifactsForRepoData {
    total_count: number,
    artifacts: (Artifact)[],
}

    export type ActionsGetArtifactData = Artifact

    export type ActionsDeleteArtifactData = any

    export type ActionsGetActionsCacheUsageData = ActionsCacheUsageByRepository

    export type ActionsGetActionsCacheUsagePolicyData = ActionsCacheUsagePolicyForRepository

    export type ActionsSetActionsCacheUsagePolicyData = any

    export interface ActionsGetActionsCacheListParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
    ref?: string,
  /** An explicit key or prefix for identifying the cache */
    key?: string,
  /**
   * The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes.
   * @default "last_accessed_at"
   */
    sort?: "created_at" | "last_accessed_at" | "size_in_bytes",
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ActionsGetActionsCacheListData = ActionsCacheList

    export interface ActionsDeleteActionsCacheByKeyParams {
  /** A key for identifying the cache. */
    key: string,
  /** The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
    ref?: string,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ActionsDeleteActionsCacheByKeyData = ActionsCacheList

    export type ActionsDeleteActionsCacheByIdData = any

    export type ActionsGetJobForWorkflowRunData = Job

    export interface ActionsReRunJobForWorkflowRunPayload {
  /**
   * Whether to enable debug logging for the re-run.
   * @default false
   */
    enable_debug_logging?: boolean,
}

    export type ActionsReRunJobForWorkflowRunData = EmptyObject

    export type ActionsGetCustomOidcSubClaimForRepoData = OidcCustomSubRepo

  /**
 * Actions OIDC subject customization for a repository
 * Actions OIDC subject customization for a repository
 */
  export interface ActionsSetCustomOidcSubClaimForRepoPayload {
  /** Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored. */
    use_default: boolean,
  /** Array of unique strings. Each claim key can only contain alphanumeric characters and underscores. */
    include_claim_keys?: (string)[],
}

    export type ActionsSetCustomOidcSubClaimForRepoData = EmptyObject

    export interface ActionsListRepoOrganizationSecretsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export interface ActionsListRepoOrganizationSecretsData {
    total_count: number,
    secrets: (ActionsSecret)[],
}

    export interface ActionsListRepoOrganizationVariablesParams {
  /**
   * The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 10
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export interface ActionsListRepoOrganizationVariablesData {
    total_count: number,
    variables: (ActionsVariable)[],
}

    export type ActionsGetGithubActionsPermissionsRepositoryData = ActionsRepositoryPermissions

    export interface ActionsSetGithubActionsPermissionsRepositoryPayload {
  /** Whether GitHub Actions is enabled on the repository. */
    enabled: ActionsEnabled,
  /** The permissions policy that controls the actions that are allowed to run. */
    allowed_actions?: AllowedActions,
}

    export type ActionsSetGithubActionsPermissionsRepositoryData = any

    export type ActionsGetWorkflowAccessToRepositoryData = ActionsWorkflowAccessToRepository

    export type ActionsSetWorkflowAccessToRepositoryData = any

    export type ActionsGetAllowedActionsRepositoryData = SelectedActions

    export type ActionsSetAllowedActionsRepositoryData = any

    export type ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryData = ActionsGetDefaultWorkflowPermissions

    export type ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryData = any

    export interface ActionsListSelfHostedRunnersForRepoParams {
  /** The name of a self-hosted runner. */
    name?: string,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export interface ActionsListSelfHostedRunnersForRepoData {
    total_count: number,
    runners: (Runner)[],
}

    export type ActionsListRunnerApplicationsForRepoData = (RunnerApplication)[]

    export interface ActionsGenerateRunnerJitconfigForRepoPayload {
  /** The name of the new runner. */
    name: string,
  /** The ID of the runner group to register the runner to. */
    runner_group_id: number,
  /**
   * The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.
   * @maxItems 100
   * @minItems 1
   */
    labels: (string)[],
  /**
   * The working directory to be used for job execution, relative to the runner install directory.
   * @default "_work"
   */
    work_folder?: string,
}

    export type ActionsCreateRegistrationTokenForRepoData = AuthenticationToken

    export type ActionsCreateRemoveTokenForRepoData = AuthenticationToken

    export type ActionsGetSelfHostedRunnerForRepoData = Runner

    export type ActionsDeleteSelfHostedRunnerFromRepoData = any

    export interface ActionsAddCustomLabelsToSelfHostedRunnerForRepoPayload {
  /**
   * The names of the custom labels to add to the runner.
   * @maxItems 100
   * @minItems 1
   */
    labels: (string)[],
}

    export interface ActionsSetCustomLabelsForSelfHostedRunnerForRepoPayload {
  /**
   * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
   * @maxItems 100
   * @minItems 0
   */
    labels: (string)[],
}

    export interface ActionsListWorkflowRunsForRepoParams {
  /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
    actor?: string,
  /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
    branch?: string,
  /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/enterprise-server@3.17/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
    event?: string,
  /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`. */
    status?: "completed" | "action_required" | "cancelled" | "failure" | "neutral" | "skipped" | "stale" | "success" | "timed_out" | "in_progress" | "queued" | "requested" | "waiting" | "pending",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.17/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
   * @format date-time
   */
    created?: string,
  /**
   * If `true` pull requests are omitted from the response (empty array).
   * @default false
   */
    exclude_pull_requests?: boolean,
  /** Returns workflow runs with the `check_suite_id` that you specify. */
    check_suite_id?: number,
  /** Only returns workflow runs that are associated with the specified `head_sha`. */
    head_sha?: string,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export interface ActionsListWorkflowRunsForRepoData {
    total_count: number,
    workflow_runs: (WorkflowRun)[],
}

    export interface ActionsGetWorkflowRunParams {
  /**
   * If `true` pull requests are omitted from the response (empty array).
   * @default false
   */
    exclude_pull_requests?: boolean,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The unique identifier of the workflow run. */
    runId: number,
}

    export type ActionsGetWorkflowRunData = WorkflowRun

    export type ActionsDeleteWorkflowRunData = any

    export type ActionsGetReviewsForRunData = (EnvironmentApprovals)[]

    export interface ActionsListWorkflowRunArtifactsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The name field of an artifact. When specified, only artifacts with this name will be returned. */
    name?: string,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The unique identifier of the workflow run. */
    runId: number,
}

    export interface ActionsListWorkflowRunArtifactsData {
    total_count: number,
    artifacts: (Artifact)[],
}

    export interface ActionsGetWorkflowRunAttemptParams {
  /**
   * If `true` pull requests are omitted from the response (empty array).
   * @default false
   */
    exclude_pull_requests?: boolean,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The unique identifier of the workflow run. */
    runId: number,
  /** The attempt number of the workflow run. */
    attemptNumber: number,
}

    export type ActionsGetWorkflowRunAttemptData = WorkflowRun

    export interface ActionsListJobsForWorkflowRunAttemptParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The unique identifier of the workflow run. */
    runId: number,
  /** The attempt number of the workflow run. */
    attemptNumber: number,
}

    export interface ActionsListJobsForWorkflowRunAttemptData {
    total_count: number,
    jobs: (Job)[],
}

    export type ActionsCancelWorkflowRunData = EmptyObject

    export type ActionsReviewCustomGatesForRunPayload = (ReviewCustomGatesCommentRequired | ReviewCustomGatesStateRequired)

    export type ActionsReviewCustomGatesForRunData = any

    export type ActionsForceCancelWorkflowRunData = EmptyObject

    export interface ActionsListJobsForWorkflowRunParams {
  /**
   * Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.
   * @default "latest"
   */
    filter?: "latest" | "all",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The unique identifier of the workflow run. */
    runId: number,
}

    export interface ActionsListJobsForWorkflowRunData {
    total_count: number,
    jobs: (Job)[],
}

    export type ActionsDeleteWorkflowRunLogsData = any

    export type ActionsGetPendingDeploymentsForRunData = (PendingDeployment)[]

    export interface ActionsReviewPendingDeploymentsForRunPayload {
  /** The list of environment ids to approve or reject */
    environment_ids: (number)[],
  /** Whether to approve or reject deployment to the specified environments. */
    state: "approved" | "rejected",
  /** A comment to accompany the deployment review */
    comment: string,
}

    export type ActionsReviewPendingDeploymentsForRunData = (Deployment)[]

    export interface ActionsReRunWorkflowPayload {
  /**
   * Whether to enable debug logging for the re-run.
   * @default false
   */
    enable_debug_logging?: boolean,
}

    export type ActionsReRunWorkflowData = EmptyObject

    export interface ActionsReRunWorkflowFailedJobsPayload {
  /**
   * Whether to enable debug logging for the re-run.
   * @default false
   */
    enable_debug_logging?: boolean,
}

    export type ActionsReRunWorkflowFailedJobsData = EmptyObject

    export interface ActionsListRepoSecretsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export interface ActionsListRepoSecretsData {
    total_count: number,
    secrets: (ActionsSecret)[],
}

    export type ActionsGetRepoPublicKeyData = ActionsPublicKey

    export type ActionsGetRepoSecretData = ActionsSecret

    export interface ActionsCreateOrUpdateRepoSecretPayload {
  /**
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/enterprise-server@3.17/rest/actions/secrets#get-a-repository-public-key) endpoint.
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
    encrypted_value: string,
  /** ID of the key you used to encrypt the secret. */
    key_id: string,
}

    export type ActionsCreateOrUpdateRepoSecretData = EmptyObject

    export type ActionsDeleteRepoSecretData = any

    export interface ActionsListRepoVariablesParams {
  /**
   * The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 10
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export interface ActionsListRepoVariablesData {
    total_count: number,
    variables: (ActionsVariable)[],
}

    export interface ActionsCreateRepoVariablePayload {
  /** The name of the variable. */
    name: string,
  /** The value of the variable. */
    value: string,
}

    export type ActionsCreateRepoVariableData = EmptyObject

    export type ActionsGetRepoVariableData = ActionsVariable

    export interface ActionsUpdateRepoVariablePayload {
  /** The name of the variable. */
    name?: string,
  /** The value of the variable. */
    value?: string,
}

    export type ActionsUpdateRepoVariableData = any

    export type ActionsDeleteRepoVariableData = any

    export interface ActionsListRepoWorkflowsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export interface ActionsListRepoWorkflowsData {
    total_count: number,
    workflows: (Workflow)[],
}

    export type ActionsGetWorkflowData = Workflow

    export type ActionsDisableWorkflowData = any

    export interface ActionsCreateWorkflowDispatchPayload {
  /** The git reference for the workflow. The reference can be a branch or tag name. */
    ref: string,
  /** Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted. */
    inputs?: Record<string,any>,
}

    export type ActionsCreateWorkflowDispatchData = any

    export type ActionsEnableWorkflowData = any

    export interface ActionsListWorkflowRunsParams {
  /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
    actor?: string,
  /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
    branch?: string,
  /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/enterprise-server@3.17/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
    event?: string,
  /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`. */
    status?: "completed" | "action_required" | "cancelled" | "failure" | "neutral" | "skipped" | "stale" | "success" | "timed_out" | "in_progress" | "queued" | "requested" | "waiting" | "pending",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.17/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
   * @format date-time
   */
    created?: string,
  /**
   * If `true` pull requests are omitted from the response (empty array).
   * @default false
   */
    exclude_pull_requests?: boolean,
  /** Returns workflow runs with the `check_suite_id` that you specify. */
    check_suite_id?: number,
  /** Only returns workflow runs that are associated with the specified `head_sha`. */
    head_sha?: string,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The ID of the workflow. You can also pass the workflow file name as a string. */
    workflowId: (number | string),
}

    export interface ActionsListWorkflowRunsData {
    total_count: number,
    workflow_runs: (WorkflowRun)[],
}

    export interface ReposListActivitiesParams {
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    before?: string,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    after?: string,
  /**
   * The Git reference for the activities you want to list.
   * 
   * The `ref` for a branch can be formatted either as `refs/heads/BRANCH_NAME` or `BRANCH_NAME`, where `BRANCH_NAME` is the name of your branch.
   */
    ref?: string,
  /** The GitHub username to use to filter by the actor who performed the activity. */
    actor?: string,
  /**
   * The time period to filter by.
   * 
   * For example, `day` will filter for activity that occurred in the past 24 hours, and `week` will filter for activity that occurred in the past 7 days (168 hours).
   */
    time_period?: "day" | "week" | "month" | "quarter" | "year",
  /**
   * The activity type to filter by.
   * 
   * For example, you can choose to filter by "force_push", to see all force pushes to the repository.
   */
    activity_type?: "push" | "force_push" | "branch_creation" | "branch_deletion" | "pr_merge" | "merge_queue_merge",
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposListActivitiesData = (Activity)[]

    export interface IssuesListAssigneesParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type IssuesListAssigneesData = (SimpleUser)[]

    export type IssuesCheckUserCanBeAssignedData = any

    export type IssuesCheckUserCanBeAssignedError = (BasicError)

    export type ReposListAutolinksData = (Autolink)[]

    export interface ReposCreateAutolinkPayload {
  /** This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit. */
    key_prefix: string,
  /** The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`. */
    url_template: string,
  /**
   * Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.
   * @default true
   */
    is_alphanumeric?: boolean,
}

    export type ReposCreateAutolinkData = Autolink

    export type ReposGetAutolinkData = Autolink

    export type ReposDeleteAutolinkData = any

    export type ReposCheckAutomatedSecurityFixesData = CheckAutomatedSecurityFixes

    export interface ReposListBranchesParams {
  /** Setting to `true` returns only branches protected by branch protections or rulesets. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches. */
    protected?: boolean,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposListBranchesData = (ShortBranch)[]

    export type ReposGetBranchData = BranchWithProtection

    export type ReposGetBranchProtectionData = BranchProtection

    export interface ReposUpdateBranchProtectionPayload {
  /** Require status checks to pass before merging. Set to `null` to disable. */
    required_status_checks: {
  /** Require branches to be up to date before merging. */
    strict: boolean,
  /**
   * **Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
   * @deprecated
   */
    contexts: (string)[],
  /** The list of status checks to require in order to merge into this branch. */
    checks?: ({
  /** The name of the required check */
    context: string,
  /** The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status. */
    app_id?: number,

})[],

},
  /** Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable. */
    enforce_admins: boolean | null,
  /** Require at least one approving review on a pull request, before merging. Set to `null` to disable. */
    required_pull_request_reviews: {
  /** Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
    dismissal_restrictions?: {
  /** The list of user `login`s with dismissal access */
    users?: (string)[],
  /** The list of team `slug`s with dismissal access */
    teams?: (string)[],
  /** The list of app `slug`s with dismissal access */
    apps?: (string)[],

},
  /** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
    dismiss_stale_reviews?: boolean,
  /** Blocks merging pull requests until [code owners](https://docs.github.com/enterprise-server@3.17/articles/about-code-owners/) review them. */
    require_code_owner_reviews?: boolean,
  /** Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers. */
    required_approving_review_count?: number,
  /**
   * Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.
   * @default false
   */
    require_last_push_approval?: boolean,
  /** Allow specific users, teams, or apps to bypass pull request requirements. */
    bypass_pull_request_allowances?: {
  /** The list of user `login`s allowed to bypass pull request requirements. */
    users?: (string)[],
  /** The list of team `slug`s allowed to bypass pull request requirements. */
    teams?: (string)[],
  /** The list of app `slug`s allowed to bypass pull request requirements. */
    apps?: (string)[],

},

},
  /** Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable. */
    restrictions: {
  /** The list of user `login`s with push access */
    users: (string)[],
  /** The list of team `slug`s with push access */
    teams: (string)[],
  /** The list of app `slug`s with push access */
    apps?: (string)[],

},
  /** Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/enterprise-server@3.17/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation. */
    required_linear_history?: boolean,
  /** Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/enterprise-server@3.17/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation." */
    allow_force_pushes?: boolean | null,
  /** Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/enterprise-server@3.17/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation. */
    allow_deletions?: boolean,
  /** If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`. */
    block_creations?: boolean,
  /** Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`. */
    required_conversation_resolution?: boolean,
  /**
   * Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.
   * @default false
   */
    lock_branch?: boolean,
  /**
   * Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.
   * @default false
   */
    allow_fork_syncing?: boolean,
}

    export type ReposUpdateBranchProtectionData = ProtectedBranch

    export type ReposDeleteBranchProtectionData = any

    export type ReposGetAdminBranchProtectionData = ProtectedBranchAdminEnforced

    export type ReposSetAdminBranchProtectionData = ProtectedBranchAdminEnforced

    export type ReposDeleteAdminBranchProtectionData = any

    export type ReposGetPullRequestReviewProtectionData = ProtectedBranchPullRequestReview

    export interface ReposUpdatePullRequestReviewProtectionPayload {
  /** Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
    dismissal_restrictions?: {
  /** The list of user `login`s with dismissal access */
    users?: (string)[],
  /** The list of team `slug`s with dismissal access */
    teams?: (string)[],
  /** The list of app `slug`s with dismissal access */
    apps?: (string)[],

},
  /** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
    dismiss_stale_reviews?: boolean,
  /** Blocks merging pull requests until [code owners](https://docs.github.com/enterprise-server@3.17/articles/about-code-owners/) have reviewed. */
    require_code_owner_reviews?: boolean,
  /** Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers. */
    required_approving_review_count?: number,
  /**
   * Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`
   * @default false
   */
    require_last_push_approval?: boolean,
  /** Allow specific users, teams, or apps to bypass pull request requirements. */
    bypass_pull_request_allowances?: {
  /** The list of user `login`s allowed to bypass pull request requirements. */
    users?: (string)[],
  /** The list of team `slug`s allowed to bypass pull request requirements. */
    teams?: (string)[],
  /** The list of app `slug`s allowed to bypass pull request requirements. */
    apps?: (string)[],

},
}

    export type ReposUpdatePullRequestReviewProtectionData = ProtectedBranchPullRequestReview

    export type ReposDeletePullRequestReviewProtectionData = any

    export type ReposGetCommitSignatureProtectionData = ProtectedBranchAdminEnforced

    export type ReposCreateCommitSignatureProtectionData = ProtectedBranchAdminEnforced

    export type ReposDeleteCommitSignatureProtectionData = any

    export type ReposGetStatusChecksProtectionData = StatusCheckPolicy

    export interface ReposUpdateStatusCheckProtectionPayload {
  /** Require branches to be up to date before merging. */
    strict?: boolean,
  /**
   * **Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
   * @deprecated
   */
    contexts?: (string)[],
  /** The list of status checks to require in order to merge into this branch. */
    checks?: ({
  /** The name of the required check */
    context: string,
  /** The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status. */
    app_id?: number,

})[],
}

    export type ReposUpdateStatusCheckProtectionData = StatusCheckPolicy

    export type ReposRemoveStatusCheckProtectionData = any

    export type ReposGetAllStatusCheckContextsData = (string)[]

  /** The name of the status checks */
  export type ReposAddStatusCheckContextsPayload = ({
  /** The name of the status checks */
    contexts: (string)[],

} | (string)[])

    export type ReposAddStatusCheckContextsData = (string)[]

  /** The name of the status checks */
  export type ReposSetStatusCheckContextsPayload = ({
  /** The name of the status checks */
    contexts: (string)[],

} | (string)[])

    export type ReposSetStatusCheckContextsData = (string)[]

  /** The name of the status checks */
  export type ReposRemoveStatusCheckContextsPayload = ({
  /** The name of the status checks */
    contexts: (string)[],

} | (string)[])

    export type ReposRemoveStatusCheckContextsData = (string)[]

    export type ReposGetAccessRestrictionsData = BranchRestrictionPolicy

    export type ReposDeleteAccessRestrictionsData = any

    export type ReposGetAppsWithAccessToProtectedBranchData = (Integration)[]

  /** @example {"apps":["my-app"]} */
  export interface ReposAddAppAccessRestrictionsPayload {
  /** The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items. */
    apps: (string)[],
}

    export type ReposAddAppAccessRestrictionsData = (Integration)[]

  /** @example {"apps":["my-app"]} */
  export interface ReposSetAppAccessRestrictionsPayload {
  /** The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items. */
    apps: (string)[],
}

    export type ReposSetAppAccessRestrictionsData = (Integration)[]

  /** @example {"apps":["my-app"]} */
  export interface ReposRemoveAppAccessRestrictionsPayload {
  /** The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items. */
    apps: (string)[],
}

    export type ReposRemoveAppAccessRestrictionsData = (Integration)[]

    export type ReposGetTeamsWithAccessToProtectedBranchData = (Team)[]

  /** The slug values for teams */
  export type ReposAddTeamAccessRestrictionsPayload = ({
  /** The slug values for teams */
    teams: (string)[],

} | (string)[])

    export type ReposAddTeamAccessRestrictionsData = (Team)[]

  /** The slug values for teams */
  export type ReposSetTeamAccessRestrictionsPayload = ({
  /** The slug values for teams */
    teams: (string)[],

} | (string)[])

    export type ReposSetTeamAccessRestrictionsData = (Team)[]

  /** The slug values for teams */
  export type ReposRemoveTeamAccessRestrictionsPayload = ({
  /** The slug values for teams */
    teams: (string)[],

} | (string)[])

    export type ReposRemoveTeamAccessRestrictionsData = (Team)[]

    export type ReposGetUsersWithAccessToProtectedBranchData = (SimpleUser)[]

  /** @example {"users":["mona"]} */
  export interface ReposAddUserAccessRestrictionsPayload {
  /** The username for users */
    users: (string)[],
}

    export type ReposAddUserAccessRestrictionsData = (SimpleUser)[]

  /** @example {"users":["mona"]} */
  export interface ReposSetUserAccessRestrictionsPayload {
  /** The username for users */
    users: (string)[],
}

    export type ReposSetUserAccessRestrictionsData = (SimpleUser)[]

  /** @example {"users":["mona"]} */
  export interface ReposRemoveUserAccessRestrictionsPayload {
  /** The username for users */
    users: (string)[],
}

    export type ReposRemoveUserAccessRestrictionsData = (SimpleUser)[]

    export interface ReposRenameBranchPayload {
  /** The new name of the branch. */
    new_name: string,
}

    export type ReposRenameBranchData = BranchWithProtection

    export interface ReposListRepoPushBypassRequestsParams {
  /** Filter bypass requests by the handle of the GitHub user who reviewed the bypass request. */
    reviewer?: string,
  /** Filter bypass requests by the handle of the GitHub user who requested the bypass. */
    requester?: string,
  /**
   * The time period to filter by.
   * 
   * For example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for rule suites that occurred in the past 7 days (168 hours).
   * @default "day"
   */
    time_period?: "hour" | "day" | "week" | "month",
  /**
   * The status of the bypass request to filter on. When specified, only requests with this status will be returned.
   * @default "all"
   */
    request_status?: "completed" | "cancelled" | "approved" | "expired" | "deleted" | "denied" | "open" | "all",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposListRepoPushBypassRequestsData = (PushRuleBypassRequest)[]

    export type ReposGetRepoPushBypassRequestData = PushRuleBypassRequest

    export interface SecretScanningListRepoBypassRequestsParams {
  /** Filter bypass requests by the handle of the GitHub user who reviewed the bypass request. */
    reviewer?: string,
  /** Filter bypass requests by the handle of the GitHub user who requested the bypass. */
    requester?: string,
  /**
   * The time period to filter by.
   * 
   * For example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for rule suites that occurred in the past 7 days (168 hours).
   * @default "day"
   */
    time_period?: "hour" | "day" | "week" | "month",
  /**
   * The status of the bypass request to filter on. When specified, only requests with this status will be returned.
   * @default "all"
   */
    request_status?: "completed" | "cancelled" | "approved" | "expired" | "deleted" | "denied" | "open" | "all",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type SecretScanningListRepoBypassRequestsData = (SecretScanningBypassRequest)[]

    export type SecretScanningGetBypassRequestData = SecretScanningBypassRequest

    export interface SecretScanningReviewBypassRequestPayload {
  /** The review action to perform on the bypass request. */
    status: "approve" | "reject",
  /** A message to include with the review. Has a maximum character length of 2048. */
    message: string,
}

    export interface SecretScanningReviewBypassRequestData {
  /** ID of the bypass review. */
    bypass_review_id?: number,
}

    export type SecretScanningDismissBypassResponseData = any

    export type ChecksCreatePayload = ({
    status: "completed",
    [key: string]: any,

} | {
    status?: "queued" | "in_progress",
    [key: string]: any,

}) & ({
  /** The name of the check. For example, "code-coverage". */
    name: string,
  /** The SHA of the commit. */
    head_sha: string,
  /** The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used. */
    details_url?: string,
  /** A reference for the run on the integrator's system. */
    external_id?: string,
  /**
   * The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
   * @default "queued"
   */
    status?: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending",
  /**
   * The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    started_at?: string,
  /**
   * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. 
   * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
   */
    conclusion?: "action_required" | "cancelled" | "failure" | "neutral" | "success" | "skipped" | "stale" | "timed_out",
  /**
   * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    completed_at?: string,
  /** Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. */
    output?: {
  /** The title of the check run. */
    title: string,
  /**
   * The summary of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.
   * @maxLength 65535
   */
    summary: string,
  /**
   * The details of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.
   * @maxLength 65535
   */
    text?: string,
  /**
   * Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/enterprise-server@3.17/rest/checks/runs#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. GitHub Actions are limited to 10 warning annotations and 10 error annotations per step. For details about how you can view annotations on GitHub, see "[About status checks](https://docs.github.com/enterprise-server@3.17/articles/about-status-checks#checks)".
   * @maxItems 50
   */
    annotations?: ({
  /** The path of the file to add an annotation to. For example, `assets/css/main.css`. */
    path: string,
  /** The start line of the annotation. Line numbers start at 1. */
    start_line: number,
  /** The end line of the annotation. */
    end_line: number,
  /** The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1. */
    start_column?: number,
  /** The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
    end_column?: number,
  /** The level of the annotation. */
    annotation_level: "notice" | "warning" | "failure",
  /** A short description of the feedback for these lines of code. The maximum size is 64 KB. */
    message: string,
  /** The title that represents the annotation. The maximum size is 255 characters. */
    title?: string,
  /** Details about this annotation. The maximum size is 64 KB. */
    raw_details?: string,

})[],
  /** Adds images to the output displayed in the GitHub pull request UI. */
    images?: ({
  /** The alternative text for the image. */
    alt: string,
  /** The full URL of the image. */
    image_url: string,
  /** A short image description. */
    caption?: string,

})[],

},
  /**
   * Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/enterprise-server@3.17/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/enterprise-server@3.17/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions)."
   * @maxItems 3
   */
    actions?: ({
  /**
   * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
   * @maxLength 20
   */
    label: string,
  /**
   * A short explanation of what this action would do. The maximum size is 40 characters.
   * @maxLength 40
   */
    description: string,
  /**
   * A reference for the action on the integrator's system. The maximum size is 20 characters.
   * @maxLength 20
   */
    identifier: string,

})[],

})

    export type ChecksCreateData = CheckRun

    export type ChecksGetData = CheckRun

    export type ChecksUpdatePayload = ({
    status?: "completed",
    [key: string]: any,

} | {
    status?: "queued" | "in_progress",
    [key: string]: any,

}) & ({
  /** The name of the check. For example, "code-coverage". */
    name?: string,
  /** The URL of the integrator's site that has the full details of the check. */
    details_url?: string,
  /** A reference for the run on the integrator's system. */
    external_id?: string,
  /**
   * This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    started_at?: string,
  /** The current status of the check run. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`. */
    status?: "queued" | "in_progress" | "completed" | "waiting" | "requested" | "pending",
  /**
   * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. 
   * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
   */
    conclusion?: "action_required" | "cancelled" | "failure" | "neutral" | "success" | "skipped" | "stale" | "timed_out",
  /**
   * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    completed_at?: string,
  /** Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. */
    output?: {
  /** **Required**. */
    title?: string,
  /**
   * Can contain Markdown.
   * @maxLength 65535
   */
    summary: string,
  /**
   * Can contain Markdown.
   * @maxLength 65535
   */
    text?: string,
  /**
   * Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/enterprise-server@3.17/rest/checks/runs#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. GitHub Actions are limited to 10 warning annotations and 10 error annotations per step. For details about annotations in the UI, see "[About status checks](https://docs.github.com/enterprise-server@3.17/articles/about-status-checks#checks)".
   * @maxItems 50
   */
    annotations?: ({
  /** The path of the file to add an annotation to. For example, `assets/css/main.css`. */
    path: string,
  /** The start line of the annotation. Line numbers start at 1. */
    start_line: number,
  /** The end line of the annotation. */
    end_line: number,
  /** The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1. */
    start_column?: number,
  /** The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
    end_column?: number,
  /** The level of the annotation. */
    annotation_level: "notice" | "warning" | "failure",
  /** A short description of the feedback for these lines of code. The maximum size is 64 KB. */
    message: string,
  /** The title that represents the annotation. The maximum size is 255 characters. */
    title?: string,
  /** Details about this annotation. The maximum size is 64 KB. */
    raw_details?: string,

})[],
  /** Adds images to the output displayed in the GitHub pull request UI. */
    images?: ({
  /** The alternative text for the image. */
    alt: string,
  /** The full URL of the image. */
    image_url: string,
  /** A short image description. */
    caption?: string,

})[],

},
  /**
   * Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/enterprise-server@3.17/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions)."
   * @maxItems 3
   */
    actions?: ({
  /**
   * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
   * @maxLength 20
   */
    label: string,
  /**
   * A short explanation of what this action would do. The maximum size is 40 characters.
   * @maxLength 40
   */
    description: string,
  /**
   * A reference for the action on the integrator's system. The maximum size is 20 characters.
   * @maxLength 20
   */
    identifier: string,

})[],

})

    export type ChecksUpdateData = CheckRun

    export interface ChecksListAnnotationsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The unique identifier of the check run. */
    checkRunId: number,
}

    export type ChecksListAnnotationsData = (CheckAnnotation)[]

    export type ChecksRerequestRunData = EmptyObject

    export type ChecksRerequestRunError = (BasicError)

    export interface ChecksCreateSuitePayload {
  /** The sha of the head commit. */
    head_sha: string,
}

    export type ChecksCreateSuiteData = CheckSuite

    export interface ChecksSetSuitesPreferencesPayload {
  /** Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. */
    auto_trigger_checks?: ({
  /** The `id` of the GitHub App. */
    app_id: number,
  /**
   * Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
   * @default true
   */
    setting: boolean,

})[],
}

    export type ChecksSetSuitesPreferencesData = CheckSuitePreference

    export type ChecksGetSuiteData = CheckSuite

    export interface ChecksListForSuiteParams {
  /** Returns check runs with the specified `name`. */
    check_name?: string,
  /** Returns check runs with the specified `status`. */
    status?: "queued" | "in_progress" | "completed",
  /**
   * Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
   * @default "latest"
   */
    filter?: "latest" | "all",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The unique identifier of the check suite. */
    checkSuiteId: number,
}

    export interface ChecksListForSuiteData {
    total_count: number,
    check_runs: (CheckRun)[],
}

    export type ChecksRerequestSuiteData = EmptyObject

    export interface CodeScanningListAlertsForRepoParams {
  /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
    tool_name?: CodeScanningAnalysisToolName,
  /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
    tool_guid?: CodeScanningAnalysisToolGuid,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
    ref?: CodeScanningRef,
  /** The number of the pull request for the results you want to list. */
    pr?: number,
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    before?: string,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    after?: string,
  /**
   * The property by which to sort the results.
   * @default "created"
   */
    sort?: "created" | "updated",
  /** If specified, only code scanning alerts with this state will be returned. */
    state?: CodeScanningAlertStateQuery,
  /** If specified, only code scanning alerts with this severity will be returned. */
    severity?: CodeScanningAlertSeverity,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type CodeScanningListAlertsForRepoData = (CodeScanningAlertItems)[]

    export type CodeScanningGetAlertData = CodeScanningAlert

    export interface CodeScanningUpdateAlertPayload {
  /** Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`. */
    state: CodeScanningAlertSetState,
  /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */
    dismissed_reason?: CodeScanningAlertDismissedReason,
  /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment,
}

    export type CodeScanningUpdateAlertData = CodeScanningAlert

    export interface CodeScanningListAlertInstancesParams {
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
    ref?: CodeScanningRef,
  /** The number of the pull request for the results you want to list. */
    pr?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
    alertNumber: AlertNumber,
}

    export type CodeScanningListAlertInstancesData = (CodeScanningAlertInstance)[]

    export interface CodeScanningListRecentAnalysesParams {
  /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
    tool_name?: CodeScanningAnalysisToolName,
  /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
    tool_guid?: CodeScanningAnalysisToolGuid,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** The number of the pull request for the results you want to list. */
    pr?: number,
  /** The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
    ref?: CodeScanningRef,
  /** Filter analyses belonging to the same SARIF upload. */
    sarif_id?: CodeScanningAnalysisSarifId,
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * The property by which to sort the results.
   * @default "created"
   */
    sort?: "created",
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type CodeScanningListRecentAnalysesData = (CodeScanningAnalysis)[]

    export type CodeScanningGetAnalysisData = CodeScanningAnalysis

    export interface CodeScanningDeleteAnalysisParams {
  /** Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.` */
    confirm_delete?: string | null,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation. */
    analysisId: number,
}

    export type CodeScanningDeleteAnalysisData = CodeScanningAnalysisDeletion

    export type CodeScanningGetDefaultSetupData = CodeScanningDefaultSetup

    export type CodeScanningUpdateDefaultSetupData = EmptyObject

    export interface CodeScanningUploadSarifPayload {
  /** The SHA of the commit to which the analysis you are uploading relates. */
    commit_sha: CodeScanningAnalysisCommitSha,
  /**
   * The full Git reference, formatted as `refs/heads/<branch name>`,
   * `refs/tags/<tag>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
   */
    ref: CodeScanningRefFull,
  /** A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/enterprise-server@3.17/code-security/secure-coding/sarif-support-for-code-scanning)." */
    sarif: CodeScanningAnalysisSarifFile,
  /**
   * The base directory used in the analysis, as it appears in the SARIF file.
   * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
   * @format uri
   */
    checkout_uri?: string,
  /**
   * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    started_at?: string,
  /** The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`. */
    tool_name?: string,
}

    export type CodeScanningUploadSarifData = CodeScanningSarifsReceipt

    export type CodeScanningGetSarifData = CodeScanningSarifsStatus

    export type CodeSecurityGetConfigurationForRepositoryData = CodeSecurityConfigurationForRepository

    export interface ReposCodeownersErrorsParams {
  /** A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`) */
    ref?: string,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposCodeownersErrorsData = CodeownersErrors

    export interface ReposListCollaboratorsParams {
  /**
   * Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
   * @default "all"
   */
    affiliation?: "outside" | "direct" | "all",
  /** Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned. */
    permission?: "pull" | "triage" | "push" | "maintain" | "admin",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposListCollaboratorsData = (Collaborator)[]

    export type ReposCheckCollaboratorData = any

    export interface ReposAddCollaboratorPayload {
  /**
   * The permission to grant the collaborator. **Only valid on organization-owned repositories.**
   * @default "push"
   */
    permission?: string,
}

    export type ReposAddCollaboratorData = any

    export type ReposAddCollaboratorError = (ValidationError)

    export type ReposRemoveCollaboratorData = any

    export type ReposGetCollaboratorPermissionLevelData = RepositoryCollaboratorPermission

    export interface ReposListCommitCommentsForRepoParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposListCommitCommentsForRepoData = (CommitComment)[]

    export type ReposGetCommitCommentData = CommitComment

    export interface ReposUpdateCommitCommentPayload {
  /** The contents of the comment */
    body: string,
}

    export type ReposUpdateCommitCommentData = CommitComment

    export type ReposDeleteCommitCommentData = any

    export interface ReactionsListForCommitCommentParams {
  /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.17/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a commit comment. */
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /**
   * The unique identifier of the comment.
   * @format int64
   */
    commentId: number,
}

    export type ReactionsListForCommitCommentData = (Reaction)[]

    export interface ReactionsCreateForCommitCommentPayload {
  /** The [reaction type](https://docs.github.com/enterprise-server@3.17/rest/reactions/reactions#about-reactions) to add to the commit comment. */
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes",
}

    export type ReactionsCreateForCommitCommentData = Reaction

    export type ReactionsDeleteForCommitCommentData = any

    export interface ReposListCommitsParams {
  /** SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`). */
    sha?: string,
  /** Only commits containing this file path will be returned. */
    path?: string,
  /** GitHub username or email address to use to filter by commit author. */
    author?: string,
  /** GitHub username or email address to use to filter by commit committer. */
    committer?: string,
  /**
   * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.
   * @format date-time
   */
    since?: string,
  /**
   * Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.
   * @format date-time
   */
    until?: string,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposListCommitsData = (Commit)[]

    export type ReposListBranchesForHeadCommitData = (BranchShort)[]

    export interface ReposListCommentsForCommitParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The SHA of the commit. */
    commitSha: string,
}

    export type ReposListCommentsForCommitData = (CommitComment)[]

    export interface ReposCreateCommitCommentPayload {
  /** The contents of the comment. */
    body: string,
  /** Relative path of the file to comment on. */
    path?: string,
  /** Line index in the diff to comment on. */
    position?: number,
  /** **Closing down notice**. Use **position** parameter instead. Line number in the file to comment on. */
    line?: number,
}

    export type ReposCreateCommitCommentData = CommitComment

    export interface ReposListPullRequestsAssociatedWithCommitParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The SHA of the commit. */
    commitSha: string,
}

    export type ReposListPullRequestsAssociatedWithCommitData = (PullRequestSimple)[]

    export interface ReposGetCommitParams {
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation. */
    ref: string,
}

    export type ReposGetCommitData = Commit

    export interface ChecksListForRefParams {
  /** Returns check runs with the specified `name`. */
    check_name?: string,
  /** Returns check runs with the specified `status`. */
    status?: "queued" | "in_progress" | "completed",
  /**
   * Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
   * @default "latest"
   */
    filter?: "latest" | "all",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
    app_id?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation. */
    ref: string,
}

    export interface ChecksListForRefData {
    total_count: number,
    check_runs: (CheckRun)[],
}

    export interface ChecksListSuitesForRefParams {
  /**
   * Filters check suites by GitHub App `id`.
   * @example 1
   */
    app_id?: number,
  /** Returns check runs with the specified `name`. */
    check_name?: string,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation. */
    ref: string,
}

    export interface ChecksListSuitesForRefData {
    total_count: number,
    check_suites: (CheckSuite)[],
}

    export interface ReposGetCombinedStatusForRefParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation. */
    ref: string,
}

    export type ReposGetCombinedStatusForRefData = CombinedCommitStatus

    export interface ReposListCommitStatusesForRefParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)" in the Git documentation. */
    ref: string,
}

    export type ReposListCommitStatusesForRefData = (Status)[]

    export interface ReposCompareCommitsParams {
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`. */
    basehead: string,
}

    export type ReposCompareCommitsData = CommitComparison

    export interface ReposGetContentParams {
  /** The name of the commit/branch/tag. Default: the repository’s default branch. */
    ref?: string,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** path parameter */
    path: string,
}

    export type ReposGetContentData = ContentTree

    export interface ReposCreateOrUpdateFileContentsPayload {
  /** The commit message. */
    message: string,
  /** The new file content, using Base64 encoding. */
    content: string,
  /** **Required if you are updating a file**. The blob SHA of the file being replaced. */
    sha?: string,
  /** The branch name. Default: the repository’s default branch. */
    branch?: string,
  /** The person that committed the file. Default: the authenticated user. */
    committer?: {
  /** The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */
    name: string,
  /** The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */
    email: string,
    date?: string,

},
  /** The author of the file. Default: The `committer` or the authenticated user if you omit `committer`. */
    author?: {
  /** The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */
    name: string,
  /** The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */
    email: string,
    date?: string,

},
}

    export type ReposCreateOrUpdateFileContentsData = FileCommit

    export type ReposCreateOrUpdateFileContentsError = ((BasicError | RepositoryRuleViolationError))

    export interface ReposDeleteFilePayload {
  /** The commit message. */
    message: string,
  /** The blob SHA of the file being deleted. */
    sha: string,
  /** The branch name. Default: the repository’s default branch */
    branch?: string,
  /** object containing information about the committer. */
    committer?: {
  /** The name of the author (or committer) of the commit */
    name?: string,
  /** The email of the author (or committer) of the commit */
    email?: string,

},
  /** object containing information about the author. */
    author?: {
  /** The name of the author (or committer) of the commit */
    name?: string,
  /** The email of the author (or committer) of the commit */
    email?: string,

},
}

    export type ReposDeleteFileData = FileCommit

    export interface ReposListContributorsParams {
  /** Set to `1` or `true` to include anonymous contributors in results. */
    anon?: string,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposListContributorsData = (Contributor)[]

    export interface DependabotListAlertsForRepoParams {
  /**
   * A comma-separated list of states. If specified, only alerts with these states will be returned.
   * 
   * Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
   */
    state?: string,
  /**
   * A comma-separated list of severities. If specified, only alerts with these severities will be returned.
   * 
   * Can be: `low`, `medium`, `high`, `critical`
   */
    severity?: string,
  /**
   * A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
   * 
   * Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
   */
    ecosystem?: string,
  /** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */
    package?: string,
  /** A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned. */
    manifest?: string,
  /**
   * CVE Exploit Prediction Scoring System (EPSS) percentage. Can be specified as:
   * - An exact number (`n`)
   * - Comparators such as `>n`, `<n`, `>=n`, `<=n`
   * - A range like `n..n`, where `n` is a number from 0.0 to 1.0
   * 
   * Filters the list of alerts based on EPSS percentages. If specified, only alerts with the provided EPSS percentages will be returned.
   */
    epss_percentage?: string,
  /**
   * Filters the list of alerts based on whether the alert has the given value. If specified, only alerts meeting this criterion will be returned.
   * Multiple `has` filters can be passed to filter for alerts that have all of the values. Currently, only `patch` is supported.
   */
    has?: (string | ("patch")[]),
  /** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */
    scope?: "development" | "runtime",
  /**
   * The property by which to sort the results.
   * `created` means when the alert was created.
   * `updated` means when the alert's state last changed.
   * `epss_percentage` sorts alerts by the Exploit Prediction Scoring System (EPSS) percentage.
   * @default "created"
   */
    sort?: "created" | "updated" | "epss_percentage",
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * **Closing down notice**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead.
   * @deprecated
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @deprecated
   * @default 30
   */
    per_page?: number,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    before?: string,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)." */
    after?: string,
  /**
   * **Deprecated**. The number of results per page (max 100), starting from the first matching result.
   * This parameter must not be used in combination with `last`.
   * Instead, use `per_page` in combination with `after` to fetch the first page of results.
   * @min 1
   * @max 100
   * @default 30
   */
    first?: number,
  /**
   * **Deprecated**. The number of results per page (max 100), starting from the last matching result.
   * This parameter must not be used in combination with `first`.
   * Instead, use `per_page` in combination with `before` to fetch the last page of results.
   * @min 1
   * @max 100
   */
    last?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type DependabotListAlertsForRepoData = (DependabotAlert)[]

    export type DependabotGetAlertData = DependabotAlert

    export interface DependabotUpdateAlertPayload {
  /**
   * The state of the Dependabot alert.
   * A `dismissed_reason` must be provided when setting the state to `dismissed`.
   */
    state: "dismissed" | "open",
  /** **Required when `state` is `dismissed`.** A reason for dismissing the alert. */
    dismissed_reason?: "fix_started" | "inaccurate" | "no_bandwidth" | "not_used" | "tolerable_risk",
  /**
   * An optional comment associated with dismissing the alert.
   * @maxLength 280
   */
    dismissed_comment?: string,
}

    export type DependabotUpdateAlertData = DependabotAlert

    export interface DependabotListRepoSecretsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export interface DependabotListRepoSecretsData {
    total_count: number,
    secrets: (DependabotSecret)[],
}

    export type DependabotGetRepoPublicKeyData = DependabotPublicKey

    export type DependabotGetRepoSecretData = DependabotSecret

    export interface DependabotCreateOrUpdateRepoSecretPayload {
  /**
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/enterprise-server@3.17/rest/dependabot/secrets#get-a-repository-public-key) endpoint.
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
    encrypted_value?: string,
  /** ID of the key you used to encrypt the secret. */
    key_id?: string,
}

    export type DependabotCreateOrUpdateRepoSecretData = EmptyObject

    export type DependabotDeleteRepoSecretData = any

    export interface DependencyGraphDiffRangeParams {
  /** The full path, relative to the repository root, of the dependency manifest file. */
    name?: string,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format `{base}...{head}`. */
    basehead: string,
}

    export type DependencyGraphDiffRangeData = DependencyGraphDiff

    export type DependencyGraphExportSbomData = DependencyGraphSpdxSbom

    export interface DependencyGraphCreateRepositorySnapshotData {
  /** ID of the created snapshot. */
    id: number,
  /** The time at which the snapshot was created. */
    created_at: string,
  /** Either "SUCCESS", "ACCEPTED", or "INVALID". "SUCCESS" indicates that the snapshot was successfully created and the repository's dependencies were updated. "ACCEPTED" indicates that the snapshot was successfully created, but the repository's dependencies were not updated. "INVALID" indicates that the snapshot was malformed. */
    result: string,
  /** A message providing further details about the result, such as why the dependencies were not updated. */
    message: string,
}

    export interface ReposListDeploymentsParams {
  /**
   * The SHA recorded at creation time.
   * @default "none"
   */
    sha?: string,
  /**
   * The name of the ref. This can be a branch, tag, or SHA.
   * @default "none"
   */
    ref?: string,
  /**
   * The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
   * @default "none"
   */
    task?: string,
  /**
   * The name of the environment that was deployed to (e.g., `staging` or `production`).
   * @default "none"
   */
    environment?: string | null,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposListDeploymentsData = (Deployment)[]

    export interface ReposCreateDeploymentPayload {
  /** The ref to deploy. This can be a branch, tag, or SHA. */
    ref: string,
  /**
   * Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
   * @default "deploy"
   */
    task?: string,
  /**
   * Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
   * @default true
   */
    auto_merge?: boolean,
  /** The [status](https://docs.github.com/enterprise-server@3.17/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts. */
    required_contexts?: (string)[],
  /** JSON payload with extra information about the deployment. */
    payload?: (Record<string,any> | string),
  /**
   * Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
   * @default "production"
   */
    environment?: string,
  /**
   * Short description of the deployment.
   * @default ""
   */
    description?: string | null,
  /**
   * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
   * @default false
   */
    transient_environment?: boolean,
  /** Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise. */
    production_environment?: boolean,
}

    export type ReposCreateDeploymentData = Deployment

    export type ReposGetDeploymentData = Deployment

    export type ReposDeleteDeploymentData = any

    export interface ReposListDeploymentStatusesParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** deployment_id parameter */
    deploymentId: number,
}

    export type ReposListDeploymentStatusesData = (DeploymentStatus)[]

    export interface ReposCreateDeploymentStatusPayload {
  /** The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub. */
    state: "error" | "failure" | "inactive" | "in_progress" | "queued" | "pending" | "success",
  /**
   * The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment.
   * 
   * > [!NOTE]
   * > It's recommended to use the `log_url` parameter, which replaces `target_url`.
   * @default ""
   */
    target_url?: string,
  /**
   * The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
   * @default ""
   */
    log_url?: string,
  /**
   * A short description of the status. The maximum description length is 140 characters.
   * @default ""
   */
    description?: string,
  /** Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. If not defined, the environment of the previous status on the deployment will be used, if it exists. Otherwise, the environment of the deployment will be used. */
    environment?: string,
  /**
   * Sets the URL for accessing your environment. Default: `""`
   * @default ""
   */
    environment_url?: string,
  /** Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true` */
    auto_inactive?: boolean,
}

    export type ReposCreateDeploymentStatusData = DeploymentStatus

    export type ReposGetDeploymentStatusData = DeploymentStatus

    export interface ReposCreateDispatchEventPayload {
  /**
   * A custom webhook event name. Must be 100 characters or fewer.
   * @minLength 1
   * @maxLength 100
   */
    event_type: string,
  /** JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10. The total size of the JSON payload must be less than 64KB. */
    client_payload?: Record<string,any>,
}

    export type ReposCreateDispatchEventData = any

    export interface ReposGetAllEnvironmentsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export interface ReposGetAllEnvironmentsData {
  /** The number of environments in this repository */
    total_count?: number,
    environments?: (Environment)[],
}

    export type ReposGetEnvironmentData = Environment

    export interface ReposCreateOrUpdateEnvironmentPayload {
  /** The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days). */
    wait_timer?: WaitTimer,
  /** Whether or not a user who created the job is prevented from approving their own job. */
    prevent_self_review?: PreventSelfReview,
  /** The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
    reviewers?: (any)[] | null,
  /** The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`. */
    deployment_branch_policy?: DeploymentBranchPolicySettings,
}

    export type ReposCreateOrUpdateEnvironmentData = Environment

    export type ReposCreateOrUpdateEnvironmentError = (BasicError)

    export type ReposDeleteAnEnvironmentData = any

    export interface ReposListDeploymentBranchPoliciesParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
    environmentName: string,
}

    export interface ReposListDeploymentBranchPoliciesData {
  /** The number of deployment branch policies for the environment. */
    total_count: number,
    branch_policies: (DeploymentBranchPolicy)[],
}

    export type ReposCreateDeploymentBranchPolicyData = DeploymentBranchPolicy

    export type ReposGetDeploymentBranchPolicyData = DeploymentBranchPolicy

    export type ReposUpdateDeploymentBranchPolicyData = DeploymentBranchPolicy

    export type ReposDeleteDeploymentBranchPolicyData = any

  /** @example {"$ref":"#/components/examples/deployment-protection-rules"} */
  export interface ReposGetAllDeploymentProtectionRulesData {
  /** The number of enabled custom deployment protection rules for this environment */
    total_count?: number,
    custom_deployment_protection_rules?: (DeploymentProtectionRule)[],
}

    export interface ReposCreateDeploymentProtectionRulePayload {
  /** The ID of the custom app that will be enabled on the environment. */
    integration_id?: number,
}

    export type ReposCreateDeploymentProtectionRuleData = DeploymentProtectionRule

    export interface ReposListCustomDeploymentRuleIntegrationsParams {
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
    environmentName: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
}

    export interface ReposListCustomDeploymentRuleIntegrationsData {
  /** The total number of custom deployment protection rule integrations available for this environment. */
    total_count?: number,
    available_custom_deployment_protection_rule_integrations?: (CustomDeploymentRuleApp)[],
}

    export type ReposGetCustomDeploymentProtectionRuleData = DeploymentProtectionRule

    export type ReposDisableDeploymentProtectionRuleData = any

    export interface ActionsListEnvironmentSecretsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
    environmentName: string,
}

    export interface ActionsListEnvironmentSecretsData {
    total_count: number,
    secrets: (ActionsSecret)[],
}

    export type ActionsGetEnvironmentPublicKeyData = ActionsPublicKey

    export type ActionsGetEnvironmentSecretData = ActionsSecret

    export interface ActionsCreateOrUpdateEnvironmentSecretPayload {
  /**
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/enterprise-server@3.17/rest/actions/secrets#get-an-environment-public-key) endpoint.
   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
   */
    encrypted_value: string,
  /** ID of the key you used to encrypt the secret. */
    key_id: string,
}

    export type ActionsCreateOrUpdateEnvironmentSecretData = EmptyObject

    export type ActionsDeleteEnvironmentSecretData = any

    export interface ActionsListEnvironmentVariablesParams {
  /**
   * The number of results per page (max 30). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 10
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. */
    environmentName: string,
}

    export interface ActionsListEnvironmentVariablesData {
    total_count: number,
    variables: (ActionsVariable)[],
}

    export interface ActionsCreateEnvironmentVariablePayload {
  /** The name of the variable. */
    name: string,
  /** The value of the variable. */
    value: string,
}

    export type ActionsCreateEnvironmentVariableData = EmptyObject

    export type ActionsGetEnvironmentVariableData = ActionsVariable

    export interface ActionsUpdateEnvironmentVariablePayload {
  /** The name of the variable. */
    name?: string,
  /** The value of the variable. */
    value?: string,
}

    export type ActionsUpdateEnvironmentVariableData = any

    export type ActionsDeleteEnvironmentVariableData = any

    export interface ActivityListRepoEventsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ActivityListRepoEventsData = (Event)[]

    export interface ReposListForksParams {
  /**
   * The sort order. `stargazers` will sort by star count.
   * @default "newest"
   */
    sort?: "newest" | "oldest" | "stargazers" | "watchers",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposListForksData = (MinimalRepository)[]

    export interface ReposCreateForkPayload {
  /** Optional parameter to specify the organization name if forking into an organization. */
    organization?: string,
  /** When forking from an existing repository, a new name for the fork. */
    name?: string,
  /** When forking from an existing repository, fork with only the default branch. */
    default_branch_only?: boolean,
}

    export type ReposCreateForkData = FullRepository

    export interface GitCreateBlobPayload {
  /** The new blob's content. */
    content: string,
  /**
   * The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
   * @default "utf-8"
   */
    encoding?: string,
}

    export type GitCreateBlobData = ShortBlob

    export type GitCreateBlobError = ((ValidationError | RepositoryRuleViolationError))

    export type GitGetBlobData = Blob

    export interface GitCreateCommitPayload {
  /** The commit message */
    message: string,
  /** The SHA of the tree object this commit points to */
    tree: string,
  /** The full SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided. */
    parents?: (string)[],
  /** Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details. */
    author?: {
  /** The name of the author (or committer) of the commit */
    name: string,
  /** The email of the author (or committer) of the commit */
    email: string,
  /**
   * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    date?: string,

},
  /** Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details. */
    committer?: {
  /** The name of the author (or committer) of the commit */
    name?: string,
  /** The email of the author (or committer) of the commit */
    email?: string,
  /**
   * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    date?: string,

},
  /** The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits. */
    signature?: string,
}

    export type GitCreateCommitData = GitCommit

    export type GitGetCommitData = GitCommit

    export type GitListMatchingRefsData = (GitRef)[]

    export type GitGetRefData = GitRef

    export interface GitCreateRefPayload {
  /** The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected. */
    ref: string,
  /** The SHA1 value for this reference. */
    sha: string,
}

    export type GitCreateRefData = GitRef

    export interface GitUpdateRefPayload {
  /** The SHA1 value to set this reference to */
    sha: string,
  /**
   * Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
   * @default false
   */
    force?: boolean,
}

    export type GitUpdateRefData = GitRef

    export type GitDeleteRefData = any

    export interface GitCreateTagPayload {
  /** The tag's name. This is typically a version (e.g., "v0.0.1"). */
    tag: string,
  /** The tag message. */
    message: string,
  /** The SHA of the git object this is tagging. */
    object: string,
  /** The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`. */
    type: "commit" | "tree" | "blob",
  /** An object with information about the individual creating the tag. */
    tagger?: {
  /** The name of the author of the tag */
    name: string,
  /** The email of the author of the tag */
    email: string,
  /**
   * When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    date?: string,

},
}

    export type GitCreateTagData = GitTag

    export type GitGetTagData = GitTag

    export interface GitCreateTreePayload {
  /** Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure. */
    tree: ({
  /** The file referenced in the tree. */
    path?: string,
  /** The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink. */
    mode?: "100644" | "100755" | "040000" | "160000" | "120000",
  /** Either `blob`, `tree`, or `commit`. */
    type?: "blob" | "tree" | "commit",
  /**
   * The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.  
   *   
   * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
   */
    sha?: string | null,
  /**
   * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.  
   *   
   * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
   */
    content?: string,

})[],
  /**
   * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
   * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
   */
    base_tree?: string,
}

    export type GitCreateTreeData = GitTree

    export interface GitGetTreeParams {
  /** Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees. */
    recursive?: string,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The SHA1 value or ref (branch or tag) name of the tree. */
    treeSha: string,
}

    export type GitGetTreeData = GitTree

    export interface ReposListWebhooksParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposListWebhooksData = (Hook)[]

    export interface ReposCreateWebhookPayload {
  /** Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`. */
    name?: string,
  /** Key/value pairs to provide settings for this webhook. */
    config?: {
  /** The URL to which the payloads will be delivered. */
    url?: WebhookConfigUrl,
  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
    content_type?: WebhookConfigContentType,
  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.17/webhooks/event-payloads/#delivery-headers). */
    secret?: WebhookConfigSecret,
  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
    insecure_ssl?: WebhookConfigInsecureSsl,

},
  /**
   * Determines what [events](https://docs.github.com/enterprise-server@3.17/webhooks/event-payloads) the hook is triggered for.
   * @default ["push"]
   */
    events?: (string)[],
  /**
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   * @default true
   */
    active?: boolean,
}

    export type ReposCreateWebhookData = Hook

    export type ReposGetWebhookData = Hook

    export interface ReposUpdateWebhookPayload {
  /** Configuration object of the webhook */
    config?: WebhookConfig,
  /**
   * Determines what [events](https://docs.github.com/enterprise-server@3.17/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
   * @default ["push"]
   */
    events?: (string)[],
  /** Determines a list of events to be added to the list of events that the Hook triggers for. */
    add_events?: (string)[],
  /** Determines a list of events to be removed from the list of events that the Hook triggers for. */
    remove_events?: (string)[],
  /**
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   * @default true
   */
    active?: boolean,
}

    export type ReposUpdateWebhookData = Hook

    export type ReposDeleteWebhookData = any

    export type ReposGetWebhookConfigForRepoData = WebhookConfig

    export interface ReposUpdateWebhookConfigForRepoPayload {
  /** The URL to which the payloads will be delivered. */
    url?: WebhookConfigUrl,
  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
    content_type?: WebhookConfigContentType,
  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.17/webhooks/event-payloads/#delivery-headers). */
    secret?: WebhookConfigSecret,
  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
    insecure_ssl?: WebhookConfigInsecureSsl,
}

    export type ReposUpdateWebhookConfigForRepoData = WebhookConfig

    export interface ReposListWebhookDeliveriesParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
    cursor?: string,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. */
    hookId: number,
}

    export type ReposListWebhookDeliveriesData = (HookDeliveryItem)[]

    export type ReposGetWebhookDeliveryData = HookDelivery

    export type ReposPingWebhookData = any

    export type ReposTestPushWebhookData = any

    export type AppsGetRepoInstallationData = Installation

    export interface ReposListInvitationsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposListInvitationsData = (RepositoryInvitation)[]

    export interface ReposUpdateInvitationPayload {
  /** The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`. */
    permissions?: "read" | "write" | "maintain" | "triage" | "admin",
}

    export type ReposUpdateInvitationData = RepositoryInvitation

    export type ReposDeleteInvitationData = any

    export interface IssuesListForRepoParams {
  /** If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned. */
    milestone?: string,
  /**
   * Indicates the state of the issues to return.
   * @default "open"
   */
    state?: "open" | "closed" | "all",
  /** Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user. */
    assignee?: string,
  /** Can be the name of an issue type. If the string `*` is passed, issues with any type are accepted. If the string `none` is passed, issues without type are returned. */
    type?: string,
  /** The user that created the issue. */
    creator?: string,
  /** A user that's mentioned in the issue. */
    mentioned?: string,
  /** A list of comma separated label names. Example: `bug,ui,@high` */
    labels?: string,
  /**
   * What to sort results by.
   * @default "created"
   */
    sort?: "created" | "updated" | "comments",
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    since?: string,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type IssuesListForRepoData = (Issue)[]

    export interface IssuesCreatePayload {
  /** The title of the issue. */
    title: (string | number),
  /** The contents of the issue. */
    body?: string,
  /** Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is closing down.**_ */
    assignee?: string | null,
  /** The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._ */
    milestone?: (string | number),
  /** Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._ */
    labels?: ((string | {
    id?: number,
    name?: string,
    description?: string | null,
    color?: string | null,

}))[],
  /** Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */
    assignees?: (string)[],
  /** The name of the issue type to associate with this issue. _NOTE: Only users with push access can set the type for new issues. The type is silently dropped otherwise._ */
    type?: string | null,
}

    export type IssuesCreateData = Issue

    export interface IssuesListCommentsForRepoParams {
  /**
   * The property to sort the results by.
   * @default "created"
   */
    sort?: "created" | "updated",
  /** Either `asc` or `desc`. Ignored without the `sort` parameter. */
    direction?: "asc" | "desc",
  /**
   * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    since?: string,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type IssuesListCommentsForRepoData = (IssueComment)[]

    export type IssuesGetCommentData = IssueComment

    export interface IssuesUpdateCommentPayload {
  /** The contents of the comment. */
    body: string,
}

    export type IssuesUpdateCommentData = IssueComment

    export type IssuesDeleteCommentData = any

    export interface ReactionsListForIssueCommentParams {
  /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.17/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to an issue comment. */
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /**
   * The unique identifier of the comment.
   * @format int64
   */
    commentId: number,
}

    export type ReactionsListForIssueCommentData = (Reaction)[]

    export interface ReactionsCreateForIssueCommentPayload {
  /** The [reaction type](https://docs.github.com/enterprise-server@3.17/rest/reactions/reactions#about-reactions) to add to the issue comment. */
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes",
}

    export type ReactionsCreateForIssueCommentData = Reaction

    export type ReactionsDeleteForIssueCommentData = any

    export interface IssuesListEventsForRepoParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type IssuesListEventsForRepoData = (IssueEvent)[]

    export type IssuesGetEventData = IssueEvent

    export type IssuesGetData = Issue

    export interface IssuesUpdatePayload {
  /** The title of the issue. */
    title?: (string | number),
  /** The contents of the issue. */
    body?: string | null,
  /** Username to assign to this issue. **This field is closing down.** */
    assignee?: string | null,
  /** The open or closed state of the issue. */
    state?: "open" | "closed",
  /** The reason for the state change. Ignored unless `state` is changed. */
    state_reason?: "completed" | "not_planned" | "duplicate" | "reopened",
  /** The `number` of the milestone to associate this issue with or use `null` to remove the current milestone. Only users with push access can set the milestone for issues. Without push access to the repository, milestone changes are silently dropped. */
    milestone?: (string | number),
  /** Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped. */
    labels?: ((string | {
    id?: number,
    name?: string,
    description?: string | null,
    color?: string | null,

}))[],
  /** Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped. */
    assignees?: (string)[],
  /** The name of the issue type to associate with this issue or use `null` to remove the current issue type. Only users with push access can set the type for issues. Without push access to the repository, type changes are silently dropped. */
    type?: string | null,
}

    export type IssuesUpdateData = Issue

    export interface IssuesAddAssigneesPayload {
  /** Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._ */
    assignees?: (string)[],
}

    export type IssuesAddAssigneesData = Issue

    export interface IssuesRemoveAssigneesPayload {
  /** Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._ */
    assignees?: (string)[],
}

    export type IssuesRemoveAssigneesData = Issue

    export type IssuesCheckUserCanBeAssignedToIssueData = any

    export type IssuesCheckUserCanBeAssignedToIssueError = (BasicError)

    export interface IssuesListCommentsParams {
  /**
   * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    since?: string,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The number that identifies the issue. */
    issueNumber: number,
}

    export type IssuesListCommentsData = (IssueComment)[]

    export interface IssuesCreateCommentPayload {
  /** The contents of the comment. */
    body: string,
}

    export type IssuesCreateCommentData = IssueComment

    export interface IssuesListEventsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The number that identifies the issue. */
    issueNumber: number,
}

    export type IssuesListEventsData = (IssueEventForIssue)[]

    export interface IssuesListLabelsOnIssueParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The number that identifies the issue. */
    issueNumber: number,
}

    export type IssuesListLabelsOnIssueData = (Label)[]

    export type IssuesAddLabelsPayload = ({
  /**
   * The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/enterprise-server@3.17/rest/issues/labels#set-labels-for-an-issue)."
   * @minItems 1
   */
    labels?: (string)[],

} | (string)[] | {
  /** @minItems 1 */
    labels?: ({
    name: string,

})[],

} | ({
    name: string,

})[] | string)

    export type IssuesAddLabelsData = (Label)[]

    export type IssuesSetLabelsPayload = ({
  /**
   * The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/enterprise-server@3.17/rest/issues/labels#add-labels-to-an-issue)."
   * @minItems 1
   */
    labels?: (string)[],

} | (string)[] | {
  /** @minItems 1 */
    labels?: ({
    name: string,

})[],

} | ({
    name: string,

})[] | string)

    export type IssuesSetLabelsData = (Label)[]

    export type IssuesRemoveAllLabelsData = any

    export type IssuesRemoveLabelData = (Label)[]

    export interface IssuesLockPayload {
  /**
   * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  
   *  * `off-topic`  
   *  * `too heated`  
   *  * `resolved`  
   *  * `spam`
   */
    lock_reason?: "off-topic" | "too heated" | "resolved" | "spam",
}

    export type IssuesLockData = any

    export type IssuesUnlockData = any

    export interface ReactionsListForIssueParams {
  /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.17/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to an issue. */
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The number that identifies the issue. */
    issueNumber: number,
}

    export type ReactionsListForIssueData = (Reaction)[]

    export interface ReactionsCreateForIssuePayload {
  /** The [reaction type](https://docs.github.com/enterprise-server@3.17/rest/reactions/reactions#about-reactions) to add to the issue. */
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes",
}

    export type ReactionsCreateForIssueData = Reaction

    export type ReactionsDeleteForIssueData = any

    export interface IssuesListEventsForTimelineParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The number that identifies the issue. */
    issueNumber: number,
}

    export type IssuesListEventsForTimelineData = (TimelineIssueEvents)[]

    export interface ReposListDeployKeysParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposListDeployKeysData = (DeployKey)[]

    export interface ReposCreateDeployKeyPayload {
  /** A name for the key. */
    title?: string,
  /** The contents of the key. */
    key: string,
  /**
   * If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  
   *   
   * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/enterprise-server@3.17/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/enterprise-server@3.17/articles/permission-levels-for-a-user-account-repository/)."
   */
    read_only?: boolean,
}

    export type ReposCreateDeployKeyData = DeployKey

    export type ReposGetDeployKeyData = DeployKey

    export type ReposDeleteDeployKeyData = any

    export interface IssuesListLabelsForRepoParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type IssuesListLabelsForRepoData = (Label)[]

    export interface IssuesCreateLabelPayload {
  /** The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)." */
    name: string,
  /** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
    color?: string,
  /** A short description of the label. Must be 100 characters or fewer. */
    description?: string,
}

    export type IssuesCreateLabelData = Label

    export type IssuesGetLabelData = Label

    export interface IssuesUpdateLabelPayload {
  /** The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)." */
    new_name?: string,
  /** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
    color?: string,
  /** A short description of the label. Must be 100 characters or fewer. */
    description?: string,
}

    export type IssuesUpdateLabelData = Label

    export type IssuesDeleteLabelData = any

    export type ReposListLanguagesData = Language

    export type ReposDisableLfsForRepoData = any

    export interface LicensesGetForRepoParams {
  /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
    ref?: CodeScanningRef,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type LicensesGetForRepoData = LicenseContent

    export interface ReposMergeUpstreamPayload {
  /** The name of the branch which should be updated to match upstream. */
    branch: string,
}

    export type ReposMergeUpstreamData = MergedUpstream

    export interface ReposMergePayload {
  /** The name of the base branch that the head will be merged into. */
    base: string,
  /** The head to merge. This can be a branch name or a commit SHA1. */
    head: string,
  /** Commit message to use for the merge commit. If omitted, a default message will be used. */
    commit_message?: string,
}

    export type ReposMergeData = Commit

    export interface IssuesListMilestonesParams {
  /**
   * The state of the milestone. Either `open`, `closed`, or `all`.
   * @default "open"
   */
    state?: "open" | "closed" | "all",
  /**
   * What to sort results by. Either `due_on` or `completeness`.
   * @default "due_on"
   */
    sort?: "due_on" | "completeness",
  /**
   * The direction of the sort. Either `asc` or `desc`.
   * @default "asc"
   */
    direction?: "asc" | "desc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type IssuesListMilestonesData = (Milestone)[]

    export interface IssuesCreateMilestonePayload {
  /** The title of the milestone. */
    title: string,
  /**
   * The state of the milestone. Either `open` or `closed`.
   * @default "open"
   */
    state?: "open" | "closed",
  /** A description of the milestone. */
    description?: string,
  /**
   * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    due_on?: string,
}

    export type IssuesCreateMilestoneData = Milestone

    export type IssuesGetMilestoneData = Milestone

    export interface IssuesUpdateMilestonePayload {
  /** The title of the milestone. */
    title?: string,
  /**
   * The state of the milestone. Either `open` or `closed`.
   * @default "open"
   */
    state?: "open" | "closed",
  /** A description of the milestone. */
    description?: string,
  /**
   * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    due_on?: string,
}

    export type IssuesUpdateMilestoneData = Milestone

    export type IssuesDeleteMilestoneData = any

    export interface IssuesListLabelsForMilestoneParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The number that identifies the milestone. */
    milestoneNumber: number,
}

    export type IssuesListLabelsForMilestoneData = (Label)[]

    export interface ActivityListRepoNotificationsForAuthenticatedUserParams {
  /**
   * If `true`, show notifications marked as read.
   * @default false
   */
    all?: boolean,
  /**
   * If `true`, only shows notifications in which the user is directly participating or mentioned.
   * @default false
   */
    participating?: boolean,
  /**
   * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    since?: string,
  /**
   * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    before?: string,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ActivityListRepoNotificationsForAuthenticatedUserData = (Thread)[]

    export interface ActivityMarkRepoNotificationsAsReadPayload {
  /**
   * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
   * @format date-time
   */
    last_read_at?: string,
}

    export interface ActivityMarkRepoNotificationsAsReadData {
    message?: string,
    url?: string,
}

    export type ReposGetPagesData = Page

  /** The source branch and directory used to publish your Pages site. */
  export type ReposCreatePagesSitePayload = ({
  /** The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`. */
    build_type?: "legacy" | "workflow",
  /** The source branch and directory used to publish your Pages site. */
    source?: {
  /** The repository branch used to publish your site's source files. */
    branch: string,
  /**
   * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
   * @default "/"
   */
    path?: "/" | "/docs",

},

})

    export type ReposCreatePagesSiteData = Page

    export type ReposUpdateInformationAboutPagesSitePayload = ({
  /** Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/enterprise-server@3.17/pages/configuring-a-custom-domain-for-your-github-pages-site)." */
    cname?: string | null,
  /** Specify whether HTTPS should be enforced for the repository. */
    https_enforced?: boolean,
  /** The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch. */
    build_type?: "legacy" | "workflow",
  /** Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`. */
    source?: ("gh-pages" | "master" | "master /docs" | {
  /** The repository branch used to publish your site's source files. */
    branch: string,
  /** The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. */
    path: "/" | "/docs",

}),

})

    export type ReposUpdateInformationAboutPagesSiteData = any

    export type ReposDeletePagesSiteData = any

    export interface ReposListPagesBuildsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposListPagesBuildsData = (PageBuild)[]

    export type ReposRequestPagesBuildData = PageBuildStatus

    export type ReposGetLatestPagesBuildData = PageBuild

    export type ReposGetPagesBuildData = PageBuild

  /** The object used to create GitHub Pages deployment */
  export interface ReposCreatePagesDeploymentPayload {
  /** The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. */
    artifact_url: string,
  /**
   * The target environment for this GitHub Pages deployment.
   * @default "github-pages"
   */
    environment?: string,
  /**
   * A unique string that represents the version of the build for this deployment.
   * @default "GITHUB_SHA"
   */
    pages_build_version: string,
  /** The OIDC token issued by GitHub Actions certifying the origin of the deployment. */
    oidc_token: string,
}

    export type ReposCreatePagesDeploymentData = PageDeployment

    export type ReposGetPagesDeploymentData = PagesDeploymentStatus

    export interface EnterpriseAdminListPreReceiveHooksForRepoParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /** @default "created" */
    sort?: "created" | "updated" | "name",
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type EnterpriseAdminListPreReceiveHooksForRepoData = (RepositoryPreReceiveHook)[]

    export type EnterpriseAdminGetPreReceiveHookForRepoData = RepositoryPreReceiveHook

    export interface EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoPayload {
  /** The state of enforcement for the hook on this repository. */
    enforcement?: "enabled" | "disabled" | "testing",
}

    export type EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoData = RepositoryPreReceiveHook

    export type EnterpriseAdminRemovePreReceiveHookEnforcementForRepoData = RepositoryPreReceiveHook

    export interface ProjectsListForRepoParams {
  /**
   * Indicates the state of the projects to return.
   * @default "open"
   */
    state?: "open" | "closed" | "all",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ProjectsListForRepoData = (Project)[]

    export interface ProjectsCreateForRepoPayload {
  /** The name of the project. */
    name: string,
  /** The description of the project. */
    body?: string,
}

    export type ProjectsCreateForRepoData = Project

    export type ReposGetCustomPropertiesValuesData = (CustomPropertyValue)[]

    export interface ReposCreateOrUpdateCustomPropertiesValuesPayload {
  /** A list of custom property names and associated values to apply to the repositories. */
    properties: (CustomPropertyValue)[],
}

    export type ReposCreateOrUpdateCustomPropertiesValuesData = any

    export interface PullsListParams {
  /**
   * Either `open`, `closed`, or `all` to filter by state.
   * @default "open"
   */
    state?: "open" | "closed" | "all",
  /** Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`. */
    head?: string,
  /** Filter pulls by base branch name. Example: `gh-pages`. */
    base?: string,
  /**
   * What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.
   * @default "created"
   */
    sort?: "created" | "updated" | "popularity" | "long-running",
  /** The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`. */
    direction?: "asc" | "desc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type PullsListData = (PullRequestSimple)[]

    export interface PullsCreatePayload {
  /** The title of the new pull request. Required unless `issue` is specified. */
    title?: string,
  /** The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`. */
    head: string,
  /**
   * The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.
   * @format repo.nwo
   */
    head_repo?: string,
  /** The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository. */
    base: string,
  /** The contents of the pull request. */
    body?: string,
  /** Indicates whether [maintainers can modify](https://docs.github.com/enterprise-server@3.17/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
    maintainer_can_modify?: boolean,
  /** Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/enterprise-server@3.17/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more. */
    draft?: boolean,
  /**
   * An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.
   * @format int64
   */
    issue?: number,
}

    export type PullsCreateData = PullRequest

    export interface PullsListReviewCommentsForRepoParams {
    sort?: "created" | "updated" | "created_at",
  /** The direction to sort results. Ignored without `sort` parameter. */
    direction?: "asc" | "desc",
  /**
   * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    since?: string,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type PullsListReviewCommentsForRepoData = (PullRequestReviewComment)[]

    export type PullsGetReviewCommentData = PullRequestReviewComment

    export interface PullsUpdateReviewCommentPayload {
  /** The text of the reply to the review comment. */
    body: string,
}

    export type PullsUpdateReviewCommentData = PullRequestReviewComment

    export type PullsDeleteReviewCommentData = any

    export interface ReactionsListForPullRequestReviewCommentParams {
  /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.17/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a pull request review comment. */
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /**
   * The unique identifier of the comment.
   * @format int64
   */
    commentId: number,
}

    export type ReactionsListForPullRequestReviewCommentData = (Reaction)[]

    export interface ReactionsCreateForPullRequestReviewCommentPayload {
  /** The [reaction type](https://docs.github.com/enterprise-server@3.17/rest/reactions/reactions#about-reactions) to add to the pull request review comment. */
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes",
}

    export type ReactionsCreateForPullRequestReviewCommentData = Reaction

    export type ReactionsDeleteForPullRequestCommentData = any

    export type PullsGetData = PullRequest

    export interface PullsUpdatePayload {
  /** The title of the pull request. */
    title?: string,
  /** The contents of the pull request. */
    body?: string,
  /** State of this Pull Request. Either `open` or `closed`. */
    state?: "open" | "closed",
  /** The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. */
    base?: string,
  /** Indicates whether [maintainers can modify](https://docs.github.com/enterprise-server@3.17/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
    maintainer_can_modify?: boolean,
}

    export type PullsUpdateData = PullRequest

    export interface PullsListReviewCommentsParams {
  /**
   * The property to sort the results by.
   * @default "created"
   */
    sort?: "created" | "updated",
  /** The direction to sort results. Ignored without `sort` parameter. */
    direction?: "asc" | "desc",
  /**
   * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    since?: string,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The number that identifies the pull request. */
    pullNumber: number,
}

    export type PullsListReviewCommentsData = (PullRequestReviewComment)[]

    export interface PullsCreateReviewCommentPayload {
  /** The text of the review comment. */
    body: string,
  /** The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`. */
    commit_id: string,
  /** The relative path to the file that necessitates a comment. */
    path: string,
  /**
   * **This parameter is closing down. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
   * @deprecated
   */
    position?: number,
  /** In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/enterprise-server@3.17/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation. */
    side?: "LEFT" | "RIGHT",
  /** **Required unless using `subject_type:file`**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to. */
    line?: number,
  /** **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/enterprise-server@3.17/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. */
    start_line?: number,
  /** **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/enterprise-server@3.17/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context. */
    start_side?: "LEFT" | "RIGHT" | "side",
  /** The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored. */
    in_reply_to?: number,
  /** The level at which the comment is targeted. */
    subject_type?: "line" | "file",
}

    export type PullsCreateReviewCommentData = PullRequestReviewComment

    export interface PullsCreateReplyForReviewCommentPayload {
  /** The text of the review comment. */
    body: string,
}

    export type PullsCreateReplyForReviewCommentData = PullRequestReviewComment

    export interface PullsListCommitsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The number that identifies the pull request. */
    pullNumber: number,
}

    export type PullsListCommitsData = (Commit)[]

    export interface PullsListFilesParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The number that identifies the pull request. */
    pullNumber: number,
}

    export type PullsListFilesData = (DiffEntry)[]

    export type PullsCheckIfMergedData = any

    export interface PullsMergePayload {
  /** Title for the automatic commit message. */
    commit_title?: string,
  /** Extra detail to append to automatic commit message. */
    commit_message?: string,
  /** SHA that pull request head must match to allow merge. */
    sha?: string,
  /** The merge method to use. */
    merge_method?: "merge" | "squash" | "rebase",
}

    export type PullsMergeData = PullRequestMergeResult

    export type PullsMergeError = ({
    message?: string,
    documentation_url?: string,

})

    export type PullsListRequestedReviewersData = PullRequestReviewRequest

    export type PullsRequestReviewersPayload = ({
  /** An array of user `login`s that will be requested. */
    reviewers?: (string)[],
  /** An array of team `slug`s that will be requested. */
    team_reviewers?: (string)[],

})

    export type PullsRequestReviewersData = PullRequestSimple

    export interface PullsRemoveRequestedReviewersPayload {
  /** An array of user `login`s that will be removed. */
    reviewers: (string)[],
  /** An array of team `slug`s that will be removed. */
    team_reviewers?: (string)[],
}

    export type PullsRemoveRequestedReviewersData = PullRequestSimple

    export interface PullsListReviewsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The number that identifies the pull request. */
    pullNumber: number,
}

    export type PullsListReviewsData = (PullRequestReview)[]

    export interface PullsCreateReviewPayload {
  /** The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value. */
    commit_id?: string,
  /** **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review. */
    body?: string,
  /** The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/enterprise-server@3.17/rest/pulls/reviews#submit-a-review-for-a-pull-request) when you are ready. */
    event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT",
  /** Use the following table to specify the location, destination, and contents of the draft review comment. */
    comments?: ({
  /** The relative path to the file that necessitates a review comment. */
    path: string,
  /** The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file. */
    position?: number,
  /** Text of the review comment. */
    body: string,
    line?: number,
    side?: string,
    start_line?: number,
    start_side?: string,

})[],
}

    export type PullsCreateReviewData = PullRequestReview

    export type PullsGetReviewData = PullRequestReview

    export interface PullsUpdateReviewPayload {
  /** The body text of the pull request review. */
    body: string,
}

    export type PullsUpdateReviewData = PullRequestReview

    export type PullsDeletePendingReviewData = PullRequestReview

    export interface PullsListCommentsForReviewParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The number that identifies the pull request. */
    pullNumber: number,
  /** The unique identifier of the review. */
    reviewId: number,
}

    export type PullsListCommentsForReviewData = (ReviewComment)[]

    export interface PullsDismissReviewPayload {
  /** The message for the pull request review dismissal */
    message: string,
    event?: "DISMISS",
}

    export type PullsDismissReviewData = PullRequestReview

    export interface PullsSubmitReviewPayload {
  /** The body text of the pull request review */
    body?: string,
  /** The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action. */
    event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT",
}

    export type PullsSubmitReviewData = PullRequestReview

    export interface PullsUpdateBranchPayload {
  /** The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/enterprise-server@3.17/rest/commits/commits#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref. */
    expected_head_sha?: string,
}

    export interface PullsUpdateBranchData {
    message?: string,
    url?: string,
}

    export interface ReposGetReadmeParams {
  /** The name of the commit/branch/tag. Default: the repository’s default branch. */
    ref?: string,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposGetReadmeData = ContentFile

    export interface ReposGetReadmeInDirectoryParams {
  /** The name of the commit/branch/tag. Default: the repository’s default branch. */
    ref?: string,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The alternate path to look for a README file */
    dir: string,
}

    export type ReposGetReadmeInDirectoryData = ContentFile

    export interface ReposListReleasesParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposListReleasesData = (Release)[]

    export interface ReposCreateReleasePayload {
  /** The name of the tag. */
    tag_name: string,
  /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch. */
    target_commitish?: string,
  /** The name of the release. */
    name?: string,
  /** Text describing the contents of the tag. */
    body?: string,
  /**
   * `true` to create a draft (unpublished) release, `false` to create a published one.
   * @default false
   */
    draft?: boolean,
  /**
   * `true` to identify the release as a prerelease. `false` to identify the release as a full release.
   * @default false
   */
    prerelease?: boolean,
  /**
   * Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
   * @default false
   */
    generate_release_notes?: boolean,
  /**
   * Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
   * @default "true"
   */
    make_latest?: "true" | "false" | "legacy",
}

    export type ReposCreateReleaseData = Release

    export type ReposGetReleaseAssetData = ReleaseAsset

    export interface ReposUpdateReleaseAssetPayload {
  /** The file name of the asset. */
    name?: string,
  /** An alternate short description of the asset. Used in place of the filename. */
    label?: string,
    state?: string,
}

    export type ReposUpdateReleaseAssetData = ReleaseAsset

    export type ReposDeleteReleaseAssetData = any

    export interface ReposGenerateReleaseNotesPayload {
  /** The tag name for the release. This can be an existing tag or a new one. */
    tag_name: string,
  /** Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists. */
    target_commitish?: string,
  /** The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release. */
    previous_tag_name?: string,
  /** Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used. */
    configuration_file_path?: string,
}

    export type ReposGenerateReleaseNotesData = ReleaseNotesContent

    export type ReposGetLatestReleaseData = Release

    export type ReposGetReleaseByTagData = Release

    export type ReposGetReleaseData = Release

    export interface ReposUpdateReleasePayload {
  /** The name of the tag. */
    tag_name?: string,
  /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch. */
    target_commitish?: string,
  /** The name of the release. */
    name?: string,
  /** Text describing the contents of the tag. */
    body?: string,
  /** `true` makes the release a draft, and `false` publishes the release. */
    draft?: boolean,
  /** `true` to identify the release as a prerelease, `false` to identify the release as a full release. */
    prerelease?: boolean,
  /**
   * Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
   * @default true
   */
    make_latest?: "true" | "false" | "legacy",
}

    export type ReposUpdateReleaseData = Release

    export type ReposDeleteReleaseData = any

    export interface ReposListReleaseAssetsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The unique identifier of the release. */
    releaseId: number,
}

    export type ReposListReleaseAssetsData = (ReleaseAsset)[]

  /**
 * The raw file data
 * @format binary
 */
  export type ReposUploadReleaseAssetPayload = File

    export interface ReposUploadReleaseAssetParams {
    name: string,
    label?: string,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The unique identifier of the release. */
    releaseId: number,
}

    export type ReposUploadReleaseAssetData = ReleaseAsset

    export interface ReactionsListForReleaseParams {
  /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.17/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a release. */
    content?: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The unique identifier of the release. */
    releaseId: number,
}

    export type ReactionsListForReleaseData = (Reaction)[]

    export interface ReactionsCreateForReleasePayload {
  /** The [reaction type](https://docs.github.com/enterprise-server@3.17/rest/reactions/reactions#about-reactions) to add to the release. */
    content: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes",
}

    export type ReactionsCreateForReleaseData = Reaction

    export type ReactionsDeleteForReleaseData = any

    export interface ReposListCacheInfoParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposListCacheInfoData = ({
    host: string,
    location: string,
    git: {
    sync_status: "offline" | "inactive" | "in_sync" | "not_in_sync",
  /** @format date-time */
    last_sync: string,

},

})[]

    export interface ReposGetBranchRulesParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.17/graphql). */
    branch: string,
}

    export type ReposGetBranchRulesData = (RepositoryRuleDetailed)[]

    export interface ReposGetRepoRulesetsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * Include rulesets configured at higher levels that apply to this repository
   * @default true
   */
    includes_parents?: boolean,
  /**
   * A comma-separated list of rule targets to filter by.
   * If provided, only rulesets that apply to the specified targets will be returned.
   * For example, `branch,tag,push`.
   */
    targets?: string,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposGetRepoRulesetsData = (RepositoryRuleset)[]

  /** Request body */
  export interface ReposCreateRepoRulesetPayload {
  /** The name of the ruleset. */
    name: string,
  /**
   * The target of the ruleset
   * @default "branch"
   */
    target?: "branch" | "tag" | "push",
  /** The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page. `evaluate` is not available for the `repository` target. */
    enforcement: RepositoryRuleEnforcement,
  /** The actors that can bypass the rules in this ruleset */
    bypass_actors?: (RepositoryRulesetBypassActor)[],
  /** Parameters for a repository ruleset ref name condition */
    conditions?: RepositoryRulesetConditions,
  /** An array of rules within the ruleset. */
    rules?: (RepositoryRule)[],
}

    export type ReposCreateRepoRulesetData = RepositoryRuleset

    export interface ReposGetRepoRuleSuitesParams {
  /** The name of the ref. Cannot contain wildcard characters. Optionally prefix with `refs/heads/` to limit to branches or `refs/tags/` to limit to tags. Omit the prefix to search across all refs. When specified, only rule evaluations triggered for this ref will be returned. */
    ref?: string,
  /**
   * The time period to filter by.
   * 
   * For example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for rule suites that occurred in the past 7 days (168 hours).
   * @default "day"
   */
    time_period?: "hour" | "day" | "week" | "month",
  /** The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned. */
    actor_name?: string,
  /**
   * The rule suite results to filter on. When specified, only suites with this result will be returned.
   * @default "all"
   */
    rule_suite_result?: "pass" | "fail" | "bypass" | "all",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposGetRepoRuleSuitesData = RuleSuites

    export type ReposGetRepoRuleSuiteData = RuleSuite

    export interface ReposGetRepoRulesetParams {
  /**
   * Include rulesets configured at higher levels that apply to this repository
   * @default true
   */
    includes_parents?: boolean,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The ID of the ruleset. */
    rulesetId: number,
}

    export type ReposGetRepoRulesetData = RepositoryRuleset

  /** Request body */
  export interface ReposUpdateRepoRulesetPayload {
  /** The name of the ruleset. */
    name?: string,
  /** The target of the ruleset */
    target?: "branch" | "tag" | "push",
  /** The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page. `evaluate` is not available for the `repository` target. */
    enforcement?: RepositoryRuleEnforcement,
  /** The actors that can bypass the rules in this ruleset */
    bypass_actors?: (RepositoryRulesetBypassActor)[],
  /** Parameters for a repository ruleset ref name condition */
    conditions?: RepositoryRulesetConditions,
  /** An array of rules within the ruleset. */
    rules?: (RepositoryRule)[],
}

    export type ReposUpdateRepoRulesetData = RepositoryRuleset

    export type ReposDeleteRepoRulesetData = any

    export interface SecretScanningListAlertsForRepoParams {
  /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
    state?: "open" | "resolved",
  /** A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter. See "[Supported secret scanning patterns](https://docs.github.com/enterprise-server@3.17/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)" for a complete list of secret types. */
    secret_type?: string,
  /** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
    resolution?: string,
  /**
   * The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
   * @default "created"
   */
    sort?: "created" | "updated",
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string. */
    before?: string,
  /** A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.17/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string. */
    after?: string,
  /** A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`. */
    validity?: string,
  /**
   * A boolean value representing whether or not to filter alerts by the publicly-leaked tag being present.
   * @default false
   */
    is_publicly_leaked?: boolean,
  /**
   * A boolean value representing whether or not to filter alerts by the multi-repo tag being present.
   * @default false
   */
    is_multi_repo?: boolean,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type SecretScanningListAlertsForRepoData = (SecretScanningAlert)[]

    export type SecretScanningGetAlertData = SecretScanningAlert

    export interface SecretScanningUpdateAlertPayload {
  /** Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`. */
    state: SecretScanningAlertState,
  /** **Required when the `state` is `resolved`.** The reason for resolving the alert. */
    resolution?: SecretScanningAlertResolution,
  /** An optional comment when closing or reopening an alert. Cannot be updated or deleted. */
    resolution_comment?: SecretScanningAlertResolutionComment,
}

    export type SecretScanningUpdateAlertData = SecretScanningAlert

    export interface SecretScanningListLocationsForAlertParams {
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
  /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
    alertNumber: AlertNumber,
}

  /** List of locations where the secret was detected */
  export type SecretScanningListLocationsForAlertData = (SecretScanningLocation)[]

    export interface SecretScanningCreatePushProtectionBypassPayload {
  /** The reason for bypassing push protection. */
    reason: SecretScanningPushProtectionBypassReason,
  /** The ID of the push protection bypass placeholder. This value is returned on any push protected routes. */
    placeholder_id: SecretScanningPushProtectionBypassPlaceholderId,
}

    export type SecretScanningCreatePushProtectionBypassData = SecretScanningPushProtectionBypass

    export type SecretScanningGetScanHistoryData = SecretScanningScanHistory

    export interface ActivityListStargazersForRepoParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ActivityListStargazersForRepoData = ((SimpleUser)[] | (Stargazer)[])

    export type ReposGetCodeFrequencyStatsData = (CodeFrequencyStat)[]

    export type ReposGetCommitActivityStatsData = (CommitActivity)[]

    export type ReposGetContributorsStatsData = (ContributorActivity)[]

    export type ReposGetParticipationStatsData = ParticipationStats

    export type ReposGetPunchCardStatsData = (CodeFrequencyStat)[]

    export interface ReposCreateCommitStatusPayload {
  /** The state of the status. */
    state: "error" | "failure" | "pending" | "success",
  /**
   * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  
   * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  
   * `http://ci.example.com/user/repo/build/sha`
   */
    target_url?: string | null,
  /** A short description of the status. */
    description?: string | null,
  /**
   * A string label to differentiate this status from the status of other systems. This field is case-insensitive.
   * @default "default"
   */
    context?: string,
}

    export type ReposCreateCommitStatusData = Status

    export interface ActivityListWatchersForRepoParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ActivityListWatchersForRepoData = (SimpleUser)[]

    export type ActivityGetRepoSubscriptionData = RepositorySubscription

    export interface ActivitySetRepoSubscriptionPayload {
  /** Determines if notifications should be received from this repository. */
    subscribed?: boolean,
  /** Determines if all notifications should be blocked from this repository. */
    ignored?: boolean,
}

    export type ActivitySetRepoSubscriptionData = RepositorySubscription

    export type ActivityDeleteRepoSubscriptionData = any

    export interface ReposListTagsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposListTagsData = (Tag)[]

    export type ReposListTagProtectionData = (TagProtection)[]

    export interface ReposCreateTagProtectionPayload {
  /** An optional glob pattern to match against when enforcing tag protection. */
    pattern: string,
}

    export type ReposCreateTagProtectionData = TagProtection

    export type ReposDeleteTagProtectionData = any

    export interface ReposListTeamsParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposListTeamsData = (Team)[]

    export interface ReposGetAllTopicsParams {
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** The account owner of the repository. The name is not case sensitive. */
    owner: string,
  /** The name of the repository without the `.git` extension. The name is not case sensitive. */
    repo: string,
}

    export type ReposGetAllTopicsData = Topic

    export interface ReposReplaceAllTopicsPayload {
  /** An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` will be saved as lowercase. */
    names: (string)[],
}

    export type ReposReplaceAllTopicsData = Topic

    export interface ReposTransferPayload {
  /** The username or organization name the repository will be transferred to. */
    new_owner: string,
  /** The new name to be given to the repository. */
    new_name?: string,
  /** ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories. */
    team_ids?: (number)[],
}

    export type ReposTransferData = MinimalRepository

    export type ReposCheckVulnerabilityAlertsData = any

    export type ReposEnableVulnerabilityAlertsData = any

    export type ReposDisableVulnerabilityAlertsData = any

    export interface ReposCreateUsingTemplatePayload {
  /** The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization. */
    owner?: string,
  /** The name of the new repository. */
    name: string,
  /** A short description of the new repository. */
    description?: string,
  /**
   * Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
   * @default false
   */
    include_all_branches?: boolean,
  /**
   * Either `true` to create a new private repository or `false` to create a new public one.
   * @default false
   */
    private?: boolean,
}

    export type ReposCreateUsingTemplateData = FullRepository

    export interface ReposListPublicParams {
  /** A repository ID. Only return repositories with an ID greater than this ID. */
    since?: number,
  /**
   * Specifies the types of repositories to return. This endpoint will only list repositories available to all users on the enterprise.
   * @default "public"
   */
    visibility?: "all" | "public",
}

    export type ReposListPublicData = (MinimalRepository)[]

    export interface EnterpriseAdminListProvisionedGroupsEnterpriseParams {
  /** If specified, only results that match the specified filter will be returned. Multiple filters are not supported. Possible filters are `externalId`, `id`, and `displayName`. For example, `?filter=externalId eq "9138790-10932-109120392-12321"`. */
    filter?: string,
  /** Excludes the specified attribute from being returned in the results. Using this parameter can speed up response time. */
    excludedAttributes?: string,
  /**
   * Used for pagination: the starting index of the first result to return when paginating through values.
   * @format int32
   * @default 1
   */
    startIndex?: number,
  /**
   * Used for pagination: the number of results to return per page.
   * @format int32
   * @default 30
   */
    count?: number,
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
    enterprise: string,
}

    export type EnterpriseAdminListProvisionedGroupsEnterpriseData = ScimEnterpriseGroupList

    export type EnterpriseAdminProvisionEnterpriseGroupData = ScimEnterpriseGroupResponse

    export interface EnterpriseAdminGetProvisioningInformationForEnterpriseGroupParams {
  /** Excludes the specified attribute from being returned in the results. Using this parameter can speed up response time. */
    excludedAttributes?: string,
  /** A unique identifier of the SCIM group. */
    scimGroupId: string,
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
    enterprise: string,
}

    export type EnterpriseAdminGetProvisioningInformationForEnterpriseGroupData = ScimEnterpriseGroupResponse

    export type EnterpriseAdminSetInformationForProvisionedEnterpriseGroupData = ScimEnterpriseGroupResponse

    export type EnterpriseAdminUpdateAttributeForEnterpriseGroupData = ScimEnterpriseGroupResponse

    export type EnterpriseAdminDeleteScimGroupFromEnterpriseData = any

    export interface EnterpriseAdminListProvisionedIdentitiesEnterpriseParams {
  /** If specified, only results that match the specified filter will be returned. Multiple filters are not supported. Possible filters are `userName`, `externalId`, `id`, and `displayName`. For example, `?filter=externalId eq "9138790-10932-109120392-12321"`. */
    filter?: string,
  /**
   * Used for pagination: the starting index of the first result to return when paginating through values.
   * @format int32
   * @default 1
   */
    startIndex?: number,
  /**
   * Used for pagination: the number of results to return per page.
   * @format int32
   * @default 30
   */
    count?: number,
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
    enterprise: string,
}

    export type EnterpriseAdminListProvisionedIdentitiesEnterpriseData = ScimEnterpriseUserList

    export type EnterpriseAdminProvisionEnterpriseUserData = ScimEnterpriseUserResponse

    export type EnterpriseAdminGetProvisioningInformationForEnterpriseUserData = ScimEnterpriseUserResponse

    export type EnterpriseAdminSetInformationForProvisionedEnterpriseUserData = ScimEnterpriseUserResponse

    export type EnterpriseAdminUpdateAttributeForEnterpriseUserData = ScimEnterpriseUserResponse

    export type EnterpriseAdminDeleteUserFromEnterpriseData = any

    export interface SearchCodeParams {
  /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports different qualifiers than the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.17/rest/search/search#constructing-a-search-query). See "[Searching code](https://docs.github.com/enterprise-server@3.17/search-github/searching-on-github/searching-code)" for a detailed list of qualifiers. */
    q: string,
  /** Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub Enterprise Server search infrastructure. Default: [best match](https://docs.github.com/enterprise-server@3.17/rest/search/search#ranking-search-results) */
    sort?: "indexed",
  /**
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   * @default "desc"
   */
    order?: "desc" | "asc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export interface SearchCodeData {
    total_count: number,
    incomplete_results: boolean,
    items: (CodeSearchResultItem)[],
}

    export interface SearchCommitsParams {
  /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.17/rest/search/search#constructing-a-search-query). See "[Searching commits](https://docs.github.com/enterprise-server@3.17/search-github/searching-on-github/searching-commits)" for a detailed list of qualifiers. */
    q: string,
  /** Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/enterprise-server@3.17/rest/search/search#ranking-search-results) */
    sort?: "author-date" | "committer-date",
  /**
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   * @default "desc"
   */
    order?: "desc" | "asc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export interface SearchCommitsData {
    total_count: number,
    incomplete_results: boolean,
    items: (CommitSearchResultItem)[],
}

    export interface SearchIssuesAndPullRequestsParams {
  /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.17/rest/search/search#constructing-a-search-query). See "[Searching issues and pull requests](https://docs.github.com/enterprise-server@3.17/search-github/searching-on-github/searching-issues-and-pull-requests)" for a detailed list of qualifiers. */
    q: string,
  /** Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/enterprise-server@3.17/rest/search/search#ranking-search-results) */
    sort?: "comments" | "reactions" | "reactions-+1" | "reactions--1" | "reactions-smile" | "reactions-thinking_face" | "reactions-heart" | "reactions-tada" | "interactions" | "created" | "updated",
  /**
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   * @default "desc"
   */
    order?: "desc" | "asc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * Set to `true` to use advanced search.
   * Example: `http://api.github.com/search/issues?q={query}&advanced_search=true`
   */
    advanced_search?: string,
}

    export interface SearchIssuesAndPullRequestsData {
    total_count: number,
    incomplete_results: boolean,
    items: (IssueSearchResultItem)[],
}

    export interface SearchLabelsParams {
  /** The id of the repository. */
    repository_id: number,
  /** The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.17/rest/search/search#constructing-a-search-query). */
    q: string,
  /** Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/enterprise-server@3.17/rest/search/search#ranking-search-results) */
    sort?: "created" | "updated",
  /**
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   * @default "desc"
   */
    order?: "desc" | "asc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export interface SearchLabelsData {
    total_count: number,
    incomplete_results: boolean,
    items: (LabelSearchResultItem)[],
}

    export interface SearchReposParams {
  /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.17/rest/search/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/enterprise-server@3.17/articles/searching-for-repositories/)" for a detailed list of qualifiers. */
    q: string,
  /** Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/enterprise-server@3.17/rest/search/search#ranking-search-results) */
    sort?: "stars" | "forks" | "help-wanted-issues" | "updated",
  /**
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   * @default "desc"
   */
    order?: "desc" | "asc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export interface SearchReposData {
    total_count: number,
    incomplete_results: boolean,
    items: (RepoSearchResultItem)[],
}

    export interface SearchTopicsParams {
  /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.17/rest/search/search#constructing-a-search-query). */
    q: string,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export interface SearchTopicsData {
    total_count: number,
    incomplete_results: boolean,
    items: (TopicSearchResultItem)[],
}

    export interface SearchUsersParams {
  /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.17/rest/search/search#constructing-a-search-query). See "[Searching users](https://docs.github.com/enterprise-server@3.17/search-github/searching-on-github/searching-users)" for a detailed list of qualifiers. */
    q: string,
  /** Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub Enterprise Server. Default: [best match](https://docs.github.com/enterprise-server@3.17/rest/search/search#ranking-search-results) */
    sort?: "followers" | "repositories" | "joined",
  /**
   * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
   * @default "desc"
   */
    order?: "desc" | "asc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export interface SearchUsersData {
    total_count: number,
    incomplete_results: boolean,
    items: (UserSearchResultItem)[],
}

    export type TeamsGetLegacyData = TeamFull

    export interface TeamsUpdateLegacyPayload {
  /** The name of the team. */
    name: string,
  /** The description of the team. */
    description?: string,
  /**
   * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  
   * **For a non-nested team:**  
   *  * `secret` - only visible to organization owners and members of this team.  
   *  * `closed` - visible to all members of this organization.  
   * **For a parent or child team:**  
   *  * `closed` - visible to all members of this organization.
   */
    privacy?: "secret" | "closed",
  /**
   * The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are: 
   *  * `notifications_enabled` - team members receive notifications when the team is @mentioned.  
   *  * `notifications_disabled` - no one receives notifications.
   */
    notification_setting?: "notifications_enabled" | "notifications_disabled",
  /**
   * **Closing down notice**. The permission that new repositories will be added to the team with when none is specified.
   * @default "pull"
   */
    permission?: "pull" | "push" | "admin",
  /** The ID of a team to set as the parent team. */
    parent_team_id?: number | null,
}

    export type TeamsUpdateLegacyData = TeamFull

    export type TeamsDeleteLegacyData = any

    export interface TeamsListDiscussionsLegacyParams {
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The unique identifier of the team. */
    teamId: number,
}

    export type TeamsListDiscussionsLegacyData = (TeamDiscussion)[]

    export interface TeamsCreateDiscussionLegacyPayload {
  /** The discussion post's title. */
    title: string,
  /** The discussion post's body text. */
    body: string,
  /**
   * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
   * @default false
   */
    private?: boolean,
}

    export type TeamsCreateDiscussionLegacyData = TeamDiscussion

    export type TeamsGetDiscussionLegacyData = TeamDiscussion

    export interface TeamsUpdateDiscussionLegacyPayload {
  /** The discussion post's title. */
    title?: string,
  /** The discussion post's body text. */
    body?: string,
}

    export type TeamsUpdateDiscussionLegacyData = TeamDiscussion

    export type TeamsDeleteDiscussionLegacyData = any

    export interface TeamsListDiscussionCommentsLegacyParams {
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The unique identifier of the team. */
    teamId: number,
  /** The number that identifies the discussion. */
    discussionNumber: number,
}

    export type TeamsListDiscussionCommentsLegacyData = (TeamDiscussionComment)[]

    export interface TeamsCreateDiscussionCommentLegacyPayload {
  /** The discussion comment's body text. */
    body: string,
}

    export type TeamsCreateDiscussionCommentLegacyData = TeamDiscussionComment

    export type TeamsGetDiscussionCommentLegacyData = TeamDiscussionComment

    export interface TeamsUpdateDiscussionCommentLegacyPayload {
  /** The discussion comment's body text. */
    body: string,
}

    export type TeamsUpdateDiscussionCommentLegacyData = TeamDiscussionComment

    export type TeamsDeleteDiscussionCommentLegacyData = any

    export interface ReactionsListForTeamDiscussionCommentLegacyParams {
  /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.17/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion comment. */
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The unique identifier of the team. */
    teamId: number,
  /** The number that identifies the discussion. */
    discussionNumber: number,
  /** The number that identifies the comment. */
    commentNumber: number,
}

    export type ReactionsListForTeamDiscussionCommentLegacyData = (Reaction)[]

    export interface ReactionsCreateForTeamDiscussionCommentLegacyPayload {
  /** The [reaction type](https://docs.github.com/enterprise-server@3.17/rest/reactions/reactions#about-reactions) to add to the team discussion comment. */
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes",
}

    export type ReactionsCreateForTeamDiscussionCommentLegacyData = Reaction

    export interface ReactionsListForTeamDiscussionLegacyParams {
  /** Returns a single [reaction type](https://docs.github.com/enterprise-server@3.17/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion. */
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The unique identifier of the team. */
    teamId: number,
  /** The number that identifies the discussion. */
    discussionNumber: number,
}

    export type ReactionsListForTeamDiscussionLegacyData = (Reaction)[]

    export interface ReactionsCreateForTeamDiscussionLegacyPayload {
  /** The [reaction type](https://docs.github.com/enterprise-server@3.17/rest/reactions/reactions#about-reactions) to add to the team discussion. */
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes",
}

    export type ReactionsCreateForTeamDiscussionLegacyData = Reaction

    export interface TeamsListMembersLegacyParams {
  /**
   * Filters members returned by their role in the team.
   * @default "all"
   */
    role?: "member" | "maintainer" | "all",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The unique identifier of the team. */
    teamId: number,
}

    export type TeamsListMembersLegacyData = (SimpleUser)[]

    export type TeamsGetMemberLegacyData = any

    export type TeamsAddMemberLegacyData = any

    export type TeamsRemoveMemberLegacyData = any

    export type TeamsGetMembershipForUserLegacyData = TeamMembership

    export interface TeamsAddOrUpdateMembershipForUserLegacyPayload {
  /**
   * The role that this user should have in the team.
   * @default "member"
   */
    role?: "member" | "maintainer",
}

    export type TeamsAddOrUpdateMembershipForUserLegacyData = TeamMembership

    export type TeamsRemoveMembershipForUserLegacyData = any

    export interface TeamsListProjectsLegacyParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The unique identifier of the team. */
    teamId: number,
}

    export type TeamsListProjectsLegacyData = (TeamProject)[]

    export type TeamsCheckPermissionsForProjectLegacyData = TeamProject

    export interface TeamsAddOrUpdateProjectPermissionsLegacyPayload {
  /** The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/enterprise-server@3.17/rest/guides/getting-started-with-the-rest-api#http-method)." */
    permission?: "read" | "write" | "admin",
}

    export type TeamsAddOrUpdateProjectPermissionsLegacyData = any

    export type TeamsAddOrUpdateProjectPermissionsLegacyError = ({
    message?: string,
    documentation_url?: string,

})

    export type TeamsRemoveProjectLegacyData = any

    export interface TeamsListReposLegacyParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The unique identifier of the team. */
    teamId: number,
}

    export type TeamsListReposLegacyData = (MinimalRepository)[]

    export type TeamsCheckPermissionsForRepoLegacyData = TeamRepository

    export interface TeamsAddOrUpdateRepoPermissionsLegacyPayload {
  /** The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository. */
    permission?: "pull" | "push" | "admin",
}

    export type TeamsAddOrUpdateRepoPermissionsLegacyData = any

    export type TeamsRemoveRepoLegacyData = any

    export interface TeamsListChildLegacyParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The unique identifier of the team. */
    teamId: number,
}

    export type TeamsListChildLegacyData = (Team)[]

    export type UsersGetAuthenticatedData = (({
user_view_type: "public"
} & PublicUser) | ({
user_view_type: "private"
} & PrivateUser))

    export interface UsersUpdateAuthenticatedPayload {
  /** The new name of the user. */
    name?: string,
  /** The publicly visible email address of the user. */
    email?: string,
  /** The new blog URL of the user. */
    blog?: string,
  /** The new Twitter username of the user. */
    twitter_username?: string | null,
  /** The new company of the user. */
    company?: string,
  /** The new location of the user. */
    location?: string,
  /** The new hiring availability of the user. */
    hireable?: boolean,
  /** The new short biography of the user. */
    bio?: string,
}

    export type UsersUpdateAuthenticatedData = PrivateUser

    export type PackagesListDockerMigrationConflictingPackagesForAuthenticatedUserData = (Package)[]

    export interface UsersListEmailsForAuthenticatedUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type UsersListEmailsForAuthenticatedUserData = (Email)[]

    export type UsersAddEmailForAuthenticatedUserPayload = ({
  /**
   * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
   * @minItems 1
   */
    emails: (string)[],

} | (string)[] | string)

    export type UsersAddEmailForAuthenticatedUserData = (Email)[]

  /** Deletes one or more email addresses from your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key. */
  export type UsersDeleteEmailForAuthenticatedUserPayload = ({
  /**
   * Email addresses associated with the GitHub user account.
   * @minItems 1
   */
    emails: (string)[],

} | (string)[] | string)

    export type UsersDeleteEmailForAuthenticatedUserData = any

    export interface UsersListFollowersForAuthenticatedUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type UsersListFollowersForAuthenticatedUserData = (SimpleUser)[]

    export interface UsersListFollowedByAuthenticatedUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type UsersListFollowedByAuthenticatedUserData = (SimpleUser)[]

    export type UsersCheckPersonIsFollowedByAuthenticatedData = any

    export type UsersCheckPersonIsFollowedByAuthenticatedError = (BasicError)

    export type UsersFollowData = any

    export type UsersUnfollowData = any

    export interface UsersListGpgKeysForAuthenticatedUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type UsersListGpgKeysForAuthenticatedUserData = (GpgKey)[]

    export interface UsersCreateGpgKeyForAuthenticatedUserPayload {
  /** A descriptive name for the new key. */
    name?: string,
  /** A GPG key in ASCII-armored format. */
    armored_public_key: string,
}

    export type UsersCreateGpgKeyForAuthenticatedUserData = GpgKey

    export type UsersGetGpgKeyForAuthenticatedUserData = GpgKey

    export type UsersDeleteGpgKeyForAuthenticatedUserData = any

    export interface AppsListInstallationsForAuthenticatedUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export interface AppsListInstallationsForAuthenticatedUserData {
    total_count: number,
    installations: (Installation)[],
}

    export interface AppsListInstallationReposForAuthenticatedUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The unique identifier of the installation. */
    installationId: number,
}

    export interface AppsListInstallationReposForAuthenticatedUserData {
    total_count: number,
    repository_selection?: string,
    repositories: (Repository)[],
}

    export type AppsAddRepoToInstallationForAuthenticatedUserData = any

    export type AppsRemoveRepoFromInstallationForAuthenticatedUserData = any

    export interface IssuesListForAuthenticatedUserParams {
  /**
   * Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
   * @default "assigned"
   */
    filter?: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all",
  /**
   * Indicates the state of the issues to return.
   * @default "open"
   */
    state?: "open" | "closed" | "all",
  /** A list of comma separated label names. Example: `bug,ui,@high` */
    labels?: string,
  /**
   * What to sort results by.
   * @default "created"
   */
    sort?: "created" | "updated" | "comments",
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    since?: string,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type IssuesListForAuthenticatedUserData = (Issue)[]

    export interface UsersListPublicSshKeysForAuthenticatedUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type UsersListPublicSshKeysForAuthenticatedUserData = (Key)[]

    export interface UsersCreatePublicSshKeyForAuthenticatedUserPayload {
  /** A descriptive name for the new key. */
    title?: string,
  /**
   * The public SSH key to add to your GitHub account.
   * @pattern ^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) 
   */
    key: string,
}

    export type UsersCreatePublicSshKeyForAuthenticatedUserData = Key

    export type UsersGetPublicSshKeyForAuthenticatedUserData = Key

    export type UsersDeletePublicSshKeyForAuthenticatedUserData = any

    export interface OrgsListMembershipsForAuthenticatedUserParams {
  /** Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships. */
    state?: "active" | "pending",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type OrgsListMembershipsForAuthenticatedUserData = (OrgMembership)[]

    export type OrgsGetMembershipForAuthenticatedUserData = OrgMembership

    export interface OrgsUpdateMembershipForAuthenticatedUserPayload {
  /** The state that the membership should be in. Only `"active"` will be accepted. */
    state: "active",
}

    export type OrgsUpdateMembershipForAuthenticatedUserData = OrgMembership

    export interface MigrationsListForAuthenticatedUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type MigrationsListForAuthenticatedUserData = (Migration)[]

    export interface MigrationsStartForAuthenticatedUserPayload {
  /** Lock the repositories being migrated at the start of the migration */
    lock_repositories?: boolean,
  /** Indicates whether metadata should be excluded and only git source should be included for the migration. */
    exclude_metadata?: boolean,
  /** Indicates whether the repository git data should be excluded from the migration. */
    exclude_git_data?: boolean,
  /** Do not include attachments in the migration */
    exclude_attachments?: boolean,
  /** Do not include releases in the migration */
    exclude_releases?: boolean,
  /** Indicates whether projects owned by the organization or users should be excluded. */
    exclude_owner_projects?: boolean,
  /**
   * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
   * @default false
   */
    org_metadata_only?: boolean,
  /** Exclude attributes from the API response to improve performance */
    exclude?: ("repositories")[],
    repositories: (string)[],
}

    export type MigrationsStartForAuthenticatedUserData = Migration

    export interface MigrationsListReposForAuthenticatedUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The unique identifier of the migration. */
    migrationId: number,
}

    export type MigrationsListReposForAuthenticatedUserData = (MinimalRepository)[]

    export interface OrgsListForAuthenticatedUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type OrgsListForAuthenticatedUserData = (OrganizationSimple)[]

    export interface PackagesListPackagesForAuthenticatedUserParams {
  /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
    package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  /**
   * The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
   * 
   * The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
   * For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/enterprise-server@3.17/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
   */
    visibility?: "public" | "private" | "internal",
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
}

    export type PackagesListPackagesForAuthenticatedUserData = (Package)[]

    export type PackagesGetPackageForAuthenticatedUserData = Package

    export type PackagesDeletePackageForAuthenticatedUserData = any

    export interface PackagesRestorePackageForAuthenticatedUserParams {
  /** package token */
    token?: string,
  /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  /** The name of the package. */
    packageName: string,
}

    export type PackagesRestorePackageForAuthenticatedUserData = any

    export interface PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParams {
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The state of the package, either active or deleted.
   * @default "active"
   */
    state?: "active" | "deleted",
  /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  /** The name of the package. */
    packageName: string,
}

    export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserData = (PackageVersion)[]

    export type PackagesGetPackageVersionForAuthenticatedUserData = PackageVersion

    export type PackagesDeletePackageVersionForAuthenticatedUserData = any

    export type PackagesRestorePackageVersionForAuthenticatedUserData = any

    export interface ProjectsCreateForAuthenticatedUserPayload {
  /** Name of the project */
    name: string,
  /** Body of the project */
    body?: string | null,
}

    export type ProjectsCreateForAuthenticatedUserData = Project

    export interface UsersListPublicEmailsForAuthenticatedUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type UsersListPublicEmailsForAuthenticatedUserData = (Email)[]

    export interface ReposListForAuthenticatedUserParams {
  /**
   * Limit results to repositories with the specified visibility.
   * @default "all"
   */
    visibility?: "all" | "public" | "private",
  /**
   * Comma-separated list of values. Can include:  
   *  * `owner`: Repositories that are owned by the authenticated user.  
   *  * `collaborator`: Repositories that the user has been added to as a collaborator.  
   *  * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
   * @default "owner,collaborator,organization_member"
   */
    affiliation?: string,
  /**
   * Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
   * @default "all"
   */
    type?: "all" | "owner" | "public" | "private" | "member",
  /**
   * The property to sort the results by.
   * @default "full_name"
   */
    sort?: "created" | "updated" | "pushed" | "full_name",
  /** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */
    direction?: "asc" | "desc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * Only show repositories updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    since?: string,
  /**
   * Only show repositories updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    before?: string,
}

    export type ReposListForAuthenticatedUserData = (Repository)[]

    export interface ReposCreateForAuthenticatedUserPayload {
  /** The name of the repository. */
    name: string,
  /** A short description of the repository. */
    description?: string,
  /** A URL with more information about the repository. */
    homepage?: string,
  /**
   * Whether the repository is private.
   * @default false
   */
    private?: boolean,
  /**
   * Whether issues are enabled.
   * @default true
   */
    has_issues?: boolean,
  /**
   * Whether projects are enabled.
   * @default true
   */
    has_projects?: boolean,
  /**
   * Whether the wiki is enabled.
   * @default true
   */
    has_wiki?: boolean,
  /**
   * Whether discussions are enabled.
   * @default false
   */
    has_discussions?: boolean,
  /** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
    team_id?: number,
  /**
   * Whether the repository is initialized with a minimal README.
   * @default false
   */
    auto_init?: boolean,
  /** The desired language or platform to apply to the .gitignore. */
    gitignore_template?: string,
  /** The license keyword of the open source license for this repository. */
    license_template?: string,
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   */
    allow_squash_merge?: boolean,
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   */
    allow_merge_commit?: boolean,
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   */
    allow_rebase_merge?: boolean,
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   * @default false
   */
    allow_auto_merge?: boolean,
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   */
    delete_branch_on_merge?: boolean,
  /**
   * Required when using `squash_merge_commit_message`.
   * 
   * The default value for a squash merge commit title:
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE",
  /**
   * The default value for a squash merge commit message:
   * 
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK",
  /**
   * Required when using `merge_commit_message`.
   * 
   * The default value for a merge commit title.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE",
  /**
   * The default value for a merge commit message.
   * 
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK",
  /**
   * Whether downloads are enabled.
   * @default true
   */
    has_downloads?: boolean,
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @default false
   */
    is_template?: boolean,
}

    export type ReposCreateForAuthenticatedUserData = FullRepository

    export interface ReposListInvitationsForAuthenticatedUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type ReposListInvitationsForAuthenticatedUserData = (RepositoryInvitation)[]

    export type ReposAcceptInvitationForAuthenticatedUserData = any

    export type ReposDeclineInvitationForAuthenticatedUserData = any

    export interface UsersListSocialAccountsForAuthenticatedUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type UsersListSocialAccountsForAuthenticatedUserData = (SocialAccount)[]

  /** @example {"account_urls":["https://www.linkedin.com/company/github/","https://twitter.com/github"]} */
  export interface UsersAddSocialAccountForAuthenticatedUserPayload {
  /** Full URLs for the social media profiles to add. */
    account_urls: (string)[],
}

    export type UsersAddSocialAccountForAuthenticatedUserData = (SocialAccount)[]

  /** @example {"account_urls":["https://www.linkedin.com/company/github/","https://twitter.com/github"]} */
  export interface UsersDeleteSocialAccountForAuthenticatedUserPayload {
  /** Full URLs for the social media profiles to delete. */
    account_urls: (string)[],
}

    export type UsersDeleteSocialAccountForAuthenticatedUserData = any

    export interface UsersListSshSigningKeysForAuthenticatedUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type UsersListSshSigningKeysForAuthenticatedUserData = (SshSigningKey)[]

    export interface UsersCreateSshSigningKeyForAuthenticatedUserPayload {
  /** A descriptive name for the new key. */
    title?: string,
  /**
   * The public SSH key to add to your GitHub account. For more information, see "[Checking for existing SSH keys](https://docs.github.com/enterprise-server@3.17/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)."
   * @pattern ^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) |^(sk-ssh-ed25519|sk-ecdsa-sha2-nistp256)@openssh.com 
   */
    key: string,
}

    export type UsersCreateSshSigningKeyForAuthenticatedUserData = SshSigningKey

    export type UsersGetSshSigningKeyForAuthenticatedUserData = SshSigningKey

    export type UsersDeleteSshSigningKeyForAuthenticatedUserData = any

    export interface ActivityListReposStarredByAuthenticatedUserParams {
  /**
   * The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
   * @default "created"
   */
    sort?: "created" | "updated",
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type ActivityListReposStarredByAuthenticatedUserData = (Repository)[]

    export type ActivityCheckRepoIsStarredByAuthenticatedUserData = any

    export type ActivityCheckRepoIsStarredByAuthenticatedUserError = (BasicError)

    export type ActivityStarRepoForAuthenticatedUserData = any

    export type ActivityUnstarRepoForAuthenticatedUserData = any

    export interface ActivityListWatchedReposForAuthenticatedUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type ActivityListWatchedReposForAuthenticatedUserData = (MinimalRepository)[]

    export interface TeamsListForAuthenticatedUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
}

    export type TeamsListForAuthenticatedUserData = (TeamFull)[]

    export type UsersGetByIdData = (({
user_view_type: "public"
} & PublicUser) | ({
user_view_type: "private"
} & PrivateUser))

    export interface UsersListParams {
  /** A user ID. Only return users with an ID greater than this ID. */
    since?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
}

    export type UsersListData = (SimpleUser)[]

    export type UsersGetByUsernameData = (({
user_view_type: "public"
} & PublicUser) | ({
user_view_type: "private"
} & PrivateUser))

    export type PackagesListDockerMigrationConflictingPackagesForUserData = (Package)[]

    export interface ActivityListEventsForAuthenticatedUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The handle for the GitHub user account. */
    username: string,
}

    export type ActivityListEventsForAuthenticatedUserData = (Event)[]

    export interface ActivityListOrgEventsForAuthenticatedUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The handle for the GitHub user account. */
    username: string,
  /** The organization name. The name is not case sensitive. */
    org: string,
}

    export type ActivityListOrgEventsForAuthenticatedUserData = (Event)[]

    export interface ActivityListPublicEventsForUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The handle for the GitHub user account. */
    username: string,
}

    export type ActivityListPublicEventsForUserData = (Event)[]

    export interface UsersListFollowersForUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The handle for the GitHub user account. */
    username: string,
}

    export type UsersListFollowersForUserData = (SimpleUser)[]

    export interface UsersListFollowingForUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The handle for the GitHub user account. */
    username: string,
}

    export type UsersListFollowingForUserData = (SimpleUser)[]

    export type UsersCheckFollowingForUserData = any

    export interface GistsListForUserParams {
  /**
   * Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   * @format date-time
   */
    since?: string,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The handle for the GitHub user account. */
    username: string,
}

    export type GistsListForUserData = (BaseGist)[]

    export interface UsersListGpgKeysForUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The handle for the GitHub user account. */
    username: string,
}

    export type UsersListGpgKeysForUserData = (GpgKey)[]

    export interface UsersGetContextForUserParams {
  /** Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`. */
    subject_type?: "organization" | "repository" | "issue" | "pull_request",
  /** Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`. */
    subject_id?: string,
  /** The handle for the GitHub user account. */
    username: string,
}

    export type UsersGetContextForUserData = Hovercard

    export type AppsGetUserInstallationData = Installation

    export interface UsersListPublicKeysForUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The handle for the GitHub user account. */
    username: string,
}

    export type UsersListPublicKeysForUserData = (KeySimple)[]

    export interface OrgsListForUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The handle for the GitHub user account. */
    username: string,
}

    export type OrgsListForUserData = (OrganizationSimple)[]

    export interface PackagesListPackagesForUserParams {
  /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
    package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  /**
   * The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
   * 
   * The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
   * For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/enterprise-server@3.17/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
   */
    visibility?: "public" | "private" | "internal",
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /** The handle for the GitHub user account. */
    username: string,
}

    export type PackagesListPackagesForUserData = (Package)[]

    export type PackagesGetPackageForUserData = Package

    export type PackagesDeletePackageForUserData = any

    export interface PackagesRestorePackageForUserParams {
  /** package token */
    token?: string,
  /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  /** The name of the package. */
    packageName: string,
  /** The handle for the GitHub user account. */
    username: string,
}

    export type PackagesRestorePackageForUserData = any

    export type PackagesGetAllPackageVersionsForPackageOwnedByUserData = (PackageVersion)[]

    export type PackagesGetPackageVersionForUserData = PackageVersion

    export type PackagesDeletePackageVersionForUserData = any

    export type PackagesRestorePackageVersionForUserData = any

    export interface ProjectsListForUserParams {
  /**
   * Indicates the state of the projects to return.
   * @default "open"
   */
    state?: "open" | "closed" | "all",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The handle for the GitHub user account. */
    username: string,
}

    export type ProjectsListForUserData = (Project)[]

    export interface ActivityListReceivedEventsForUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The handle for the GitHub user account. */
    username: string,
}

    export type ActivityListReceivedEventsForUserData = (Event)[]

    export interface ActivityListReceivedPublicEventsForUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The handle for the GitHub user account. */
    username: string,
}

    export type ActivityListReceivedPublicEventsForUserData = (Event)[]

    export interface ReposListForUserParams {
  /**
   * Limit results to repositories of the specified type.
   * @default "owner"
   */
    type?: "all" | "owner" | "member",
  /**
   * The property to sort the results by.
   * @default "full_name"
   */
    sort?: "created" | "updated" | "pushed" | "full_name",
  /** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */
    direction?: "asc" | "desc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The handle for the GitHub user account. */
    username: string,
}

    export type ReposListForUserData = (MinimalRepository)[]

    export type EnterpriseAdminPromoteUserToBeSiteAdministratorData = any

    export type EnterpriseAdminDemoteSiteAdministratorData = any

    export interface UsersListSocialAccountsForUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The handle for the GitHub user account. */
    username: string,
}

    export type UsersListSocialAccountsForUserData = (SocialAccount)[]

    export interface UsersListSshSigningKeysForUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The handle for the GitHub user account. */
    username: string,
}

    export type UsersListSshSigningKeysForUserData = (SshSigningKey)[]

    export interface ActivityListReposStarredByUserParams {
  /**
   * The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
   * @default "created"
   */
    sort?: "created" | "updated",
  /**
   * The direction to sort the results by.
   * @default "desc"
   */
    direction?: "asc" | "desc",
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The handle for the GitHub user account. */
    username: string,
}

    export type ActivityListReposStarredByUserData = ((StarredRepository)[] | (Repository)[])

    export interface ActivityListReposWatchedByUserParams {
  /**
   * The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 30
   */
    per_page?: number,
  /**
   * The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.17/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
   * @default 1
   */
    page?: number,
  /** The handle for the GitHub user account. */
    username: string,
}

    export type ActivityListReposWatchedByUserData = (MinimalRepository)[]

    export interface EnterpriseAdminSuspendUserPayload {
  /** The reason the user is being suspended. This message will be logged in the [audit log](https://docs.github.com/enterprise-server@3.17/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/about-the-audit-log-for-your-enterprise). If you don't provide a `reason`, it will default to "Suspended via API by _SITE\_ADMINISTRATOR_", where _SITE\_ADMINISTRATOR_ is the person who performed the action. */
    reason?: string,
}

    export type EnterpriseAdminSuspendUserData = any

    export interface EnterpriseAdminUnsuspendUserPayload {
  /** The reason the user is being unsuspended. This message will be logged in the [audit log](https://docs.github.com/enterprise-server@3.17/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/about-the-audit-log-for-your-enterprise). If you don't provide a `reason`, it will default to "Unsuspended via API by _SITE\_ADMINISTRATOR_", where _SITE\_ADMINISTRATOR_ is the person who performed the action. */
    reason?: string,
}

    export type EnterpriseAdminUnsuspendUserData = any

    export type MetaGetZenData = string

